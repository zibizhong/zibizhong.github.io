<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSP</title>
      <link href="/2022/08/14/JSP/"/>
      <url>/2022/08/14/JSP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><ul><li>Java Server Pages,Java服务端页面</li><li>一种动态的网页技术,既可以定义HTML、JS、CSS等静态内容,还可以定义Java的动态内容</li></ul></blockquote><h2 id="JSP入门"><a href="#JSP入门" class="headerlink" title="JSP入门"></a>JSP入门</h2><h3 id="1-导入jsp坐标"><a href="#1-导入jsp坐标" class="headerlink" title="1.导入jsp坐标"></a>1.导入jsp坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建JSP文件编写代码"><a href="#2-创建JSP文件编写代码" class="headerlink" title="2.创建JSP文件编写代码"></a>2.创建JSP文件编写代码</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: .crush</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">8</span>/<span class="number">14</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">14</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp你好&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;hello jsp&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h2><p><img src="/2022/08/14/JSP/image-20220814161736815.png" alt="image-20220814161736815"></p><blockquote><p>jsp在被访问时,由JSP容器(Tomcat)将其转换为Java文件(Servlet),由JSP容器(Tomcat)将其编译,最终对外提供服务的其实就是class的字节码文件</p></blockquote><h2 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h2><ul><li>JSP脚本用于在JSP页面内定义Java代码</li><li>JSP脚本父类<br>        1. &lt;%…%&gt;:内容会直接放在__jspService()方法中<br>        1. &lt;%&#x3D;..%&gt;:内容会放在out.print()中,作为out.print()的参数<br>        1. &lt;%!…%&gt;:内容会放在__jspService()方法之外,被类直接包含</li></ul><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ul><li>Expression Language表达式语言,简化JSP页面内的Java代码</li><li>功能:获取数据</li><li>语法:${expression} 获取key为expression为键的值</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储到域</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;brands&quot;</span>,brands);</span><br><span class="line"><span class="comment">//转发到jsp</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/Brand.jsp&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><p>jsp接收</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;brands&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>JavaWeb的四大域<br>        1. page:当前页面有效<br>        1. request:当前请求有效<br>        1. session:当前会话有效<br>        1. application:当前应用有效</li></ul><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSP引入JSTL"><a href="#JSP引入JSTL" class="headerlink" title="JSP引入JSTL"></a>JSP引入JSTL</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> width=<span class="string">&quot;800&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;企业名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;排序&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌介绍&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;brands&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;data&quot;</span>&gt;</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;data.status eq 1&#125;&quot;</span>&gt;</span><br><span class="line">            &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.brandName&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.companyName&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.ordered&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.description&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.status&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;修改&lt;/a&gt; &lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习</title>
      <link href="/2022/08/13/Request%E3%80%81Response%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/"/>
      <url>/2022/08/13/Request%E3%80%81Response%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-添加实体类"><a href="#2-添加实体类" class="headerlink" title="2. 添加实体类"></a>2. 添加实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web.pojo;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">private</span> Integer id;</span><br><span class="line">       <span class="keyword">private</span> String username;</span><br><span class="line">       <span class="keyword">private</span> String password;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> id;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.id = id;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> username;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.username = username;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> password;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.password = password;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                   <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><h2 id="3-添加mybatis配置文件"><a href="#3-添加mybatis配置文件" class="headerlink" title="3.添加mybatis配置文件"></a>3.添加mybatis配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.web.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///db1?useSSL=false<span class="symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;979508.a&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.web.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-添加mapper映射文件"><a href="#4-添加mapper映射文件" class="headerlink" title="4. 添加mapper映射文件"></a>4. 添加mapper映射文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zjj.web.mapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-添加mapper接口"><a href="#5-添加mapper接口" class="headerlink" title="5. 添加mapper接口"></a>5. 添加mapper接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.web.pojo.User;</span><br><span class="line"><span class="keyword">import</span> jdk.jfr.Description;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:UserMapper</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web.mapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/13 23:05</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/13 23:19</span></span><br><span class="line"><span class="comment">     * @param [username, password]</span></span><br><span class="line"><span class="comment">     * @ParamType:[java.lang.String, java.lang.String]</span></span><br><span class="line"><span class="comment">     * @Return:com.zjj.web.pojo.User</span></span><br><span class="line"><span class="comment">     * @Description: 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select *from tb_user where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span>String username, <span class="meta">@Param(&quot;password&quot;)</span>String password)</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/14 0:10</span></span><br><span class="line"><span class="comment">     * @param [username]</span></span><br><span class="line"><span class="comment">     * @ParamType:[java.lang.String]</span></span><br><span class="line"><span class="comment">     * @Return:com.zjj.web.pojo.User</span></span><br><span class="line"><span class="comment">     * @Description: 通过用户查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select *from tb_user where username=#&#123;username&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">selectByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/14 0:10</span></span><br><span class="line"><span class="comment">     * @param [username, password]</span></span><br><span class="line"><span class="comment">     * @ParamType:[java.lang.String, java.lang.String]</span></span><br><span class="line"><span class="comment">     * @Return:void</span></span><br><span class="line"><span class="comment">     * @Description: 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tb_user values null,#&#123;username&#125;,#&#123;password&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-添加登陆界面"><a href="#6-添加登陆界面" class="headerlink" title="6. 添加登陆界面"></a>6. 添加登陆界面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/login.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loginDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet01/LoginServlet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;loginMsg&quot;</span>&gt;</span>LOGIN IN<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;subDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login up&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reset&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;register.html&quot;</span>&gt;</span>没有账号？点击注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-添加登陆接口"><a href="#7-添加登陆接口" class="headerlink" title="7.添加登陆接口"></a>7.添加登陆接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web.LoginAndRegister;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.web.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjj.web.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:LoginServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web.LoginAndRegister</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/13 22:56</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.接受用户名密码</span></span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用mybatis查询</span></span><br><span class="line">        <span class="comment">//2.1获取sqlsessionfactory对象</span></span><br><span class="line">        String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        SqlSession sqlSession=<span class="literal">null</span>;</span><br><span class="line">        User user=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.获取sqlsession对象</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">//2.3 获取mapper</span></span><br><span class="line">            <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="comment">//2.4 调用方法</span></span><br><span class="line">            user = mapper.select(username, password);</span><br><span class="line">            <span class="comment">//2.5 关闭资源</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取字符输出流</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="literal">null</span>)&#123;</span><br><span class="line">            writer.write(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            writer.write(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-添加注册页面"><a href="#8-添加注册页面" class="headerlink" title="8. 添加注册页面"></a>8. 添加注册页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/register.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reg-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>已有帐号？<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;reg-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/servlet01/RegisterServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;注 册&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reg_btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-添加注册接口"><a href="#9-添加注册接口" class="headerlink" title="9.添加注册接口"></a>9.添加注册接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.zjj.web.LoginAndRegister;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.web.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjj.web.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Time;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:RegisterServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web.LoginAndRegister</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/13 22:56</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/RegisterServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.接受用户名密码</span></span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//封装用户对象</span></span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        <span class="comment">//2.判断用户是否存在</span></span><br><span class="line">        String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        SqlSession sqlSession=<span class="literal">null</span>;</span><br><span class="line">        User selectUser=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.获取sqlsession对象</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">//2.3 获取mapper</span></span><br><span class="line">            <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="comment">//2.4 调用方法</span></span><br><span class="line">            selectUser = mapper.selectByUsername(username);</span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">            <span class="keyword">if</span> (selectUser==<span class="literal">null</span>)&#123;</span><br><span class="line">                mapper.add(user);</span><br><span class="line">                sqlSession.commit();</span><br><span class="line">                writer.write(<span class="string">&quot;注册成功,即将跳转到登陆界面&quot;</span>);</span><br><span class="line">                resp.setStatus(<span class="number">302</span>);</span><br><span class="line">                resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/servlet01/login.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                writer.write(<span class="string">&quot;用户名已存在失败&quot;</span>);</span><br><span class="line">                resp.setStatus(<span class="number">302</span>);</span><br><span class="line">                resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/servlet01/register.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取字符输出流</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-SqlSessionFactory工具类抽取"><a href="#10-SqlSessionFactory工具类抽取" class="headerlink" title="10.SqlSessionFactory工具类抽取"></a>10.SqlSessionFactory工具类抽取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet</title>
      <link href="/2022/08/12/servlet/"/>
      <url>/2022/08/12/servlet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Servlet快速入门"><a href="#Servlet快速入门" class="headerlink" title="Servlet快速入门"></a>Servlet快速入门</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>1.创建web项目,导入Servlet依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.定义一个类,实现Servlet接口,重写接口中的所有方法,在service方法输出一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在类上使用@WebServlet注解,配置Servlet的访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo01&quot;)</span></span><br><span class="line">ublic <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span></span><br></pre></td></tr></table></figure><p>4.使用Maven Tomcat插件进行调试程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.启动项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/servlet01/demo01</span><br></pre></td></tr></table></figure><p>6.输出成功</p><p><img src="/2022/08/12/servlet/image-20220813111309760.png" alt="image-20220813111309760"></p><h2 id="Servlet执行流程"><a href="#Servlet执行流程" class="headerlink" title="#Servlet执行流程"></a>#Servlet执行流程</h2><blockquote><p><a href="http://localhost:8080访问tomcat服务器">http://localhost:8080访问tomcat服务器</a></p><p>servlet01:tomcat的项目</p><p>demo01:该项目下的类</p></blockquote><p>1.Servlet由web服务器创建调用</p><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ul><li><p>加载实例化:默认情况下,当Servlet第一次被访问时,由容器创建Servlet对象</p></li><li><p>初始化:在Servlet实例化后,容器将调用Servlet的init()方法来初始化这个对象,完成一些如加载配置文件、创建连接等初始化工作,该方法只会被调用一次。</p></li><li><p>请求处理:每次请求servlet时,servlet容器都会调用servlet实例的service()方法对请求进行处理</p></li><li><p>服务终止:当需要释放内存或者容器关闭时,容器会调用servlet实例的destory()方法完成资源的释放,当调用destory()方法调用之后,容器会释放这个servlet实例,该实例会被java的垃圾收集器所回收。</p><p><img src="/2022/08/12/servlet/image-20220813112535935.png" alt="image-20220813112535935"></p></li></ul><p>当服务器终止时</p><p><img src="/2022/08/12/servlet/image-20220813112554350.png" alt="image-20220813112554350"></p><blockquote><p>tips:配置初始化时机 @WebServlet(“&#x2F;demo01”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo01&quot;,loadOnStartup = 1)</span></span><br><span class="line">即不需要调用该类,在容器初始化时就会执行</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2022/08/12/servlet/image-20220813112933845.png" alt="image-20220813112933845"></p><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><ul><li><p>初始化方法,在servlet被创建时执行,只执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span></span><br></pre></td></tr></table></figure></li><li><p>服务方法,每次访问都被调用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span><br></pre></td></tr></table></figure><ul><li>销毁方法,servlet被销毁时,调用该方法,在内存释放或服务器关闭销毁servlet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> destroy</span><br></pre></td></tr></table></figure><ul><li><p>获取ServletConfig对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>获取Servlet信息</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><p><img src="/2022/08/12/servlet/image-20220813114947322.png" alt="image-20220813114947322"></p><blockquote><p>正常B&#x2F;S架构的Web项目,都是针对HTTP协议的,所以自定义的Servlet会继承HttpServlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/servlet/image-20220813115342523.png" alt="image-20220813115342523"></p><p><img src="/2022/08/12/servlet/image-20220813115704507.png" alt="image-20220813115704507"></p><p>如果不适用这个实现类直接使用servlet则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">       String method=request.getMethod();</span><br><span class="line">       <span class="comment">//获取请求方式</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">           doGet(servletRequest,servletResponse);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">           <span class="comment">//post处理</span></span><br><span class="line">           doPost(servletRequest,servletResponse);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继承该类</p><h3 id="Servlet-urlPattern配置"><a href="#Servlet-urlPattern配置" class="headerlink" title="Servlet urlPattern配置"></a>Servlet urlPattern配置</h3><p>1.一个Servlet,配置多个urlPattern</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/demo1&quot;,&quot;/demo2&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>2.urlPattern配置规则</p><ul><li><p>精确匹配</p><ul><li>配置路径:@WebServlet(“&#x2F;usr&#x2F;select”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;user&#x2F;select</li></ul></li><li><p>目录匹配</p><ul><li>配置路径:@WebServlet(“&#x2F;usr&#x2F;*”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;user&#x2F;aaa(bbb)</li></ul></li><li><p>扩展名匹配</p><ul><li>配置路径:@WebServlet(“*.do”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;aaa.do(bbb.do)</li></ul></li><li><p>任意匹配</p><ul><li>配置路径:@WebServlet(“&#x2F;”)(“&#x2F;*”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;hehe(haha)</li></ul><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="Request继承体系"><a href="#Request继承体系" class="headerlink" title="Request继承体系"></a>Request继承体系</h3><blockquote><p>RequestFacade(Tomcat定义的实现类)-&gt;HttpServletRequest(Java提供对http协议封装的请求对象接口)-&gt;ServletRequest(Java提供根接口)</p></blockquote><h3 id="获取请求数据"><a href="#获取请求数据" class="headerlink" title="获取请求数据"></a>获取请求数据</h3><blockquote><p>1.请求行</p><pre><code>    + String getMethod():获取请求方式    + String getContextPath():获取虚拟目录    + StringBuffer getRequestURL:获取url    + String getRquestURI:获取URI    + String getQueryString():获取请求参数</code></pre><p>2.请求头</p><ul><li>String getHeader(String name):</li></ul><p>3.请求体</p><pre><code>+  ServletInputStream getInputStream():获取字节输入流+  BufferReader getReader():获取字符输入流</code></pre></blockquote><h3 id="通用方式获取请求参数"><a href="#通用方式获取请求参数" class="headerlink" title="通用方式获取请求参数"></a>通用方式获取请求参数</h3><p>Map&lt;String,String[]&gt;getParameterMap():获取所有参数的map集合</p><ul><li>String[] getParameterValues(String name):根据名称获取参数值(数组)</li><li>String getParameter(String name):根据名称获取参数值(单值)</li></ul><h3 id="请求参数乱码问题"><a href="#请求参数乱码问题" class="headerlink" title="请求参数乱码问题"></a>请求参数乱码问题</h3><blockquote><p>post乱码.getReader() request.setCharacterEncoding(“UTF-8”)</p><p>get乱码:getQueryString  转换为字符数据 再变成字符串</p><p>url编码 1.每个字符串按照编码方式转为二进制 2.每个字节转为2个16进制数并在前加上%</p></blockquote><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><blockquote><p>服务器内部的资源跳转方式</p><p><img src="/2022/08/12/servlet/image-20220813185044477.png" alt="image-20220813185044477"></p><p>request.getRequestDispatcher(path:).forward(req,res)</p><ul><li>void setAttribute(String name,object o):存储到request域中</li><li>object getAttribute(String name):根据key 获取值</li><li>void removeAttribute(String name):根据key 删除键值对</li></ul></blockquote><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><h3 id="Response继承体系"><a href="#Response继承体系" class="headerlink" title="Response继承体系"></a>Response继承体系</h3><blockquote><p>ResponseFacade(Tomcat定义的实现类)-&gt;HttpServletResponse(Java提供对http协议封装的请求对象接口)-&gt;ServletResponse(Java提供根接口)</p></blockquote></li></ul><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><blockquote><ol><li>响应行:HTTP&#x2F;1.1 200K</li></ol><p>​void setStatis(int sec)设置响应状态码</p><ol start="2"><li>响应头:Content-Type:text&#x2F;html</li></ol><p>​void setHeader(String name,String value):设置响应头键值对</p><ol start="3"><li><p>响应体 <html><head>&lt;\head&gt;</head><body>&lt;\body&gt;&lt;\html&gt;</body></html></p><p>PrintWriter getWriter():获取字符输出流</p><p>ServletOutPutStream getOutputStream():获取字节输出流</p></li></ol></blockquote><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li><p>重定向(Redirect):一种资源跳转方式</p><p><img src="/2022/08/12/servlet/image-20220813184954460.png" alt="image-20220813184954460">+</p></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp.setStatus(<span class="number">302</span>);</span><br><span class="line">resp.setHeader(<span class="string">&quot;localtion&quot;</span>,<span class="string">&quot;source b path&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo01</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1...&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">//2</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/servlet01/resp2&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp2...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/servlet/image-20220813190448366.png" alt="image-20220813190448366"></p><p>也可以使用resp.sendRedirect(“path”);</p><blockquote><p>路径问题:</p><ul><li>浏览器使用:加虚拟目录</li><li>服务端使用:不需要加虚拟目录</li></ul></blockquote></li></ul><h3 id="响应字符数据"><a href="#响应字符数据" class="headerlink" title="响应字符数据"></a>响应字符数据</h3><ul><li><p>使用</p><p>​1.通过Response对象获取字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter()</span><br></pre></td></tr></table></figure><pre><code> 2. 写数据</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.write(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1.获取字符输出流,</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="comment">//设置响应头用html解析</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;h1&gt;aaaa&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>中文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.获取字符输出流,</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="comment">//设置响应头用html解析</span></span><br><span class="line">        writer.write(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;h1&gt;你好&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure></li></ul><h3 id="响应字节数据"><a href="#响应字节数据" class="headerlink" title="响应字节数据"></a>响应字节数据</h3><ul><li><p>使用</p><ol><li><p>通过Response对象来获取字节输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletOutPutStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br></pre></td></tr></table></figure></li><li><p>写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputStream.write(字节数据)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>示例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo04</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.读取文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\Self_code\\java\\servlet\\servlet01\\src\\main\\java\\com\\zjj\\web\\headImg.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取字节输出流</span></span><br><span class="line">        ServletOutputStream os=  resp.getOutputStream();</span><br><span class="line">        <span class="comment">// 3.copu</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学</title>
      <link href="/2022/08/12/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
      <url>/2022/08/12/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2022/08/12/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220812132651401.png" alt="image-20220812132651401"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/"/>
      <url>/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git-分布式版本控制工具"><a href="#Git-分布式版本控制工具" class="headerlink" title="Git 分布式版本控制工具"></a>Git 分布式版本控制工具</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li>Git概述</li><li>Git代码托管服务</li><li>Git常用命令</li><li>在IDEA中使用Git</li></ul><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><h3 id="1-1-什么是Git"><a href="#1-1-什么是Git" class="headerlink" title="1.1 什么是Git"></a>1.1 什么是Git</h3><p>Git是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java类、xml文件、html页面等），在软件开发过程中被广泛使用。</p><p>在IDEA开发工具中可以集成Git（后面会讲解Git安装和集成过程）：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924171926037.png" alt="image-20210924171926037"></p><p>集成后在IDEA中可以看到Git相关图标：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924172028329.png" alt="image-20210924172028329"></p><p>可以通过启动两个IDEA窗口模拟两个开发人员来展示Git的使用：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926080623416.png" alt="image-20210926080623416"></p><p>其他的版本控制工具：</p><ul><li>SVN</li><li>CVS</li><li>VSS</li></ul><h3 id="1-2-使用Git能做什么"><a href="#1-2-使用Git能做什么" class="headerlink" title="1.2 使用Git能做什么"></a>1.2 使用Git能做什么</h3><ul><li>代码回溯：Git在管理文件过程中会记录日志，方便回退到历史版本</li><li>版本切换：Git存在分支的概念，一个项目可以有多个分支（版本），可以任意切换</li><li>多人协作：Git支持多人协作，即一个团队共同开发一个项目，每个团队成员负责一部分代码，通过Git就可以管理和协调</li><li>远程备份：Git通过仓库管理文件，在Git中存在远程仓库，如果本地文件丢失还可以从远程仓库获取</li></ul><h2 id="2-Git概述"><a href="#2-Git概述" class="headerlink" title="2. Git概述"></a>2. Git概述</h2><h3 id="2-1-Git简介"><a href="#2-1-Git简介" class="headerlink" title="2.1 Git简介"></a>2.1 Git简介</h3><p>Git 是一个分布式版本控制工具，通常用来对软件开发过程中的源代码文件进行管理。通过Git 仓库来存储和管理这些文件，Git 仓库分为两种：</p><ul><li>本地仓库：开发人员自己电脑上的 Git 仓库</li><li>远程仓库：远程服务器上的 Git 仓库</li></ul><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924173708313.png" alt="image-20210924173708313" style="zoom: 50%;"><p>解释说明：</p><blockquote><p>commit：提交,将本地文件和版本信息保存到本地仓库</p><p>push：推送,将本地仓库文件和版本信息上传到远程仓库</p><p>pull：拉取,将远程仓库文件和版本信息下载到本地仓库</p></blockquote><h3 id="2-2-Git下载与安装"><a href="#2-2-Git下载与安装" class="headerlink" title="2.2 Git下载与安装"></a>2.2 Git下载与安装</h3><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924174639182.png" alt="image-20210924174639182"></p><p>下载完成后得到安装文件：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924174717172.png" alt="image-20210924174717172"></p><p>直接双击完成安装即可，安装完成后可以在任意目录下点击鼠标右键，如果能够看到如下菜单则说明安装成功：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924174934683.png" alt="image-20210924174934683"></p><p>Git GUI Here：打开Git 图形界面</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924175209242.png" alt="image-20210924175209242"></p><p>Git Bash Here：打开Git 命令行</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924175314485.png" alt="image-20210924175314485"></p><p>Git安装目录结构如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926094227522.png" alt="image-20210926094227522"></p><h2 id="3-Git代码托管服务"><a href="#3-Git代码托管服务" class="headerlink" title="3. Git代码托管服务"></a>3. Git代码托管服务</h2><h3 id="3-1-常用的Git代码托管服务"><a href="#3-1-常用的Git代码托管服务" class="headerlink" title="3.1 常用的Git代码托管服务"></a>3.1 常用的Git代码托管服务</h3><p>Git中存在两种类型的仓库，即<strong>本地仓库</strong>和<strong>远程仓库</strong>。那么我们如何搭建Git<strong>远程仓库</strong>呢？</p><p>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p><table><thead><tr><th>名称</th><th>网址</th><th>说明</th></tr></thead><tbody><tr><td>gitHub</td><td><a href="https://github.com/">https://github.com/</a></td><td>一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub</td></tr><tr><td>码云</td><td><a href="https://gitee.com/">https://gitee.com/</a></td><td>国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快</td></tr><tr><td>GitLab</td><td><a href="https://about.gitlab.com/">https://about.gitlab.com/</a></td><td>一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务</td></tr><tr><td>BitBucket</td><td><a href="https://bitbucket.org/">https://bitbucket.org/</a></td><td>一家源代码托管网站，采用Mercurial和Git作为分布式版本控制系统，同时提供商业计划和免费账户</td></tr></tbody></table><h3 id="3-2-码云代码托管服务"><a href="#3-2-码云代码托管服务" class="headerlink" title="3.2 码云代码托管服务"></a>3.2 码云代码托管服务</h3><p>码云网址：<a href="https://gitee.com/">https://gitee.com/</a></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926082758518.png" alt="image-20210926082758518"></p><p>使用码云的操作流程如下：</p><ol><li>注册码云账号</li><li>登录码云</li><li>创建远程仓库</li><li>邀请其他用户成为仓库成员</li></ol><h4 id="3-2-1-注册码云账号"><a href="#3-2-1-注册码云账号" class="headerlink" title="3.2.1 注册码云账号"></a>3.2.1 注册码云账号</h4><p>注册网址： <a href="https://gitee.com/signup">https://gitee.com/signup</a></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083229013.png" alt="image-20210926083229013"></p><h4 id="3-2-2-登录码云"><a href="#3-2-2-登录码云" class="headerlink" title="3.2.2 登录码云"></a>3.2.2 登录码云</h4><p>注册完成后可以使用刚刚注册的邮箱进行登录（地址： <a href="https://gitee.com/login">https://gitee.com/login</a> ）</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083328306.png" alt="image-20210926083328306"></p><h4 id="3-2-3-创建远程仓库"><a href="#3-2-3-创建远程仓库" class="headerlink" title="3.2.3 创建远程仓库"></a>3.2.3 创建远程仓库</h4><p>登录成功后可以创建远程仓库，操作方式如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083510298.png" alt="image-20210926083510298"></p><p>页面跳转到新建仓库页面：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083629924.png" alt="image-20210926083629924"></p><p>解释说明：</p><blockquote><p>仓库名称：必填，每个仓库都需要有一个名称，同一个码云账号下的仓库名称不能重复</p><p>路径：访问远程仓库时会使用到，一般无需手动指定，和仓库名称自动保持一致</p><p>开源：所有人都可以查看此仓库</p><p>私有：只有此仓库的成员可见，其他人不可见</p></blockquote><p>创建完成后可以查看仓库信息：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926090131032.png" alt="image-20210926090131032"></p><p><strong>注意</strong>：每个Git远程仓库都会对应一个网络地址，点击【克隆&#x2F;下载】按钮，在弹出窗口点击【复制】按钮即可复制网络地址，地址如下：</p><p><a href="https://gitee.com/ChuanZhiBoKe/myGitRepo.git">https://gitee.com/ChuanZhiBoKe/myGitRepo.git</a></p><h4 id="3-2-4-邀请其他用户成为仓库成员"><a href="#3-2-4-邀请其他用户成为仓库成员" class="headerlink" title="3.2.4 邀请其他用户成为仓库成员"></a>3.2.4 邀请其他用户成为仓库成员</h4><p>前面已经在码云上创建了自己的远程仓库，目前仓库成员只有自己一个人（身份为管理员）。在企业实际开发中，一个项目往往是由多个人共同开发完成的，为了使多个参与者都有权限操作远程仓库，就需要邀请其他项目参与者成为当前仓库的成员。</p><p>点击管理按钮进入仓库管理页面，左侧菜单中可以看到【仓库成员管理】：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926090608272.png" alt="image-20210926090608272"></p><p>点击【开发者】菜单，跳转到如下页面：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926091027151.png" alt="image-20210926091027151"></p><p>点击【添加仓库成员】菜单下的【邀请用户】菜单，跳转到如下页面：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926091204422.png" alt="image-20210926091204422"></p><p>可以看到邀请用户有多种方式：链接邀请、直接添加、通过仓库邀请成员</p><p><strong>注意</strong>：被邀请用户必须为码云的注册用户，否则无法成为仓库成员</p><h2 id="4-Git常用命令"><a href="#4-Git常用命令" class="headerlink" title="4. Git常用命令"></a>4. Git常用命令</h2><h3 id="4-1-Git全局设置"><a href="#4-1-Git全局设置" class="headerlink" title="4.1 Git全局设置"></a>4.1 Git全局设置</h3><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息。在Git 命令行中执行下面命令：</p><p><strong>设置用户信息</strong> </p><p>  git config –global user.name “itcast”</p><p>  git config –global user.email “<a href="mailto:&#x68;&#101;&#108;&#108;&#x6f;&#x40;&#x69;&#116;&#x63;&#x61;&#115;&#x74;&#46;&#99;&#x6e;">&#x68;&#101;&#108;&#108;&#x6f;&#x40;&#x69;&#116;&#x63;&#x61;&#115;&#x74;&#46;&#99;&#x6e;</a>“</p><p><strong>查看配置信息</strong></p><p>  git config –list</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926092820321.png" alt="image-20210926092820321"></p><p>注意：上面设置的user.name和user.email并不是我们在注册码云账号时使用的用户名和邮箱，此处可以任意设置。</p><h3 id="4-2-获取Git仓库"><a href="#4-2-获取Git仓库" class="headerlink" title="4.2 获取Git仓库"></a>4.2 获取Git仓库</h3><p>要使用Git对我们的代码进行管理，首先需要获得Git仓库。</p><p>获取Git仓库通常有两种方式：</p><ul><li>在本地初始化Git仓库（不常用）</li><li>从远程仓库克隆（常用）</li></ul><h4 id="4-2-1-在本地初始化Git仓库"><a href="#4-2-1-在本地初始化Git仓库" class="headerlink" title="4.2.1 在本地初始化Git仓库"></a>4.2.1 在本地初始化Git仓库</h4><p><strong>操作步骤如下</strong>：</p><ol><li>在任意目录下创建一个空目录（例如repo1）作为我们的本地Git仓库</li><li>进入这个目录中，点击右键打开Git bash窗口</li><li>执行命令<strong>git</strong> <strong>init</strong></li></ol><p>如果在当前目录中看到.git文件夹（此文件夹为隐藏文件夹）则说明Git仓库创建成功</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926093721515.png" alt="image-20210926093721515"></p><h4 id="4-2-2-从远程仓库克隆"><a href="#4-2-2-从远程仓库克隆" class="headerlink" title="4.2.2 从远程仓库克隆"></a>4.2.2 从远程仓库克隆</h4><p>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><p><strong>命令格式</strong>：git clone 远程仓库地址</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926094404332.png" alt="image-20210926094404332"></p><h3 id="4-3-工作区、暂存区、版本库"><a href="#4-3-工作区、暂存区、版本库" class="headerlink" title="4.3 工作区、暂存区、版本库"></a>4.3 工作区、暂存区、版本库</h3><p>为了更好的学习Git，我们需要了解Git相关的一些概念，这些概念在后面的学习中会经常提到。</p><p><strong>版本库</strong>：前面看到的.git隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</p><p><strong>工作区</strong>：包含.git文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</p><p><strong>暂存区</strong>：.git文件夹中有很多文件，其中有一个index文件就是暂存区，也可以叫做stage。暂存区是一个临时保存修改文件的地方</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926094831386.png" alt="image-20210926094831386"></p><h3 id="4-4-Git工作区中文件的状态"><a href="#4-4-Git工作区中文件的状态" class="headerlink" title="4.4 Git工作区中文件的状态"></a>4.4 Git工作区中文件的状态</h3><p>Git工作区中的文件存在两种状态：</p><ul><li><p>untracked 未跟踪（未被纳入版本控制）</p></li><li><p>tracked 已跟踪（被纳入版本控制）</p><p>​     1）Unmodified 未修改状态</p><p>​     2）Modified 已修改状态</p><p>​     3）Staged 已暂存状态</p></li></ul><p><strong>注意</strong>：文件的状态会随着我们执行Git的命令发生变化</p><h3 id="4-5-本地仓库操作"><a href="#4-5-本地仓库操作" class="headerlink" title="4.5 本地仓库操作"></a>4.5 本地仓库操作</h3><p>本地仓库常用命令如下：</p><ul><li>git status 查看文件状态</li><li>git add 将文件的修改加入暂存区</li><li>git reset 将暂存区的文件取消暂存或者是切换到指定版本</li><li>git commit 将暂存区的文件修改提交到版本库</li><li>git log  查看日志</li></ul><h4 id="4-5-1-git-status"><a href="#4-5-1-git-status" class="headerlink" title="4.5.1 git status"></a>4.5.1 git status</h4><p>git status 命令用于查看文件状态</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926095623297.png" alt="image-20210926095623297"></p><p>注意：由于工作区中文件状态的不同，执行 git status 命令后的输出也会不同</p><h4 id="4-5-2-git-add"><a href="#4-5-2-git-add" class="headerlink" title="4.5.2 git add"></a>4.5.2 git add</h4><p>git add 命令的作用是将文件的修改加入暂存区，命令格式：git add fileName</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926100003056.png" alt="image-20210926100003056"></p><p>加入暂存区后再执行 git status 命令，可以发现文件的状态已经发生变化。</p><h4 id="4-5-3-git-reset"><a href="#4-5-3-git-reset" class="headerlink" title="4.5.3 git reset"></a>4.5.3 git reset</h4><p>git reset 命令的作用是将暂存区的文件<strong>取消暂存</strong>或者是<strong>切换到指定版本</strong></p><p>取消暂存命令格式：git reset 文件名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926101346514.png" alt="image-20210926101346514"></p><p>切换到指定版本命令格式：git reset –hard 版本号</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926101401721.png" alt="image-20210926101401721"></p><p>注意：每次Git提交都会产生新的版本号，通过版本号就可以回到历史版本</p><h4 id="4-5-4-git-commit"><a href="#4-5-4-git-commit" class="headerlink" title="4.5.4 git commit"></a>4.5.4 git commit</h4><p>git commit 命令的作用是将暂存区的文件修改提交到版本库，命令格式：git commit -m msg 文件名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926101859601.png" alt="image-20210926101859601"></p><p>解释说明：</p><blockquote><p>-m：代表message，每次提交时需要设置，会记录到日志中</p><p>可以使用通配符*一次提交多个文件</p></blockquote><h4 id="4-5-5-git-log"><a href="#4-5-5-git-log" class="headerlink" title="4.5.5 git log"></a>4.5.5 git log</h4><p>git log 命令的作用是查看提交日志</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926102305539.png" alt="image-20210926102305539"></p><p>通过git log命令查看日志，可以发现每次提交都会产生一个版本号，提交时设置的message、提交人、邮箱、提交时间等信息都会记录到日志中</p><h3 id="4-6-远程仓库操作"><a href="#4-6-远程仓库操作" class="headerlink" title="4.6 远程仓库操作"></a>4.6 远程仓库操作</h3><p>前面执行的命令操作都是针对的本地仓库，本节我们会学习关于远程仓库的一些操作，具体包括：</p><ul><li>git remote  查看远程仓库</li><li>git remote add 添加远程仓库</li><li>git clone 从远程仓库克隆</li><li>git pull 从远程仓库拉取</li><li>git push 推送到远程仓库</li></ul><h4 id="4-6-1-git-remote"><a href="#4-6-1-git-remote" class="headerlink" title="4.6.1 git remote"></a>4.6.1 git remote</h4><p>如果要查看已经配置的远程仓库服务器，可以执行 git remote 命令，它会列出每一个远程服务器的简称。</p><p>如果已经克隆了远程仓库，那么至少应该能看到 origin ，这是 Git 克隆的仓库服务器的默认名字。</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926103746721.png" alt="image-20210926103746721"></p><p>解释说明：</p><blockquote><p>可以通过-v参数查看远程仓库更加详细的信息</p><p>本地仓库配置的远程仓库都需要一个简称，后续在和远程仓库交互时会使用到这个简称</p></blockquote><h4 id="4-6-2-git-remote-add"><a href="#4-6-2-git-remote-add" class="headerlink" title="4.6.2 git remote add"></a>4.6.2 git remote add</h4><p>添加远程仓库命令格式：git remote add 简称 远程仓库地址</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926104723901.png" alt="image-20210926104723901"></p><p>注意：一个本地仓库可以关联多个远程仓库</p><h4 id="4-6-3-git-clone"><a href="#4-6-3-git-clone" class="headerlink" title="4.6.3 git clone"></a>4.6.3 git clone</h4><p>如果你想获得一份已经存在了的 Git 远程仓库的拷贝，这时就要用到 git clone 命令。 Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等）。</p><p>克隆仓库的命令格式： git clone 远程仓库地址</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926105017148.png" alt="image-20210926105017148"></p><h4 id="4-6-4-git-push"><a href="#4-6-4-git-push" class="headerlink" title="4.6.4 git push"></a>4.6.4 git push</h4><p>将本地仓库内容推送到远程仓库，命令格式：git push 远程仓库简称 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926105413681.png" alt="image-20210926105413681"></p><p>在使用git push命令将本地文件推送至码云远程仓库时，如果是第一次操作，需要进行身份认证，认证通过才可以推送，如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926105913504.png" alt="image-20210926105913504"></p><p>注意：上面的用户名和密码对应的就是我们在码云上注册的用户名和密码，认证通过后会将用户名和密码保存到windows系统中（如下图），后续再推送则无需重复输入用户名和密码。</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926110810630.png" alt="image-20210926110810630"></p><p>推送完成后可以到远程仓库中查看文件的变化。</p><p>解释说明：</p><blockquote><p>一个仓库可以有多个分支，默认情况下在创建仓库后会自动创建一个master分支</p><p>后面会讲解分支相关的操作</p></blockquote><h4 id="4-6-5-git-pull"><a href="#4-6-5-git-pull" class="headerlink" title="4.6.5 git pull"></a>4.6.5 git pull</h4><p><strong>git</strong> <strong>pull</strong> 命令的作用是从远程仓库获取最新版本并合并到本地仓库</p><p>命令格式：git pull 远程仓库简称 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926111013002.png" alt="image-20210926111013002"></p><p><strong>注意</strong>：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ）</p><p>解决此问题可以在git pull命令后加入参数–allow-unrelated-histories</p><h3 id="4-7-分支操作"><a href="#4-7-分支操作" class="headerlink" title="4.7 分支操作"></a>4.7 分支操作</h3><p>分支是Git 使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</p><p>本地仓库和远程仓库中都有分支，同一个仓库可以有多个分支，各个分支相互独立，互不干扰。</p><p>通过git init 命令创建本地仓库时默认会创建一个master分支。</p><p>本节我们会学习关于分支的相关命令，具体命令如下：</p><ul><li>git branch                                     查看分支</li><li>git branch [name]                       创建分支</li><li>git checkout [name]                    切换分支</li><li>git push [shortName] [name]   推送至远程仓库分支</li><li>git merge [name]                        合并分支</li></ul><h4 id="4-7-1-查看分支"><a href="#4-7-1-查看分支" class="headerlink" title="4.7.1 查看分支"></a>4.7.1 查看分支</h4><p>查看分支命令：git branch</p><p>git branch 列出所有本地分支</p><p>git branch -r 列出所有远程分支</p><p>git branch -a 列出所有本地分支和远程分支</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926124843275.png" alt="image-20210926124843275"></p><h4 id="4-7-2-创建分支"><a href="#4-7-2-创建分支" class="headerlink" title="4.7.2 创建分支"></a>4.7.2 创建分支</h4><p>创建分支命令格式：git branch 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125053711.png" alt="image-20210926125053711"></p><h4 id="4-7-3-切换分支"><a href="#4-7-3-切换分支" class="headerlink" title="4.7.3 切换分支"></a>4.7.3 切换分支</h4><p>一个仓库中可以有多个分支，切换分支命令格式：git checkout 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125259155.png" alt="image-20210926125259155"></p><p>注意：在命令行中会显示出当前所在分支，如上图所示。</p><h4 id="4-7-4-推送至远程仓库分支"><a href="#4-7-4-推送至远程仓库分支" class="headerlink" title="4.7.4 推送至远程仓库分支"></a>4.7.4 推送至远程仓库分支</h4><p>推送至远程仓库分支命令格式：git push 远程仓库简称 分支命令</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125628894.png" alt="image-20210926125628894"></p><p>推送完成后可以查看远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125810878.png" alt="image-20210926125810878"></p><h4 id="4-7-5-合并分支"><a href="#4-7-5-合并分支" class="headerlink" title="4.7.5 合并分支"></a>4.7.5 合并分支</h4><p>合并分支就是将两个分支的文件进行合并处理，命令格式：git merge 分支命令</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926130213015.png" alt="image-20210926130213015"></p><p>注意：分支合并时需注意合并的方向，如上图所示，在Master分支执行操作，结果就是将b3分支合并到Master分支。</p><h3 id="4-8-标签操作"><a href="#4-8-标签操作" class="headerlink" title="4.8 标签操作"></a>4.8 标签操作</h3><p>Git 中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。</p><p>比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 、v1.2等）。下面是mybatis-plus的标签：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926130452557.png" alt="image-20210926130452557"></p><p>在本节中，我们将学习如下和标签相关的命令：</p><ul><li>git tag                                                查看标签</li><li>git tag [name]                                  创建标签</li><li>git push [shortName] [name]       将标签推送至远程仓库</li><li>git checkout -b [branch] [name]   检出标签</li></ul><h4 id="4-8-1-查看标签"><a href="#4-8-1-查看标签" class="headerlink" title="4.8.1 查看标签"></a>4.8.1 查看标签</h4><p>查看标签命令：git tag</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926151333473.png" alt="image-20210926151333473"></p><h4 id="4-8-2-创建标签"><a href="#4-8-2-创建标签" class="headerlink" title="4.8.2 创建标签"></a>4.8.2 创建标签</h4><p>创建标签命令：git tag 标签名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926151452581.png" alt="image-20210926151452581"></p><h4 id="4-8-3-将标签推送至远程仓库"><a href="#4-8-3-将标签推送至远程仓库" class="headerlink" title="4.8.3 将标签推送至远程仓库"></a>4.8.3 将标签推送至远程仓库</h4><p>将标签推送至远程仓库命令：git push 远程仓库简称 标签名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926151621286.png" alt="image-20210926151621286"></p><p>推送完成后可以在远程仓库中查看标签。</p><h4 id="4-8-4-检出标签"><a href="#4-8-4-检出标签" class="headerlink" title="4.8.4 检出标签"></a>4.8.4 检出标签</h4><p>检出标签时需要新建一个分支来指向某个标签，检出标签的命令格式：git checkout -b 分支名 标签名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926152111514.png" alt="image-20210926152111514"></p><h2 id="5-在IDEA中使用Git"><a href="#5-在IDEA中使用Git" class="headerlink" title="5. 在IDEA中使用Git"></a>5. 在IDEA中使用Git</h2><p>通过Git命令可以完成Git相关操作，为了简化操作过程，我们可以在IEDA中配置Git，配置好后就可以在IDEA中通过图形化的方式来操作Git。</p><h3 id="5-1-在IDEA中配置Git"><a href="#5-1-在IDEA中配置Git" class="headerlink" title="5.1 在IDEA中配置Git"></a>5.1 在IDEA中配置Git</h3><p>在IDEA中使用Git，本质上还是使用的本地安装的Git软件，所以需要提前安装好Git并在IDEA中配置Git。</p><p>Git安装目录：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926152847948.png" alt="image-20210926152847948"></p><p>解释说明：</p><blockquote><p>git.exe：Git安装目录下的可执行文件，前面执行的git命令，其实就是执行的这个文件</p></blockquote><p>IDEA中的配置：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926152950420.png" alt="image-20210926152950420"></p><p>说明：如果Git安装在默认目录中（C:\Program Files\Git），则IDEA中无需再手动配置，直接就可以使用。</p><h3 id="5-2-获取Git仓库"><a href="#5-2-获取Git仓库" class="headerlink" title="5.2 获取Git仓库"></a>5.2 获取Git仓库</h3><p>在IDEA中获取Git仓库有两种方式：</p><ul><li>本地初始化仓库，本质就是执行 git init 命令</li><li>从远程仓库克隆，本质就是执行 git clone 命令</li></ul><h4 id="5-2-1-本地初始化仓库"><a href="#5-2-1-本地初始化仓库" class="headerlink" title="5.2.1 本地初始化仓库"></a>5.2.1 本地初始化仓库</h4><p>在IDEA中通过如下操作可以在本地初始化一个本地仓库，其实底层就是执行的 git init 命令。操作过程如下：</p><p>1）依次选择菜单【VCS】—【Import into Version Control】—【Create Git Repository】</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926153806414.png" alt="image-20210926153806414"></p><p>2）在弹出的【Create Git Repository】对话框中选择当前项目根目录，点击【OK】按钮：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926154201744.png" alt="image-20210926154201744"></p><p>操作完成后可以看到当前项目根目录下出现了.git隐藏目录：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926154757082.png" alt="image-20210926154757082"></p><p>操作完成后可以在IDEA的工具栏中看到Git的相关操作图标：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926154933876.png" alt="image-20210926154933876"></p><h4 id="5-2-2-从远程仓库克隆"><a href="#5-2-2-从远程仓库克隆" class="headerlink" title="5.2.2 从远程仓库克隆"></a>5.2.2 从远程仓库克隆</h4><p>在IDEA中从远程仓库克隆本质就是执行的 git clone 命令，具体操作过程如下：</p><p>1）在IDEA开始窗口中点击【Get from Version Control】</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926155434202.png" alt="image-20210926155434202"></p><p>2）在弹出的【Get from Version Control】窗口中输入远程仓库的URL地址和对应的本地仓库存放目录，点击【Clone】按钮进行仓库克隆操作</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926155750107.png" alt="image-20210926155750107"></p><h3 id="5-3-Git忽略文件"><a href="#5-3-Git忽略文件" class="headerlink" title="5.3 Git忽略文件"></a>5.3 Git忽略文件</h3><p>在Git工作区中有一个特殊的文件 .gitignore，通过此文件可以指定工作区中的哪些文件不需要Git管理。我们在码云上创建Git远程仓库时可以指定生成此文件，如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926161050169.png" alt="image-20210926161050169"></p><p>创建完成后效果如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926161233052.png" alt="image-20210926161233052"></p><p>解释说明：</p><blockquote><p>1）我们在使用Git管理项目代码时，并不是所有文件都需要Git管理，例如Java项目中编译的.class文件、开发工具自带的配置文件等，这些文件没有必要交给Git管理，所以也就不需要提交到Git版本库中</p><p>2）注意忽略文件的名称是固定的，不能修改</p><p>3）添加到忽略列表中的文件后续Git工具就会忽略它</p></blockquote><p>一个参考的.gitignore文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">logs</span><br><span class="line">rebel.xml</span><br><span class="line">target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line">log.path_IS_UNDEFINED</span><br><span class="line">.DS_Store</span><br><span class="line">offline_user.md</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br></pre></td></tr></table></figure><h3 id="5-4-本地仓库操作"><a href="#5-4-本地仓库操作" class="headerlink" title="5.4 本地仓库操作"></a>5.4 本地仓库操作</h3><p>本地仓库操作：</p><ul><li>将文件加入暂存区，本质就是执行 git add 命令</li><li>将暂存区的文件提交到版本库，本质就是执行 git commit 命令</li><li>查看日志，本质就是执行 git log 命令</li></ul><h4 id="5-4-1-将文件加入暂存区"><a href="#5-4-1-将文件加入暂存区" class="headerlink" title="5.4.1 将文件加入暂存区"></a>5.4.1 将文件加入暂存区</h4><p>当在Git工作区新增文件或者对已有文件修改后，就需要将文件的修改加入暂存区，具体操作如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926162515597.png" alt="image-20210926162515597"></p><h4 id="5-4-2-将暂存区文件提交到版本库"><a href="#5-4-2-将暂存区文件提交到版本库" class="headerlink" title="5.4.2 将暂存区文件提交到版本库"></a>5.4.2 将暂存区文件提交到版本库</h4><p>将暂存区文件提交到版本库，可以选择一个文件进行提交，也可以选择整个项目提交多个文件。在IEDA中对文件的提交进行了简化操作，也就是如果文件修改后，无需再加入暂存区，可以直接提交。</p><p>1）提交一个文件：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926162809740.png" alt="image-20210926162809740"></p><p>可以看到，如果选中一个文件提交，则菜单名称为【Commit File…】</p><p>2）提交多个文件：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926162843891.png" alt="image-20210926162843891"></p><p>可以看到，如果提交多个文件，则菜单名称为【Commit Directory…】</p><p>由于提交操作属于高频操作，所以为了进一步方便操作，在IDEA的工具栏中提供了提交操作的快捷按钮：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926163535277.png" alt="image-20210926163535277"></p><h4 id="5-4-3-查看日志"><a href="#5-4-3-查看日志" class="headerlink" title="5.4.3 查看日志"></a>5.4.3 查看日志</h4><p>查看日志，既可以查看整个仓库的提交日志，也可以查看某个文件的提交日志。</p><p>1）查看整个项目的提交日志：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926163902184.png" alt="image-20210926163902184"></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926164138430.png" alt="image-20210926164138430"></p><p>2）查看某个文件的提交日志</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926164210056.png" alt="image-20210926164210056"></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926164233935.png" alt="image-20210926164233935"></p><h3 id="5-5-远程仓库操作"><a href="#5-5-远程仓库操作" class="headerlink" title="5.5 远程仓库操作"></a>5.5 远程仓库操作</h3><p>远程仓库操作：</p><ul><li>查看远程仓库，本质就是执行 git remote 命令</li><li>添加远程仓库，本质就是执行 git remote add 命令</li><li>推送至远程仓库，本质就是执行 git push 命令</li><li>从远程仓库拉取，本质就是执行 git pull 命令</li></ul><h4 id="5-5-1-查看远程仓库"><a href="#5-5-1-查看远程仓库" class="headerlink" title="5.5.1 查看远程仓库"></a>5.5.1 查看远程仓库</h4><p>操作过程如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926165935756.png" alt="image-20210926165935756"></p><p>在弹出的【Git Remotes】窗口中可以看到配置的远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926170143160.png" alt="image-20210926170143160"></p><h4 id="5-5-2-添加远程仓库"><a href="#5-5-2-添加远程仓库" class="headerlink" title="5.5.2 添加远程仓库"></a>5.5.2 添加远程仓库</h4><p>一个本地仓库可以配置多个远程仓库，在【Git Remotes】窗口中点击【+】来添加一个新的远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926170653126.png" alt="image-20210926170653126"></p><h4 id="5-5-3-推送至远程仓库"><a href="#5-5-3-推送至远程仓库" class="headerlink" title="5.5.3 推送至远程仓库"></a>5.5.3 推送至远程仓库</h4><p>可以通过如下操作将本地仓库文件推送至远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926170908769.png" alt="image-20210926170908769"></p><p>在弹出的【Push Commits】窗口中可以看到本次推送的文件，点击【Push】按钮即可推送至远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171058705.png" alt="image-20210926171058705"></p><p>由于推送至远程仓库操作属于高频操作，所以可以通过IDEA工具栏中的提交快捷按钮同时完成提交和推送：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171408649.png" alt="image-20210926171408649"></p><p>点击【Commit and Push…】按钮同时完成提交和推送操作</p><h4 id="5-5-4-从远程仓库拉取"><a href="#5-5-4-从远程仓库拉取" class="headerlink" title="5.5.4 从远程仓库拉取"></a>5.5.4 从远程仓库拉取</h4><p>可以通过如下操作从远程仓库拉取：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171646041.png" alt="image-20210926171646041"></p><p>由于从远程仓库拉取文件属于高频操作，所以在IDEA的工具栏中提供了对应的快捷按钮：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171919288.png" alt="image-20210926171919288"></p><p>在弹出的【Update Project】窗口中点击【OK】：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171950911.png" alt="image-20210926171950911"></p><h3 id="5-6-分支操作"><a href="#5-6-分支操作" class="headerlink" title="5.6 分支操作"></a>5.6 分支操作</h3><p>分支操作：</p><ul><li>查看分支，本质就是执行 git branch 命令</li><li>创建分支，本质就是执行 git branch 分支名 命令</li><li>切换分支，本质就是执行 git checkout 命令</li><li>将分支推送到远程仓库，本质就是执行 git push 命令</li><li>合并分支，本质就是执行 git merge 命令</li></ul><h4 id="5-6-1-查看分支"><a href="#5-6-1-查看分支" class="headerlink" title="5.6.1 查看分支"></a>5.6.1 查看分支</h4><p>可以通过如下操作查看分支：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926172752562.png" alt="image-20210926172752562"></p><p>在弹出的窗口中可以看到本地分支和远程分支：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926172903493.png" alt="image-20210926172903493"></p><p>由于分支操作属于高频操作，所以在IDEA的状态栏中提供了分支操作的快捷按钮：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926173622605.png" alt="image-20210926173622605"></p><p>点击【master】快捷按钮即可弹出【Git Branches】分支窗口：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926173744979.png" alt="image-20210926173744979"></p><h4 id="5-6-2-创建分支"><a href="#5-6-2-创建分支" class="headerlink" title="5.6.2 创建分支"></a>5.6.2 创建分支</h4><p>在【Git Branches】分支窗口中点击【New Branch】，弹出如下窗口：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926173903894.png" alt="image-20210926173903894"></p><p>在弹出的【Create New Branch】窗口中输入新分支的名称，点击【Create】按钮完成分支创建</p><h4 id="5-6-3-切换分支"><a href="#5-6-3-切换分支" class="headerlink" title="5.6.3 切换分支"></a>5.6.3 切换分支</h4><p>通过如下操作可以切换分支：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926174358500.png" alt="image-20210926174358500"></p><h4 id="5-6-4-将分支推送到远程仓库"><a href="#5-6-4-将分支推送到远程仓库" class="headerlink" title="5.6.4 将分支推送到远程仓库"></a>5.6.4 将分支推送到远程仓库</h4><p>通过如下操作可以将分支推送到远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926175004502.png" alt="image-20210926175004502"></p><h4 id="5-6-5-合并分支"><a href="#5-6-5-合并分支" class="headerlink" title="5.6.5 合并分支"></a>5.6.5 合并分支</h4><p>通过下面操作可以进行分支的合并：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926175216197.png" alt="image-20210926175216197"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/08/11/Mybatis/"/>
      <url>/2022/08/11/Mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用maven环境导入jar包"><a href="#使用maven环境导入jar包" class="headerlink" title="使用maven环境导入jar包"></a>使用maven环境导入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;config.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.mybatis.mappers&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><blockquote><p>可以在这里直接配置数据库信息</p></blockquote><blockquote><p>也可以使用properties文件来动态修改 xml文件中导入<properties resource="config.properties"></properties></p></blockquote><p>这两个文件都是放在resource的根目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://121.41.39.152:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">979508.a </span></span><br></pre></td></tr></table></figure><h3 id="TypeAliases-类型别名"><a href="#TypeAliases-类型别名" class="headerlink" title="TypeAliases(类型别名)"></a>TypeAliases(类型别名)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;package name=&quot;domain.blog&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br><span class="line">自动搜索该包下的类</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++基础</title>
      <link href="/2022/08/11/cpp%E5%85%A5%E9%97%A8/"/>
      <url>/2022/08/11/cpp%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="cpp入门"><a href="#cpp入门" class="headerlink" title="cpp入门"></a>cpp入门</h2><h3 id="输出函数cout-lt-lt"><a href="#输出函数cout-lt-lt" class="headerlink" title="输出函数cout&lt;&lt;"></a>输出函数cout&lt;&lt;</h3><p>使用&lt;&lt;进行拼接</p><h3 id="输入函数-cin-gt-gt"><a href="#输入函数-cin-gt-gt" class="headerlink" title="输入函数 cin&gt;&gt;"></a>输入函数 cin&gt;&gt;</h3>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2022/08/11/java/"/>
      <url>/2022/08/11/java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><h4 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h4><blockquote><ul><li><p>ASII(American Standard Code for information Interchange 美国信息交换标准代码):包括数字,英文,括号</p></li><li><p>ASCII使用一个字节存储一个字符,一个字节为8位</p></li></ul></blockquote><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><blockquote><ul><li>windows中文系统默认,兼容ASCII码,包含汉字,繁体字和日韩文字</li><li>GBK为中国的码表,一个中文以两个字节的形式存储,不包括所有</li></ul></blockquote><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><blockquote><ul><li>unicode(统一码):计算机科学领域的一项业界字符编码标准</li><li>变种UTF-8</li><li>UTF-8一个中文三个字节</li><li>编码前与编码后的字符集需要保持一致</li></ul></blockquote><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><blockquote><ul><li>字节输入流:以内存为基准,来自磁盘或网络钟的数据以<code>字节形式读取到内存中</code>去的流称为字节输入流</li><li>字节输出流:以内存为基准,来自磁盘或网络钟的数据以<code>字节形式写到到内存中</code>去的流称为字节输出流</li><li>字符输入流:以内存为基准,以内存为基准,来自磁盘或网络钟的数据以<code>字符形式读取到内存中</code>去的流称为字符输入流</li><li>字节输出流:以内存为基准,来自磁盘或网络钟的数据以<code>字符形式写到到内存中</code>去的流称为字符输出流</li></ul></blockquote><h3 id="IO流体系"><a href="#IO流体系" class="headerlink" title="IO流体系"></a>IO流体系</h3><blockquote><ul><li>字节流<ul><li>InputStream<br>        + FileInputSream</li><li>OutputStream<ul><li>FileOutPutStream</li></ul></li></ul></li><li>字符流<ul><li>Reader<ul><li>FileReader</li></ul></li><li>Writer<ul><li>FileWriter</li></ul></li></ul></li></ul></blockquote><p><img src="/2022/08/11/java/image-20220801223143604.png" alt="image-20220801223143604"></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="1-继承Thread类创建线程类"><a href="#1-继承Thread类创建线程类" class="headerlink" title="1.继承Thread类创建线程类"></a>1.继承Thread类创建线程类</h3><ul><li>定义Thread类的子类,重写该类的run()方法,run()方法的方法体代表了线程需要完成的任务</li><li>创建Thread类的实例,即创建了线程对象</li><li>调用线程对象的start()方法来启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 重写run()方法,run()方法的方法体就是线程执行体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">              <span class="comment">//继承thread类使用this获取当前线程</span></span><br><span class="line">              <span class="comment">//thread的getname返回当前线程的名字</span></span><br><span class="line">              <span class="comment">//调用getname返回线程名</span></span><br><span class="line">            System.out.println(getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 调用Thread的currentThread()方法获取当前线程</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)&#123;</span><br><span class="line">                <span class="comment">// 启动第一个线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadTest</span>().start();</span><br><span class="line">                <span class="comment">// 启动第二个线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadTest</span>().start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>Thread.currentThread(),currentThread()是Thread类的静态方法,该方法返回当前正在执行的线程对象</li><li>getName() 该方法是Thread类的实例方法,该方法返回调用该方法的线程的名字</li></ul></blockquote><h3 id="2-实现Runnable接口创建线程类"><a href="#2-实现Runnable接口创建线程类" class="headerlink" title="2.实现Runnable接口创建线程类"></a>2.实现Runnable接口创建线程类</h3><ul><li>定义Runnable接口的实现类,重写该接口的run方法,该run方法体同样是该线程的线程执行体</li><li>创建Runnable实现类的实例,并以此示例作为Thread的targe来创建Thread对象,该Thread对象为真正的线程对象</li><li>调用线程对象的start()方法来启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableTest</span>  <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> i;</span><br><span class="line">    \\ run方法同样是线程执行体</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;  i&lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//只能用thread.currentThread方法获取</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="type">RunnableTest</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableTest</span>();</span><br><span class="line">                <span class="comment">// 通过new Thread(target, name)方法创建新线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用Callable和Future方法创建线程"><a href="#3-使用Callable和Future方法创建线程" class="headerlink" title="3.使用Callable和Future方法创建线程"></a>3.使用Callable和Future方法创建线程</h3><blockquote><ul><li>call方法可以有返回值</li><li>call方法可以声明抛出异常</li></ul><p>Futrre接口代表Callable接口里call方法的返回值</p><ul><li>boolean cancel(boolean mayInteruptIfRunning): 试图取消该Furue里关联的Callable任务</li><li>V get()返回callable任务里call方法的返回值,调用该方法会导致程序阻塞,必须等到子线程结束后才会得到返回值</li><li>V get(long timeout,TimeUnit unit)返回Callable任务里call方法的返回值,该方法让程序最多阻塞timeout和unit指定的时间,如果过了指定时间callable人物依然没有返回值 将抛出TimeoutException异常</li><li>boolean isCancelled()如果Callable任务正常完成前被取消则返回true</li><li>bollean isDone如果callable已完成则返回True</li></ul></blockquote><ul><li>创建Callable接口的实现类,实现call方法,call方法为线程执行体,且call有返回值,再创建Callable实现类的实例</li><li>使用TutureTask类来包装Callable对象,该FutureTask对象封装了该Callable对象的call方法的返回值</li><li>使用FutureTask对象作为Thread对象的target创建并启动线程</li><li>使用FutureTask对象的get方法来获得子线程执行结束后的返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        \\ 创建callable对象</span><br><span class="line">        ThirdThread rt=<span class="keyword">new</span> <span class="title class_">ThirdThread</span>();</span><br><span class="line">        \\ 先使用Lambda表达式创建Callable&lt;Integer&gt;对象</span><br><span class="line">        \\ 使用FutureTask来包装Callable对象</span><br><span class="line">        FutureTask&lt;Integer&gt; task=<span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;((Callable&lt;Integer&gt;)()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 的循环变量i的值 &quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// call方法可以有返回值</span></span><br><span class="line">           <span class="keyword">return</span> i;</span><br><span class="line">        &#125; );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 的循环变量i的值: &quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)&#123;</span><br><span class="line">                <span class="comment">// 实质还是以Callable对象来创建并启动线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(task,<span class="string">&quot;有返回值的线程&quot;</span>).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取线程返回值</span></span><br><span class="line">            System.out.println(<span class="string">&quot;子线程的返回值： &quot;</span>+task.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><ul><li><p>新建:使用new关键字创建了一个线程之后,该线程就处于新建状态,虚拟机分配内存,吃实话成员变量的值</p></li><li><p>就绪:对象调用start方法后该线程处于就绪状态,虚拟机为其创建方法调用栈和程序计数器,这个状态还没有运行只是可以运行,什么时候运行取决于线程调度器</p><blockquote><p>启动线程只能使用start方法不能使用run方法 只能对处于新建状态的线程调用start方法否则会抛出异常</p></blockquote></li><li><p>运行:开始执行run方法的线程执行体</p></li><li><p>阻塞: 发生以下情况</p><blockquote><ul><li>线程调用sleep方法主动放弃所占用饿处理器资源</li><li>线程调用了一个阻塞式IO方法,在该方法峰会之前,线程会被阻塞</li><li>线程试图获得一个同步监视器</li><li>线程在等待某个通知</li><li>程序调用了线程的suspend方法将线程挂起()容易引起死锁</li></ul></blockquote><p>当正在执行的线程进入了阻塞状态,其他线程就可以获得执行的机会,阻塞的线程会重新进入就绪状态,阻塞的线程的阻塞解除后,必须重新等待线程调度器再次调度它</p><p>解除阻塞</p><blockquote><ul><li>调用的sleep方法的线程经过了指定的时间</li><li>线程调用的阻塞式IO方法已经返回</li><li>线程成功地获得了试图取得的同步监视器</li><li>线程正在等待某个通知时,其他线程发出了一个通知</li><li>处于挂起的线程调用了resume恢复方法</li></ul></blockquote></li><li><p>线程死亡</p><blockquote><ul><li><p>run或call方法执行完成线程正常结束</p></li><li><p>线程抛出一个未捕获的Exception或Error</p></li><li><p>直接调用线程的stop方法来结束线程(容易死锁)</p></li></ul></blockquote><h3 id="控制线程"><a href="#控制线程" class="headerlink" title="控制线程"></a>控制线程</h3><h4 id="1-Join线程"><a href="#1-Join线程" class="headerlink" title="1 Join线程"></a>1 Join线程</h4><blockquote><p>Thread提供了一个让线程等待另一个线程完成的方法join方法.当某个程序执行流中调用其他线程的join方法时,调用线程将被阻塞,知道被join方法加入的join线程执行完成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoinThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">// 设置有参数构造器 用于设置线程的名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JoinThread</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写run方法 定义线程执行体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JoinThread</span>(<span class="string">&quot;新线程&quot;</span>).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                JoinThread jt=<span class="keyword">new</span> <span class="title class_">JoinThread</span>(<span class="string">&quot;被join的线程&quot;</span>);</span><br><span class="line">                jt.start();</span><br><span class="line">                <span class="comment">// main调用了jt线程的join方法 main线程必须等jt执行结束才会向下执行</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jt.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>join方法重载</p><ul><li>join()等待join线程执行完成</li><li>join(long millis)等待join的线程最长为millis毫秒 如果在这个时间没有执行完成 则不继续等待</li><li>join(long millis,int nanos)等待被join的线程的时间最长为mills毫秒+nanos毫微秒</li></ul><h4 id="2-后台线程"><a href="#2-后台线程" class="headerlink" title="2.后台线程"></a>2.后台线程</h4><blockquote><p>后台运行的线程为别的线程提供服务也称守护线程</p><p>特征:前台线程死亡后台线程自动死亡</p><p>使用setDaemon(true)将指定线程设置为后台线程</p><p>判断是否为后台线程isDaemon()</p><p>设置后台线程需在start之前调用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.net.SocketTimeoutException;</span><br><span class="line"></span><br><span class="line">public class DaemonThread extends Thread&#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt;1000 ; i++) &#123;</span><br><span class="line">            System.out.println(getName()+&quot; &quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        DaemonThread t=new DaemonThread();</span><br><span class="line">        //设置为后台线程</span><br><span class="line">        t.setDaemon(true);</span><br><span class="line">        // 启动线程</span><br><span class="line">        t.start();</span><br><span class="line">        for (int i = 0; i &lt;10 ; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot; &quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">        // 程序执行到此处 前台线程main线程结束 后台线程随之结束</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-线程睡眠"><a href="#3-线程睡眠" class="headerlink" title="3.线程睡眠"></a>3.线程睡眠</h4><blockquote><p>想让正在执行的线程暂停一段时间进入阻塞状态,可以使用Thread类的静态方法sleep实现</p><p>sleep重载:</p><p>1.static void sleep(long millis)让当前线程暂停millis毫秒,进入阻塞状态</p><p>2.static void sleep(long millis,int nanos)正在执行的线程暂停millis毫秒+nanos毫微秒</p></blockquote><p>sleep和yield的区别</p><blockquote><p>1.sleep方法暂停该线程后,给其他线程执行机会,不关注其他线程的优先级,而yield只会给优先级相同或更高优先级的线程执行机会</p><p>2.sleep方法会将线程进入阻塞状态,知道阻塞时间过了才会转入就绪状态,而yield不会转入阻塞状态,只是强制该线程进入就绪状态</p><p>3.sleep方法声明抛出IntertuptException异常,所以使用sleep方法要么捕获该异常,要么显式的抛出异常而yield方法则没有声明抛出异常</p><p>4.sleep比yield有更好的移植性,通常不建议用yield方法来控制并发线程的执行3#</p></blockquote><h4 id="4-改变线程优先级"><a href="#4-改变线程优先级" class="headerlink" title="4.改变线程优先级"></a>4.改变线程优先级</h4><blockquote><p>每个线程执行都具有一定的优先级,优先级高的线程获得较多的执行机会</p><p>每个线程默认的优先级与他创建它的父线程优先级相同,在默认情况下main线程具有普通优先级,所以由main线程创建的子线程也具有普通优先级</p><p>Thread类提供setPriority(int newPriority)、getPrioritu()方法来设置和返回指定线程的优先级,setPriority方法的参数为1-10之间的整数也有三个常量</p><p>MAX_PRIORITY:10</p><p>MIN_PRIORITY:1</p><p>NORM_PRIORITY:5</p></blockquote><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><h4 id="1-线程安全问题"><a href="#1-线程安全问题" class="headerlink" title="1.线程安全问题"></a>1.线程安全问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.plaf.BorderUIResource;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.FlatteningPathIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">//封装账户编号、账号余额的两个成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String accountNo,<span class="type">double</span> balance)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNo=accountNo;</span><br><span class="line">        <span class="built_in">this</span>.balance=balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccountNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountNo</span><span class="params">(String accountNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNo = accountNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNo.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>==obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj!=<span class="literal">null</span>&amp;&amp;obj.getClass()==Account.class)&#123;</span><br><span class="line">            Account target=(Account) obj;</span><br><span class="line">            <span class="keyword">return</span> target.getAccountNo().equals(accountNo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.processing.SupportedOptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">//模拟账户</span></span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line">    <span class="comment">// 当前取钱线程所希望取的钱数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> drawAmount;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawThread</span><span class="params">(String name,Account account,<span class="type">double</span> drawAmount)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.account=account;</span><br><span class="line">        <span class="built_in">this</span>.drawAmount=drawAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 多个线程修改同一共享数据 涉及数据安全问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 使用account作为同步监视器,任何线程进入下面同步代码之前 必须获得对account账户的锁定 其他线程无法获得锁 也就无法修改它 这种做法复核加锁修改释放锁的逻辑</span></span><br><span class="line">        <span class="comment">// 账户余额大于取钱数</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line">            <span class="keyword">if</span>(account.getBalance()&gt;=drawAmount)&#123;</span><br><span class="line">                <span class="comment">//吐出钱</span></span><br><span class="line">                System.out.println(getName()+<span class="string">&quot;取钱成功!&quot;</span>+drawAmount);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                account.setBalance(account.getBalance()-drawAmount);</span><br><span class="line">                System.out.println(<span class="string">&quot;\t余额为: &quot;</span>+account.getBalance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(getName()+<span class="string">&quot;取钱失败! 余额不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Account acct=<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;1234567&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(<span class="string">&quot;甲&quot;</span>,acct,<span class="number">800</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(<span class="string">&quot;乙&quot;</span>,acct,<span class="number">800</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用synchronized后的括号里的obj来进行代码同步 线程开始执行同步代码块之前,必须获得对同步监视器的锁定</p></blockquote><h4 id="2-同步方法"><a href="#2-同步方法" class="headerlink" title="2.同步方法"></a>2.同步方法</h4><blockquote><p>就是用synchronized关键字来修饰的某个方法(非static)同步方法的同步监视器是this</p><p>特征:1.该类的对象可以被多个线程安全地访问 2.每个线程调用该对象的任意方法之后都将获得正确的结果 3.每个线程调用该对象的任意方法之后,该对象状态依然保持合理状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">double</span> drawAmount)</span>&#123;</span><br><span class="line">        <span class="comment">// 账户余额大于取钱数目</span></span><br><span class="line">        <span class="keyword">if</span>(balance &gt;=drawAmount)&#123;</span><br><span class="line">            <span class="comment">//取钱成功</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;取钱成功！&quot;</span>+drawAmount);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 修改余额</span></span><br><span class="line">            balance-=drawAmount;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t 余额为: &quot;</span>+balance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;取钱不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>synchronized关键字可以修饰方法,修饰代码块,不能修饰构造器成员变量</p></blockquote><h4 id="3-释放同步监视器的锁定"><a href="#3-释放同步监视器的锁定" class="headerlink" title="3.释放同步监视器的锁定"></a>3.释放同步监视器的锁定</h4><ul><li>当前线程的同步方法、同步代码执行结束,当前线程即释放同步监视器</li><li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行,当前线程将会释放同步监视器</li><li>当前线程在同步代码块、同步方法出现了未处理的Error或Exception,导致了代码块、该方法异常结束时,当前线程将会释放同步监视器</li><li>当前线程执行同步代码块或同步方法时,程序执行了同步监视器对象的wait方法,则当前线程暂停,并释放同步监视器</li><li>线程执行同步代码块或同步方法时,程序调用Thread.sleep,Thread.yield方法来暂停当前线程的执行,当前线程不会释放同步监视器</li><li>线程执行同步代码块时,其他线程调用了该线程的suspend方法将线程挂起,该线程不会释放同步监视器,当然,程序应该尽量避免使用suspend和resume方法来控制线程</li></ul></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h3><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><h3 id="UDP三种通信方式"><a href="#UDP三种通信方式" class="headerlink" title="UDP三种通信方式"></a>UDP三种通信方式</h3><blockquote><ul><li>单播:点对点</li><li>广播:点对全集</li><li>组播:点多组</li></ul></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="元注解-注解的注解"><a href="#元注解-注解的注解" class="headerlink" title="元注解(注解的注解)"></a>元注解(注解的注解)</h3><blockquote><ul><li>@Target:约束自定义注解只能在哪里使用</li><li>@Retention:申明注解的生命周期</li></ul></blockquote><p> <img src="/2022/08/11/java/image-20220803111648842.png" alt="image-20220803111648842"></p><h3 id="注解的解析"><a href="#注解的解析" class="headerlink" title="注解的解析"></a>注解的解析</h3><blockquote><p>判断是否存在注解,注解存在则解析出内容</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/08/11/Spring/"/>
      <url>/2022/08/11/Spring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><blockquote><p>IOC:Inversion of Control 反转控制</p></blockquote><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><blockquote><p>DI:Dependency injection 依赖注入</p></blockquote><h2 id="基于XML管理bean"><a href="#基于XML管理bean" class="headerlink" title="基于XML管理bean"></a>基于XML管理bean</h2><p>引入依赖</p><blockquote><p>打包方式为jar</p></blockquote><p><img src="/2022/08/11/Spring/image-20220804214437996.png" alt="image-20220804214437996"></p><p>实现类</p><p><img src="/2022/08/11/Spring/image-20220804214659829.png" alt="image-20220804214659829"></p><h3 id="配置bean"><a href="#配置bean" class="headerlink" title="配置bean"></a>配置bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.HelloWorld&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取IOC容器</span></span><br><span class="line">        ApplicationContext ioc= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取bean对象</span></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">helloWorld</span> <span class="operator">=</span>(HelloWorld) ioc.getBean(<span class="string">&quot;helloWorld&quot;</span>);<span class="comment">//ID</span></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        helloWorld.sayHello();</span><br></pre></td></tr></table></figure><h3 id="创建对象流程"><a href="#创建对象流程" class="headerlink" title="创建对象流程"></a>创建对象流程</h3><blockquote><p>通过解析+反射来创建对象(无参构造)</p></blockquote><h3 id="获取Bean的三种方式"><a href="#获取Bean的三种方式" class="headerlink" title="获取Bean的三种方式"></a>获取Bean的三种方式</h3><ul><li><p>id</p></li><li><p>type</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestClass</span><span class="params">()</span>&#123;</span><br><span class="line">        ApplicationContext ioc= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> ioc.getBean(Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;<span class="comment">//不能有多个类型相同的bean</span></span><br></pre></td></tr></table></figure><ul><li>根据type+id获取</li></ul><p>组件类实现了接口,可以用接口类型获取bean</p><p>可以使用intance来判断是否能获取</p><h3 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;niupi&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当有重复构造时 可以指定name匹配</p></blockquote><h3 id="特殊类型注入"><a href="#特殊类型注入" class="headerlink" title="特殊类型注入"></a>特殊类型注入</h3><blockquote><p>value:给基本量赋值</p><p>赋值为null:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span> /&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!&lt;![CDATA[</span><br><span class="line"></span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure></blockquote><p>特殊字符输入 不能直接做为属性输入</p><h3 id="为类类型属性赋值"><a href="#为类类型属性赋值" class="headerlink" title="为类类型属性赋值"></a>为类类型属性赋值</h3><h4 id="引用外部bean"><a href="#引用外部bean" class="headerlink" title="引用外部bean"></a>引用外部bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazz01&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="级连"><a href="#级连" class="headerlink" title="级连"></a>级连</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentFive&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazz01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内部bean"><a href="#内部bean" class="headerlink" title="内部bean"></a>内部bean</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;StudentFive&quot; class=&quot;com.zjj.spring.Student&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sid&quot; value=&quot;1001&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot; value=&quot;21&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;gender&quot; value=&quot;nan&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;zjj&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;clazz&quot;&gt;</span><br><span class="line">            &lt;bean id=&quot;clazzInner&quot; class=&quot;com.zjj.spring.Clazz&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;cid&quot; value=&quot;1111&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;cname&quot; value=&quot;2222&quot;/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="为数组类型赋值"><a href="#为数组类型赋值" class="headerlink" title="为数组类型赋值"></a>为数组类型赋值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span> value为实际类型也可用ref</span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为列表属性赋值"><a href="#为列表属性赋值" class="headerlink" title="为列表属性赋值"></a>为列表属性赋值</h3><p>内部list</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1班&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentThree&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentTwo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置util约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;StudentList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentTwo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentThree&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;StudentList&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为map赋值"><a href="#为map赋值" class="headerlink" title="为map赋值"></a>为map赋值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentEight&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherOne&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherTwo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TeacherOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TeacherTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引用Util"><a href="#引用Util" class="headerlink" title="引用Util"></a>引用Util</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teachermap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherOne&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherTwo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="p命名空间"><a href="#p命名空间" class="headerlink" title="p命名空间"></a>p命名空间</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentTen&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;zjj&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teachermap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入外部数据"><a href="#引入外部数据" class="headerlink" title="引入外部数据"></a>引入外部数据</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://121.41.39.152:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;979508.a&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用文件连接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>指定bean标签的scope属性来指定bean的作用域范围</p><table><thead><tr><th>取值</th><th>含义</th><th align="center">创建时机</th></tr></thead><tbody><tr><td>singleton(默认)</td><td>单例模式</td><td align="center">ioc被创建时</td></tr><tr><td>prototype</td><td>多例模式</td><td align="center">获取bean时</td></tr></tbody></table><h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><p>具体</p><blockquote><ul><li>bean对象创建(调用无参构造器)</li><li>给bean对象设置属性</li><li>bean对象初始化之前操作(由bena的后置处理器负责) postProcessBeforeInitialization</li><li>bean对象初始化(需要在配置bean时指定初始化方法)</li><li>bean对象初始化后操作(由bean的后置处理器负责)postProcessAfterInitialization</li><li>bean对象就绪待使用</li><li>bean对象销毁(需要在配置bean时指定销毁方法)</li><li>ioc关闭</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.User&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2385172737&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2385172737@zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多例时:在获取bean的时候执行</p><p>单例时:在获取ioc的时候执行</p></blockquote><h3 id="bean处理器"><a href="#bean处理器" class="headerlink" title="bean处理器"></a>bean处理器</h3><p>实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanPostProcessor======&gt;后置处理器postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanPostProcessor======&gt;后置处理器postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;MyBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.process.MyBeanPostProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><blockquote><p>实现FactoryBean接口</p><p>getObject() 通过一个对象交给ioc容器</p><p>getObjectType()设置对象类型</p><p>isSingLeton()是否单例</p><p>当FactoryBean的实现类配置为bean时,会将当前类的getobject方法所返回的对象交给ioc管理</p></blockquote><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><blockquote><p>自动为类类型赋值</p><p>no,default:不会自动匹配bean为属性赋值 使用默认值</p><p>byType:根据要赋值的类型 在ioc容器中匹配 类型需要唯一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;userService&quot; ref=&quot;userService&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> byType方式</span><br></pre></td></tr></table></figure><p>byname 与bytype类似</p></blockquote><h2 id="基于注解管理bean"><a href="#基于注解管理bean" class="headerlink" title="基于注解管理bean"></a>基于注解管理bean</h2><blockquote><p>@Component:将类标识为普通组件</p><p>@Controller:将类标识为控制层组件</p><p>@Service:将类标识为业务层组件</p><p>@Repository:将类标识为持久层组件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    扫描组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="排除扫描-exclude-filter"><a href="#排除扫描-exclude-filter" class="headerlink" title="排除扫描(exclude-filter)"></a>排除扫描(exclude-filter)</h3><h3 id="包含扫描-include-filter-需要改变use的属性-默认为true"><a href="#包含扫描-include-filter-需要改变use的属性-默认为true" class="headerlink" title="包含扫描(include-filter) 需要改变use的属性 默认为true"></a>包含扫描(include-filter) 需要改变use的属性 默认为true</h3><ul><li>annptation根据注解类型</li><li>assignable根据类类型</li></ul><blockquote><p>基于注解+id和类型获取 id为类名的小驼峰</p><p>自定义id注解内加入值</p></blockquote><h3 id="基于注解的自动装配"><a href="#基于注解的自动装配" class="headerlink" title="基于注解的自动装配"></a>基于注解的自动装配</h3><p>不需要实现get set方法</p><blockquote><p>原理:</p><ul><li>通过bytype在ioc容器中通过类型匹配bean为属性赋值</li><li>当有多个类型则自动使用byname来实现自动装配</li><li>若byname和bytype都无法自动转配 直接报错</li><li>此时可以在赋值的属性上添加@Qualifier注解 值为bean的id</li><li>当没有任何类型匹配的bean时 报错</li></ul></blockquote><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="静态代理-套娃代理"><a href="#静态代理-套娃代理" class="headerlink" title="静态代理(套娃代理)"></a>静态代理(套娃代理)</h3><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//ClassLoader loader 指定加载动态生成的代理的类加载器</span></span><br><span class="line">        <span class="comment">//Class&lt;?&gt;[] interfaces, 获取目标对象实现的所有接口的class对象数组</span></span><br><span class="line">        <span class="comment">//InvocationHandler h 设置代理类中的抽象方法如何重写</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">               <span class="comment">//proxy 表示代理对象</span></span><br><span class="line">                <span class="comment">//method 表示执行的方法</span></span><br><span class="line">                <span class="comment">//args 参数列表</span></span><br><span class="line">                System.out.println(<span class="string">&quot;日志,方法: &quot;</span>+method.getName()+<span class="string">&quot;,&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;日志,方法 &quot;</span>+method.getName()+<span class="string">&quot; 结果 &quot;</span>+result);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader,interfaces,handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorImpl</span>());</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator)proxyFactory.getProxy();</span><br><span class="line">        proxy.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP(面向切面编程)"></a>AOP(面向切面编程)</h2><blockquote><ul><li>切面(ASPECT):横切关注点被模块化的特殊处理对象 一个类</li><li>通知(Advice):切面必须要完成得到工作 为类中的一个方法</li><li>目标(target):被通知的对象</li><li>代理(Proxy):向目标对象应用通知之后创建的对象</li><li>切入点(PointCut):切面通知执行的地点的定义</li><li>连接点(JointPoint):与切入点匹配的执行点</li></ul></blockquote><h3 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h3><p><img src="/2022/08/11/Spring/image-20220805223658242.png" alt="image-20220805223658242"></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    AOP的注意事项:</span></span><br><span class="line"><span class="comment">    切面类和目标类都需要交给ioc容器管理</span></span><br><span class="line"><span class="comment">    讲切面类通过@Aspect表示为切面类</span></span><br><span class="line"><span class="comment">    配置文件设置 &lt;aop:aspectj-autoproxy/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring.test.aop.Annotation&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启基于注解的aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>前置通知使用@Before注解 方法执行之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int com.zjj.spring.aop.Annotation.CalculatorImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(* com.zjj.spring.aop.Annotation.*.</span></span><br><span class="line"><span class="meta">        *(..))&quot;)</span></span><br><span class="line">    <span class="comment">//任意修饰符任意修饰返回值 当前包的所有类所有方法 参数任意</span></span><br></pre></td></tr></table></figure><p>获取连接点信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* com.zjj.spring.test.aop.Annotation.*.*(..))&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">       <span class="comment">//获取连接点所对应方法的签名信息</span></span><br><span class="line">       <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">       <span class="comment">//获取连接点方法的参数</span></span><br><span class="line">       Object[] args = joinPoint.getArgs();</span><br><span class="line">       System.out.println(<span class="string">&quot;LoggerAspect, 方法: &quot;</span>+signature.getName()+<span class="string">&quot;方法参数: &quot;</span>+ Arrays.toString(args));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.zjj.spring.test.aop.Annotation.CalculatorImpl.*(..)))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">      public void pointcut()&#123;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br></pre></td></tr></table></figure><p>其他地方的切入点表达式直接使用pointcut()即可</p><blockquote><ul><li>@After:后置通知,在目标对象方法的finally处执行</li><li>@AfterReturning 返回值之后执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;pointcut()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturnningMethod</span><span class="params">(JoinPoint joinPoint,Object result)</span>&#123;</span><br><span class="line">           <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">           System.out.println(<span class="string">&quot;方法&quot;</span>+signature.getName()+<span class="string">&quot;返回值&quot;</span>+result);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li><p>@AfterThrowing 异常通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pointcut()&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterThrowingMethod</span><span class="params">(JoinPoint joinPoint,Exception ex)</span>&#123;</span><br><span class="line">           <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">           System.out.println(<span class="string">&quot;异常&quot;</span>+signature.getName()+<span class="string">&quot;异常&quot;</span>+ex);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li><p>@Around通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">aroundAdviceMethod</span><span class="params">(ProceedingJoinPoint JoinPoint)</span> &#123;</span><br><span class="line">      Object result=<span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;前置通知&quot;</span>);</span><br><span class="line">          <span class="comment">//表示目标对象方法的执行</span></span><br><span class="line">          result = JoinPoint.proceed();</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;返回通知&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;异常通知&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;后置通知&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><h4 id="切面优先级"><a href="#切面优先级" class="headerlink" title="切面优先级"></a>切面优先级</h4><p>使用@Order()来设置优先级 优先级越小越高</p><h3 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring.test.aop.xml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zjj.spring.test.aop.xml.CalculatorXmlImpl.*(..)))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeAdviceMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;AfterAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturnningMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;AfterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundAdviceMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h4 id="JDBCTemple"><a href="#JDBCTemple" class="headerlink" title="JDBCTemple"></a>JDBCTemple</h4><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置spring配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--    引入数据源--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class="line">    &lt;bean class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> id=<span class="string">&quot;dataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean class=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="update实现增删改的功能"><a href="#update实现增删改的功能" class="headerlink" title="update实现增删改的功能"></a>update实现增删改的功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//设置spring测试环境的配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;insert into t_user values(null,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="string">&quot;zhongjajian&quot;</span>,<span class="string">&quot;979508.a&quot;</span>,<span class="number">21</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;2385172737&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestGetUserById</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from t_user where id=?&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), <span class="number">28</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from t_user&quot;</span>;</span><br><span class="line">        List&lt;User&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCount</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select count(*) from t_user&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于注解的声明事务"><a href="#基于注解的声明事务" class="headerlink" title="基于注解的声明事务"></a>基于注解的声明事务</h3><blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_mybatis_spring_mvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_ioc_annotation<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_ioc_xml<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_proxy<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_aop<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_transaction<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-generator依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在spring配置文件中配置事务管理器</p><p>开启事务驱动</p><p>使用@Transactional注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启事务的注解驱动</span></span><br><span class="line"><span class="comment">    将使用@Transactional注解标识的类或方法使用事务管理</span></span><br><span class="line"><span class="comment">    transaction-manager设置事务管理器的ID</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象</title>
      <link href="/2022/08/11/javase/"/>
      <url>/2022/08/11/javase/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>方法名一样但参数不一样</p><p>可变参数:数据类型…参数名(放在最后)有且只有一个</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>构造器可以重载(与类名相同)</p><p>没有返回值</p><p>完成对象的初始化</p><p>由系统调用</p><p>如果没有定义构造器 系统自动定义无参数构造器当自己定义后系统的自动失效就不能使用无参数如需使用则需自己定义一个无参数构造器</p><p>使用this.构造器必须置于第一条语句</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl+d 删除该行</p><p>复制行ctrl+alt+下</p><p>注释 ctrl+&#x2F;</p><p>自动导入类 alt+enter</p><p>调整代码格式ctrl+alt+l</p><p>生成构造器等 clt+insert</p><p>查看类关系 ctrl+h</p><p>定位方法类 ctrl+b</p><h2 id="包命名规范"><a href="#包命名规范" class="headerlink" title="包命名规范"></a>包命名规范</h2><p>不能以数字开头</p><p>com.公司名.项目名.模块名</p><p><img src="/2022/08/11/javase/image-20220718164316557.png" alt="image-20220718164316557"></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>可以将get set写入构造器</p><h2 id="继承-extends"><a href="#继承-extends" class="headerlink" title="继承(extends)"></a>继承(extends)</h2><ul><li>子类继承所有的属性和方法,私有属性和方法不能在子类直接访问,要通过公共的方法去访问</li><li>子类必须调用父类的构造器,完成父类构造器的初始化(默认调用super)</li><li>当创建子类对象时,不管使用子类的哪个构造器,默认情况下总会调用父类的无参构造器,如果父类没有提供无参构造器,则必须在子类的构造器用super去指定使用父类的哪个构造器完成初始化工作,否则报错。</li><li>如果希望显式的调用父类的某个构造器,则显式的调用一下super(参数列表)</li><li>super要放在构造器的第一行</li><li>super和this调用构造器不能同时使用</li><li>object是任何类的基类</li><li>单继承</li></ul><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>super表父类的引用 可以访问父类的属性 方法 构造器(private不行)</p><ul><li>super 父类初始化父类 子类初始化子类</li><li>如有重名的方法或属性需使用super或this</li><li>重复遵循就近原则</li></ul><h2 id="重写-override"><a href="#重写-override" class="headerlink" title="重写(override)"></a>重写(override)</h2><p><img src="/2022/08/11/javase/image-20220718222159111.png" alt="image-20220718222159111"></p><p><img src="/2022/08/11/javase/image-20220718223618399.png" alt="image-20220718223618399"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p> 方法或对象具有多种心态 建立在封装和继承之上</p><ul><li><p>方法和重载体现多态</p></li><li><p>对象的多态(编译看左边 运行看右边 父类的引用指向子类)</p><p><img src="/2022/08/11/javase/image-20220719125743630.png" alt="image-20220719125743630"></p><ul><li>可以调用父类的所有成员(访问权限)</li><li>不能调用子类的特有成员</li></ul><p><img src="/2022/08/11/javase/image-20220719133346029.png" alt="image-20220719133346029"></p><p><img src="/2022/08/11/javase/image-20220719133842550.png" alt="image-20220719133842550"></p><h2 id="多态绑定"><a href="#多态绑定" class="headerlink" title="多态绑定"></a>多态绑定</h2><ul><li>方法与运行类型绑定</li><li>属性哪里声明哪里使用</li></ul><h2 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h2><p>定义类型为父类类型 保存的元素为子类类型</p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p><img src="/2022/08/11/javase/image-20220719160606387.png" alt="image-20220719160606387"></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p><img src="/2022/08/11/javase/image-20220719184518997.png" alt="image-20220719184518997"></p><p><img src="/2022/08/11/javase/image-20220719185339467.png" alt="image-20220719185339467"></p></li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p><img src="/2022/08/11/javase/image-20220719185448128.png" alt="image-20220719185448128"></p><p><img src="/2022/08/11/javase/image-20220719190621867.png" alt="image-20220719190621867"></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>含有抽象方法的类,由其子类实现抽象方法</p><ul><li>抽象类不能被实例化</li><li>抽象类可以没有抽象方法</li><li>abstract只能修饰类和方法</li><li>继承了抽象类 必须实现抽象类的所有方法 除非自己也是抽象类</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>可以有抽象方法</li><li>可以有默认实现方法</li><li>可以有静态方法</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>局部内部类(方法内)</p><ul><li><p>局部内部类(有类名)</p></li><li><blockquote><pre><code>不能用访问修饰符修饰 可以用finally可以访问外部类所有成员(含私有)作用域在定义的地方局部内部类可以直接访问外部类成员外部类访问内部类 需要实例化重名属性使用外部类名.this.成员<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 匿名内部类(无类名,重点)</span><br><span class="line"></span><br><span class="line">+ &gt; ```</span><br><span class="line">只使用一次</span><br><span class="line">函数式接口</span><br><span class="line">可以访问外部类的所有属性包括私有的</span><br><span class="line">作用域方法或代码块中</span><br><span class="line">外部类不能访问内部类</span><br><span class="line">重名属性使用外部类名.this.成员</span><br></pre></td></tr></table></figure></code></pre></blockquote></li></ul><p>外部类的成员变量</p><ul><li><p>成员内部类(无static)</p></li><li><blockquote><p>可以访问外部的所有属性包括私有的</p><p>类内的方法可以实例化调用</p><p>可以用修饰符修饰</p><p>作用域:和其他成员一样 </p><p>内部类访问外部 直接访问</p><p>外部访问内部 创建对象访问</p><p>重名 外部类名.this.属性</p></blockquote></li><li><p>静态内部类(有static)</p></li><li><blockquote><p>可以有修饰符修饰</p><p>静态类能访问静态成员(包括私有的)</p><p>跟其他成员一样</p><p>访问内部访问外部直接访问</p><p>外部访问内部先实例化</p></blockquote><h2 id="枚举-有限特定的对象"><a href="#枚举-有限特定的对象" class="headerlink" title="枚举(有限特定的对象)"></a>枚举(有限特定的对象)</h2><h3 id="自定义枚举"><a href="#自定义枚举" class="headerlink" title="自定义枚举"></a>自定义枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> enum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:Eumer01</span></span><br><span class="line"><span class="comment"> * Package:enum_</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2022/7/20 15:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Eumer01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.Spring);</span><br><span class="line">        System.out.println(Season.Summer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部不允许new</span></span><br><span class="line">    <span class="comment">// 去掉set方法</span></span><br><span class="line">    <span class="comment">// 创建固定对象</span></span><br><span class="line">    <span class="comment">// 加入final修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Spring</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Summer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Autumn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Winter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="系统枚举"><a href="#系统枚举" class="headerlink" title="系统枚举"></a>系统枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> enum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:Enumeraltion</span></span><br><span class="line"><span class="comment"> * Package:enum_</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2022/7/20 15:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeraltion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season2.AUTUMN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season2</span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;绿色&quot;</span>),SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;炎热&quot;</span>),AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    Season2(String name, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="override-重写"><a href="#override-重写" class="headerlink" title="override 重写"></a>override 重写</h3><blockquote><p>只能用在方法上</p></blockquote><h3 id="Deprecated-过时"><a href="#Deprecated-过时" class="headerlink" title="Deprecated 过时"></a>Deprecated 过时</h3><h3 id="SuppressWarring-抑制警告"><a href="#SuppressWarring-抑制警告" class="headerlink" title="SuppressWarring 抑制警告"></a>SuppressWarring 抑制警告</h3><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> num2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> res=num1/num2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序抛出异常 直接崩溃 这样程序不得行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;继续运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Error Java虚拟机无法解决的严重错误  资源不足 爆栈等</p></li><li><p>Exception 外在元素的一般问题 空指针 读取不存在的文件  网络连接错误等</p><blockquote><p>编译异常:</p><p>运行异常:</p></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="/2022/08/11/javase/1658310744865-16583108356542.png" alt="1658310744865"></p><blockquote><p>set:无序不可重复集合</p><p>list:有序重复集合</p><p>map(关联数组):映射关系集</p></blockquote></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/08/11/js/"/>
      <url>/2022/08/11/js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><h2 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>首字母小写后面每个单词首字母大写</p></blockquote><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><blockquote><p>break   do     in                 typeof</p><p>case    else    insanceof    var</p><p>catch  export new            void</p><p>class   extends return     while</p><p>const finally     super    with</p><p>continue for switch yield</p><p>debugger function this</p><p>default if throw</p><p>delete import try</p><p>enum implement package public</p><p>interface protected static</p><p>let private await</p></blockquote><h3 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h3><blockquote><p>定义变量 自适应类型 作用域为函数作用域</p></blockquote><h3 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a>let关键字</h3><blockquote><p>与var 相同但作用域是在块上</p><p>不会变成windows对象属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">// 5 正确</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2022/08/11/maven/"/>
      <url>/2022/08/11/maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2022/08/11/maven/image-20220716153010633.png" alt="image-20220716153010633"></p><p><img src="/2022/08/11/maven/image-20220716160459033.png" alt="image-20220716160459033"></p><p>在Maven中，任何项目输出都可成为构件。</p><p>每个构件都有自己的唯一标识，由 groupId，artifactId 和 version 等信息构成。</p><p>Maven可以对构件进行版本控制，管理。</p><h2 id="Maven构件标识"><a href="#Maven构件标识" class="headerlink" title="Maven构件标识"></a>Maven构件标识</h2><p>每个构件都有自己的唯一标识（Maven 行话称之为 <strong>“唯一坐标”</strong> ），由 groupId，artifactId 和 version 等信息构成。</p><ul><li>groupId：当前Maven构件隶属的组织名。groupId一般分为多段，通常情况下，第一段为域，第二段为公司名称。域又分为 org、com、cn 等，其中 org 为非营利组织，com 为商业组织，cn 表示中国。以 apache 开源社区的 tomcat 项目为例，这个项目的 groupId 是 org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artifactId是tomcat。(必须)</li><li>artifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。(必须)</li><li>version：当前版本。(必须)</li><li>packaging：打包方式，比如 jar，war… (必须)</li><li>classifier：classifier通常用于区分从同一POM构建的具有不同内容的构件。它是可选的，它可以是任意的字符串，附加在版本号之后。</li></ul><h2 id="Maven的classifier作用"><a href="#Maven的classifier作用" class="headerlink" title="Maven的classifier作用"></a>Maven的classifier作用</h2><p>classifier可以是任意的字符串，用于确定文件。常见的应用场景如下所示：</p><h3 id="（1）可用于区分不同JDK版本所生成的jar包在平时的-Java-Web-项目开发中，为了便于后期的维护，我们一般会进行分层开发，最常见的情况就是分为：domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层）。这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，可以使用-Maven-来构建以上的各个层。常见的-Java-Web-项目结构如下所示："><a href="#（1）可用于区分不同JDK版本所生成的jar包在平时的-Java-Web-项目开发中，为了便于后期的维护，我们一般会进行分层开发，最常见的情况就是分为：domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层）。这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，可以使用-Maven-来构建以上的各个层。常见的-Java-Web-项目结构如下所示：" class="headerlink" title="（1）可用于区分不同JDK版本所生成的jar包在平时的 Java Web 项目开发中，为了便于后期的维护，我们一般会进行分层开发，最常见的情况就是分为：domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层）。这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，可以使用 Maven 来构建以上的各个层。常见的 Java Web 项目结构如下所示："></a>（1）可用于区分不同JDK版本所生成的jar包在平时的 Java Web 项目开发中，为了便于后期的维护，我们一般会进行分层开发，最常见的情况就是分为：domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层）。这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，可以使用 Maven 来构建以上的各个层。常见的 Java Web 项目结构如下所示：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">system-parent</span><br><span class="line">    　　|----pom.xml</span><br><span class="line">    　　　　</span><br><span class="line">    　　|----system-domain</span><br><span class="line">        　　　　　|----pom.xml</span><br><span class="line">    　　|----system-dao</span><br><span class="line">        　　　　　|----pom.xml</span><br><span class="line">    　　|----system-service</span><br><span class="line">        　　　　　|----pom.xml</span><br><span class="line">    　　|----system-web</span><br><span class="line">        　　　　　|----pom.xml</span><br></pre></td></tr></table></figure><h2 id="1、创建-system-parent-项目"><a href="#1、创建-system-parent-项目" class="headerlink" title="1、创建 system-parent 项目"></a>1、创建 system-parent 项目</h2><p>首先，创建 system-parent 项目，用来给各个子模块继承。进入命令行，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-parent -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在当前目录生成了 system-parent 目录，里面有一个 src 目录和一个 pom.xml 文件。</p><p>将 src 文件夹删除，然后修改 pom.xml 文件，将 <packaging>jar</packaging> 修改为 <packaging>pom</packaging>，pom 表示它是一个被继承的模块，修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="2、创建-sytem-domain-模块"><a href="#2、创建-sytem-domain-模块" class="headerlink" title="2、创建 sytem-domain 模块"></a>2、创建 sytem-domain 模块</h2><p>在命令行窗口中，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-domain -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在 system-parent 目录中生成了 system-domain，里面包含 src 目录和 pom.xml 文件。</p><p>同时，在 system-parent 目录中的 pom.xml 文件自动添加了如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><p>这时，system-parent 的 pom.xml 文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;org.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">     &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改 system-domain 目录中的 pom.xml 文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，加上 <packaging> jar </packaging>， 因为 groupId 和 version 会继承 system-parent 中的 groupId 和 version，packaging 设置打包方式为 jar。修改过后的 pom.xml 文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-domain&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-domain&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="3、创建-sytem-dao-模块"><a href="#3、创建-sytem-dao-模块" class="headerlink" title="3、创建 sytem-dao 模块"></a>3、创建 sytem-dao 模块</h2><p>在命令行窗口，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-dao -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在 system-parent 目录中生成了 system-dao，里面包含 src 目录和 pom.xml 文件。</p><p>同时，在 system-parent 目录中的 pom.xml 文件自动变成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;org.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-dao&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改 system-dao 目录中的 pom.xml 文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，加上<packaging>jar</packaging>，因为 groupId 和 version 会继承 system-parent 中的 groupId 和 version，packaging 设置打包方式为 jar，同时添加对 system-domain 模块的依赖，修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-dao&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-dao&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--system-dao需要使用到system-domain中的类，所以需要添加对system-domain模块的依赖--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-domain&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="4、创建system-service模块"><a href="#4、创建system-service模块" class="headerlink" title="4、创建system-service模块"></a>4、创建system-service模块</h2><p>在命令行窗口，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后可以看到在 system-parent 目录中生成了 system-service目录，里面包含 src 目录和 pom.xml 文件。</p><p>同时，在 system-parent 目录中的 pom.xml 文件自动变成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-dao&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-service&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改system-service目录中的pom.xml文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，加上<packaging>jar</packaging>，因为 groupId 和 version 会继承 system-parent 中的 groupId 和 version，packaging 设置打包方式为 jar，同时添加对 system-dao 模块的依赖，system-service 依赖 system-dao 和 system-domain，但是我们只需添加 system-dao 的依赖即可，因为 system-dao 已经依赖了 system-domain。修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project &gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-service&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-service&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    system-service依赖system-dao和system-domain，</span><br><span class="line">    但是我们只需添加system-dao的依赖即可，因为system-dao已经依赖了system-domain</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-dao&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="5、创建-system-web-模块"><a href="#5、创建-system-web-模块" class="headerlink" title="5、创建 system-web 模块"></a>5、创建 system-web 模块</h2><p>在命令行窗口中，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-web -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在 system-parent 目录中生成了 system-web 目录，里面包含 src 目录和 pom.xml 文件。</p><p>在\system-web\src\main\webapp目录中还生成了一个简单的index.jsp，里面的内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在 system-web\src\main\webapp\WEB-INF 目录中生成了web.xml文件。</p><p>同时，system-parent 目录中的 pom.xml 文件自动变成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-dao&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-service&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-web&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改system-web目录中的pom.xml文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，因为groupId和version会继承system-parent中的groupId和version，同时添加对system-service模块的依赖，修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-web&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-web Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--system-web依赖system-service--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-service&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;system-web&lt;/finalName&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/project&gt;</span><br></pre></td></tr></table></figure><p>注意，web项目的打包方式是war。</p><h2 id="6、编译运行项目"><a href="#6、编译运行项目" class="headerlink" title="6、编译运行项目"></a>6、编译运行项目</h2><p>经过上面的五个步骤，相关的模块全部创建完成，怎么运行起来呢？</p><p>由于最终运行的是 system-web 模块，所以我们对该模块添加 jetty 支持，方便测试运行。修改 system-web 项目的 pom.xml 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-web&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-web Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--system-web依赖system-service--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-service&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;system-web&lt;/finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!--配置Jetty插件--&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>在命令行进入 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>命令执行完后，在 system-web 目录下多出了 target 目录，里面有了 system-web.war。</p><p>命令行进入 sytem-web 目录，执行如下命令，启动 jetty</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn jetty:run</span><br></pre></td></tr></table></figure><p>启动 jetty 服务器后，访问 <a href="http://localhost:8080/system-web/">http://localhost:8080/system-web/</a> 就可以获取到运行结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;  </span><br><span class="line">&lt;classifier&gt;jdk15&lt;/classifier&gt;    </span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;  </span><br><span class="line">&lt;classifier&gt;jdk13&lt;/classifier&gt;    </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>以上配置信息实际上对应的 jar 包是 json-lib-2.2.2-jdk15.jar 和 json-lib-2.2.2-jdk13.jar。</p><h3 id="（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。"><a href="#（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。" class="headerlink" title="（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。"></a>（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;  </span><br><span class="line">&lt;classifier&gt;jdk15-javadoc&lt;/classifier&gt;    </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure><p>以上配置信息对应的是 json-lib-2.2.2-jdk15-javadoc.jar。</p><h3 id="提醒：需要注意classifier的位置"><a href="#提醒：需要注意classifier的位置" class="headerlink" title="提醒：需要注意classifier的位置"></a>提醒：需要注意classifier的位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;classifier&gt;jdk15-javadoc&lt;/classifier&gt;  </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;   </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure><p>对应的是 json-lib-jdk15-javadoc-2.2.2.jar，可能会出现找不到jar包的情况。</p><h2 id="Maven构件特性"><a href="#Maven构件特性" class="headerlink" title="Maven构件特性"></a>Maven构件特性</h2><p>（1）构件具有依赖传递。例如：项目依赖构件A，而构件A又依赖B，Maven会将A和B都视为项目的依赖。</p><p>（2）构件之间存在版本冲突时，Maven会依据 “短路优先” 原则加载构件。此外，我们也可以在 pom.xml 中，使用 <exclusions></exclusions>显式排除某个版本的依赖，以确保项目能够运行。</p><ul><li>（a）项目依赖构件A和B，构件A → C → D(version:1.0.0)，构件B → D(version:1.1.0)，此时，Maven会优先解析加载D(version:1.1.0)。</li><li>（b）项目依赖构件A和B，构件A → D(version:1.0.0)， 构件B → D(version:1.1.0)，此时，Maven会优先解析加载D(version:1.0.0)。</li></ul><p>（3）构件的依赖范围。Maven在项目的构建过程中，会编译三套 ClassPath，分别对应：编译期，运行期，测试期。而依赖范围就是为构件指定它可以作用于哪套 ClassPath。</p><table><thead><tr><th align="left">-</th><th align="left">编译期</th><th align="left">测试期</th><th align="left">运行期</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left">默认范围</td></tr><tr><td align="left">provided</td><td align="left">√</td><td align="left">√</td><td align="left"></td><td align="left">如 servlet-api.jar，运行期由web容器提供。</td></tr><tr><td align="left">runtime</td><td align="left"></td><td align="left">√</td><td align="left">√</td><td align="left">编译期无需直接引用。</td></tr><tr><td align="left">test</td><td align="left"></td><td align="left">√</td><td align="left"></td><td align="left">如junit.jar。</td></tr><tr><td align="left">system</td><td align="left">√</td><td align="left">√</td><td align="left"></td><td align="left">必须通过 <systemPath></systemPath> 元素，显示指定依赖文件的路径， 与本地系统相关联，可移植性差。</td></tr><tr><td align="left">import</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">表示继承父POM.XML中的依赖范围设置</td></tr></tbody></table><blockquote><p><strong>提醒：</strong>Maven中的库是个物理概念，存放各种依赖 Jar，而 ClassPath 是个逻辑概念，指定所依赖 Jar 的可见性。</p></blockquote><h2 id="Maven坐标组成"><a href="#Maven坐标组成" class="headerlink" title="Maven坐标组成"></a>Maven坐标组成</h2><p>每个构件都有自己的唯一标识（Maven 行话称之为 <strong>“唯一坐标”</strong> ），由 groupId，artifactId 和 version 等信息构成。</p><ul><li>groupId：当前Maven构件隶属的组织名。groupId一般分为多段，通常情况下，第一段为域，第二段为公司名称。域又分为 org、com、cn 等，其中 org 为非营利组织，com 为商业组织，cn 表示中国。以 apache 开源社区的 tomcat 项目为例，这个项目的 groupId 是 org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artifactId是tomcat。(必须)</li><li>artifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。(必须)</li><li>version：当前版本。(必须)</li><li>packaging：打包方式，比如 jar，war… (必须)</li><li>classifier：classifier通常用于区分从同一POM构建的具有不同内容的构件。它是可选的，它可以是任意的字符串，附加在版本号之后。</li></ul><p>以MyBatis的坐标为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>groupId表示组织标识。 groupId定义当前Maven项目隶属的组织机构。举个例子，如果你的公司是mycom，有一个项目为myapp，那么groupId就应该是com.mycom.myapp。groupId的表示方式与Java包名的表示方式类似。</li><li>artifactId表示项目名称。该元素定义当前实际项目中的一个Maven项目（模块），推荐的做法是使用实际项目名称作为artifactId的前缀。比如上例中的mybatis，mybatis就是实际的项目名称，方便而且直观。在默认情况下，maven生成的构件，会以artifactId作为文件头，如mybatis-3.5.2.jar，使用实际项目名称作为前缀，就能方便的从本地仓库找到某个项目的构件。</li><li>version表示项目的当前版本。</li></ul><h2 id="Maven依赖范围"><a href="#Maven依赖范围" class="headerlink" title="Maven依赖范围"></a>Maven依赖范围</h2><p><strong>compile</strong></p><p>编译依赖范围（默认），使用此依赖范围对于编译、测试、运行三种都有效，即在编译、测试和运行的时候都要使用该依赖 Jar 包。</p><p><strong>test</strong></p><p>测试依赖范围，从字面意思就可以知道此依赖范围只能用于测试，而在编译和运行项目时无法使用此类依赖，典型的是 JUnit，它只用于编译测试代码和运行测试代码的时候才需要。</p><p><strong>provided</strong></p><p>此依赖范围，对于编译和测试有效，而对运行时无效。比如 servlet-api.jar 在 Tomcat 中已经提供了，我们只需要的是编译期提供而已。</p><p><strong>runtime</strong></p><p>运行时依赖范围，对于测试和运行有效，但是在编译主代码时无效，典型的就是JDBC驱动实现。</p><p><strong>system</strong></p><p>系统依赖范围，使用 system 范围的依赖时必须通过 systemPath 元素显示地指定依赖文件的路径，不依赖 Maven 仓库解析，所以可能会造成建构的不可移植。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdbc-stdext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2022/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><blockquote><ul><li>集合结构:集合结构中的数据元素除了同属一个集合外,没有任何的关系。</li><li>线性结构:数据元素为一对一的关系</li><li>树型结构:树形结构中的数据元素为一对多的关系</li><li>图结构:图形结构的数据元素是多对多的关系</li></ul></blockquote><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><blockquote><ul><li>顺序存储结构:把数据存在地址连续的存储单元,数据间的逻辑关系和物理关系是一致的</li><li>链式存储结构:把数据元素放在任意的存储单元中,这组存储单元可以是不连续的</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计文档</title>
      <link href="/2022/08/11/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
      <url>/2022/08/11/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><ul><li>数据库表设计</li><li>表关系</li></ul></li><li><p>接口设计</p><ul><li>准入准出</li><li>输入请求参数</li><li>输出的返回参数</li></ul></li><li><p>代码逻辑设计</p><ul><li>流程图展示</li></ul></li><li><p>SQL模版设计</p></li><li><p>测试</p><ul><li>测试用例</li><li>测试问题</li></ul></li><li><p>语言基础 网络协议 基本应用框架 设计模式</p></li><li><p>主要技术点 技术组件</p></li><li><p>运行部署</p></li><li><p>断点调试 修改代码达到效果</p></li><li><p>关键模块 研究模块 做好脑图笔记输出</p></li><li><p>代码优化 功能优化 加入自己的想法</p></li></ul><p>做好技术输出</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim编辑器</title>
      <link href="/2022/08/11/vim/"/>
      <url>/2022/08/11/vim/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h2><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>输入i进入编辑模式 左下显示insert  按esc进入命令行模式</p><p>:q! 不保存直接退出</p><p>:wq保存退出 先保存在退出</p><p>k上j下h左l右</p><p>i插a填</p><p>o在光标下新增一行</p><p>O在光标上新增一行</p><p>G光标到文档底部</p><p>gg光标移动到最顶部</p><p>5j往下5行</p><p>设置set relationnumber 相对行号</p><p>yy复制整行 p粘贴</p><p>dd删除该行</p><p>.重复前次操作</p><p>u撤销操作</p><p>ctrl+r返回上一步</p><p>dw删除字符</p><p>cw删除字符并进入编辑模式</p><p>w跳动到每个词的开头</p><p>e跳动的每个词的结尾</p><p>b往回跳</p><p>&#x2F;关键字 搜索按回车光标定位到此</p><p>全局替换:%s&#x2F;旧字符&#x2F;新字符&#x2F;g</p><p>复制该单词yw</p><p>数字p粘贴几次</p><p>ci删除括号的内容</p><p>ctrl+q选择字符</p><p>ctrl+v选择整行</p><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
