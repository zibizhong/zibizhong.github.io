<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/11/01/Nginx/"/>
      <url>/2022/11/01/Nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、HTTP服务器"><a href="#一、HTTP服务器" class="headerlink" title="一、HTTP服务器"></a><strong>一、HTTP服务器</strong></h2><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，如果一个网站只是静态页面的话，那么就可以通过这种方式来实现部署。</p><p>1、 首先在文档根目录<code>Docroot(/usr/local/var/www)</code>下创建html目录, 然后在html中放一个test.html;</p><p>2、 配置<code>nginx.conf</code>中的server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user mengday staff;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        client_max_body_size 1024M;</span><br><span class="line"></span><br><span class="line">        # 默认location</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/local/var/www/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、访问测试</p><ul><li><code>http://localhost/</code> 指向<code>/usr/local/var/www/index.html</code>, index.html是安装nginx自带的html</li><li><code>http://localhost/test.html</code> 指向<code>/usr/local/var/www/html/test.html</code></li></ul><blockquote><p>注意：如果访问图片出现403 Forbidden错误，可能是因为nginx.conf 的第一行user配置不对，默认是#user nobody;是注释的，linux下改成user root; macos下改成user 用户名 所在组; 然后重新加载配置文件或者重启，再试一下就可以了， 用户名可以通过who am i 命令来查看。</p></blockquote><p>4、指令简介</p><ul><li>server : 用于定义服务，http中可以有多个server块</li><li>listen : 指定服务器侦听请求的IP地址和端口，如果省略地址，服务器将侦听所有地址，如果省略端口，则使用标准端口</li><li>server_name : 服务名称，用于配置域名</li><li>location : 用于配置映射路径uri对应的配置，一个server中可以有多个location, location后面跟一个uri,可以是一个正则表达式, &#x2F; 表示匹配任意路径, 当客户端访问的路径满足这个uri时就会执行location块里面的代码</li><li>root : 根路径，当访问<code>http://localhost/test.html</code>，“&#x2F;test.html”会匹配到”&#x2F;”uri, 找到root为<code>/usr/local/var/www/html</code>，用户访问的资源物理地址&#x3D;<code>root + uri = /usr/local/var/www/html + /test.html=/usr/local/var/www/html/test.html</code></li><li>index : 设置首页，当只访问<code>server_name</code>时后面不跟任何路径是不走root直接走index指令的；如果访问路径中没有指定具体的文件，则返回index设置的资源，如果访问<code>http://localhost/html/</code> 则默认返回index.html</li></ul><p>5、location uri正则表达式</p><ul><li><code>.</code> ：匹配除换行符以外的任意字符</li><li><code>?</code> ：重复0次或1次</li><li><code>+</code> ：重复1次或更多次</li><li><code>*</code> ：重复0次或更多次</li><li><code>\d</code> ：匹配数字</li><li><code>^</code> ：匹配字符串的开始</li><li><code>$</code> ：匹配字符串的结束</li><li><code>&#123;n&#125;</code> ：重复n次</li><li><code>&#123;n,&#125;</code> ：重复n次或更多次</li><li><code>[c]</code> ：匹配单个字符c</li><li><code>[a-z]</code> ：匹配a-z小写字母的任意一个</li><li><code>(a|b|c)</code> : 属线表示匹配任意一种情况，每种情况使用竖线分隔，一般使用小括号括括住，匹配符合a字符 或是b字符 或是c字符的字符串</li><li><code>\</code> 反斜杠：用于转义特殊字符</li></ul><p>小括号()之间匹配的内容，可以在后面通过<code>$1</code>来引用，<code>$2</code>表示的是前面第二个()里的内容。正则里面容易让人困惑的是<code>\</code>转义特殊字符。</p><h2 id="二、静态服务器"><a href="#二、静态服务器" class="headerlink" title="二、静态服务器"></a><strong>二、静态服务器</strong></h2><p>在公司中经常会遇到静态服务器，通常会提供一个上传的功能，其他应用如果需要静态资源就从该静态服务器中获取。</p><p>1、在<code>/usr/local/var/www</code> 下分别创建images和img目录，分别在每个目录下放一张<code>test.jpg</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        set $doc_root /usr/local/var/www;</span><br><span class="line"></span><br><span class="line">        # 默认location</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/local/var/www/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ^~ /images/ &#123;</span><br><span class="line">            root $doc_root;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location ~* \.(gif|jpg|jpeg|png|bmp|ico|swf|css|js)$ &#123;</span><br><span class="line">           root $doc_root/img;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义变量使用set指令，语法 set 变量名值;引用使用变量名值;引用使用变量名; 这里自定义了doc_root变量。</p><p>静态服务器location的映射一般有两种方式：</p><ul><li>使用路径，如 &#x2F;images&#x2F; 一般图片都会放在某个图片目录下，</li><li>使用后缀，如 .jpg、.png 等后缀匹配模式</li></ul><p>访问<code>http://localhost/test.jpg</code> 会映射到 <code>$doc_root/img</code></p><p>访问<code>http://localhost/images/test.jpg</code> 当同一个路径满足多个location时，优先匹配优先级高的location，由于<code>^~</code> 的优先级大于 <code>~</code>, 所以会走<code>/images/</code>对应的location</p><p>常见的location路径映射路径有以下几种：</p><ul><li><code>=</code>   进行普通字符精确匹配。也就是完全匹配。</li><li><code>^~</code>   前缀匹配。如果匹配成功，则不再匹配其他location。</li><li><code>~</code>   表示执行一个正则匹配，区分大小写</li><li><code>~*</code>   表示执行一个正则匹配，不区分大小写</li><li><code>/xxx/</code> 常规字符串路径匹配</li><li><code>/</code>   通用匹配，任何请求都会匹配到</li></ul><h4 id="location优先级"><a href="#location优先级" class="headerlink" title="location优先级"></a>location优先级</h4><p>当一个路径匹配多个location时究竟哪个location能匹配到时有优先级顺序的，而优先级的顺序于location值的表达式类型有关，和在配置文件中的先后顺序无关。相同类型的表达式，字符串长的会优先匹配。</p><p>以下是按优先级排列说明：</p><ul><li>等号类型（&#x3D;）的优先级最高。一旦匹配成功，则不再查找其他匹配项，停止搜索。</li><li><code>^~</code>类型表达式，不属于正则表达式。一旦匹配成功，则不再查找其他匹配项，停止搜索。</li><li>正则表达式类型（<code>~ ~*</code>）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li><li>常规字符串匹配类型。按前缀匹配。</li><li>&#x2F; 通用匹配，如果没有匹配到，就匹配通用的</li></ul><p>优先级搜索问题：不同类型的location映射决定是否继续向下搜索</p><ul><li>等号类型、<code>^~</code>类型：一旦匹配上就停止搜索了，不会再匹配其他location了</li><li>正则表达式类型(<code>~ ~*</code>）,常规字符串匹配类型<code>/xxx/</code> : 匹配到之后，还会继续搜索其他其它location，直到找到优先级最高的，或者找到第一种情况而停止搜索</li></ul><p>location优先级从高到底：</p><p>(<code>location =</code>) &gt; (<code>location 完整路径</code>) &gt; (<code>location ^~ 路径</code>) &gt; (<code>location ~,~* 正则顺序</code>) &gt; (<code>location 部分起始路径</code>) &gt; (<code>/</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">    # 精确匹配/，主机名后面不能带任何字符串 /</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">    # 匹配所有以 / 开头的请求。</span><br><span class="line">    # 但是如果有更长的同类型的表达式，则选择更长的表达式。</span><br><span class="line">    # 如果有正则表达式可以匹配，则优先匹配正则表达式。</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line">location /documents/ &#123;</span><br><span class="line">    # 匹配所有以 /documents/ 开头的请求，匹配符合以后，还要继续往下搜索。</span><br><span class="line">    # 但是如果有更长的同类型的表达式，则选择更长的表达式。</span><br><span class="line">    # 如果有正则表达式可以匹配，则优先匹配正则表达式。</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">    # 匹配所有以 /images/ 开头的表达式，如果匹配成功，则停止匹配查找，停止搜索。</span><br><span class="line">    # 所以，即便有符合的正则表达式location，也不会被使用</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">    # 匹配所有以 gif jpg jpeg结尾的请求。</span><br><span class="line">    # 但是 以 /images/开头的请求，将使用 Configuration D，D具有更高的优先级</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/ &#123;</span><br><span class="line">    # 字符匹配到 /images/，还会继续往下搜索</span><br><span class="line">    [ configuration F ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location = /test.htm &#123;</span><br><span class="line">    root   /usr/local/var/www/htm;</span><br><span class="line">    index  index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：location的优先级与location配置的位置无关</p><h2 id="三、反向代理"><a href="#三、反向代理" class="headerlink" title="三、反向代理"></a><strong>三、反向代理</strong></h2><p>反向代理应该是Nginx使用最多的功能了，反向代理(Reverse Proxy)方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p>简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。</p><p>反向代理通过<code>proxy_pass</code>指令来实现。</p><p>启动一个Java Web项目，端口号为8081</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8081;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">        # 设置用户ip地址</span><br><span class="line">         proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">         # 当请求服务器出错去寻找其他服务器</span><br><span class="line">         proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们访问localhost的时候，就相当于访问 <code>localhost:8081</code>了</p><h2 id="四、负载均衡"><a href="#四、负载均衡" class="headerlink" title="四、负载均衡"></a><strong>四、负载均衡</strong></h2><p>负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。而Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。</p><p>负载均衡通过upstream指令来实现。</p><h4 id="1-RR-round-robin-轮询-默认"><a href="#1-RR-round-robin-轮询-默认" class="headerlink" title="1. RR(round robin :轮询 默认)"></a>1. RR(round robin :轮询 默认)</h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，也就是说第一次请求分配到第一台服务器上，第二次请求分配到第二台服务器上，如果只有两台服务器，第三次请求继续分配到第一台上，这样循环轮询下去，也就是服务器接收请求的比例是 1:1， 如果后端服务器down掉，能自动剔除。轮询是默认配置，不需要太多的配置</p><p>同一个项目分别使用8081和8082端口启动项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream web_servers &#123;</span><br><span class="line">   server localhost:8081;</span><br><span class="line">   server localhost:8082;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://web_servers;</span><br><span class="line">        # 必须指定Header Host</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>访问地址仍然可以获得响应 <code>http://localhost/api/user/login?username=zhangsan&amp;password=111111</code> ，这种方式是轮询的</p><h4 id="2-权重"><a href="#2-权重" class="headerlink" title="2. 权重"></a>2. 权重</h4><p>指定轮询几率，weight和访问比率成正比, 也就是服务器接收请求的比例就是各自配置的weight的比例，用于后端服务器性能不均的情况,比如服务器性能差点就少接收点请求，服务器性能好点就多处理点请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">    server localhost:8081 weight=1;</span><br><span class="line">    server localhost:8082 weight=3;</span><br><span class="line">    server localhost:8083 weight=4 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例是4次请求只有一次被分配到8081上，其他3次分配到8082上。backup是指热备，只有当8081和8082都宕机的情况下才走8083</p><h4 id="3-ip-hash"><a href="#3-ip-hash" class="headerlink" title="3. ip_hash"></a>3. ip_hash</h4><p>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候(采用了session保存数据)，这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-fair-第三方"><a href="#4-fair-第三方" class="headerlink" title="4. fair(第三方)"></a>4. fair(第三方)</h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。这个配置是为了更快的给用户响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    fair;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-url-hash-第三方"><a href="#5-url-hash-第三方" class="headerlink" title="5. url_hash(第三方)"></a>5. url_hash(第三方)</h4><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。在upstream中加入hash语句，server语句中不能写入weight等其他的参数，<code>hash_method</code>是使用的hash算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">    hash_method crc32;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式,不过fair和url_hash需要安装第三方模块才能使用。</p><h2 id="五、动静分离"><a href="#五、动静分离" class="headerlink" title="五、动静分离"></a><strong>五、动静分离</strong></h2><p>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">upstream web_servers &#123;</span><br><span class="line">       server localhost:8081;</span><br><span class="line">       server localhost:8082;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    set $doc_root /usr/local/var/www;</span><br><span class="line"></span><br><span class="line">    location ~* \.(gif|jpg|jpeg|png|bmp|ico|swf|css|js)$ &#123;</span><br><span class="line">       root $doc_root/img;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://web_servers;</span><br><span class="line">        # 必须指定Header Host</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root $doc_root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a><strong>六、其他</strong></h2><h4 id="1-return指令"><a href="#1-return指令" class="headerlink" title="1.return指令"></a>1.return指令</h4><p>返回http状态码 和 可选的第二个参数可以是重定向的URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /permanently/moved/url &#123;</span><br><span class="line">    return 301 http://www.example.com/moved/here;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-rewrite指令"><a href="#2-rewrite指令" class="headerlink" title="2. rewrite指令"></a>2. rewrite指令</h4><p>重写URI请求 rewrite，通过使用rewrite指令在请求处理期间多次修改请求URI，该指令具有一个可选参数和两个必需参数。</p><p>第一个(必需)参数是请求URI必须匹配的正则表达式。</p><p>第二个参数是用于替换匹配URI的URI。</p><p>可选的第三个参数是可以停止进一步重写指令的处理或发送重定向(代码301或302)的标志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /users/ &#123;</span><br><span class="line">    rewrite ^/users/(.*)$ /show?user=$1 break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-error-page指令"><a href="#3-error-page指令" class="headerlink" title="3. error_page指令"></a>3. error_page指令</h4><p>使用error_page指令，您可以配置NGINX返回自定义页面以及错误代码，替换响应中的其他错误代码，或将浏览器重定向到其他URI。在以下示例中，<code>error_page</code>指令指定要返回404页面错误代码的页面(&#x2F;404.html)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page 404 /404.html;</span><br></pre></td></tr></table></figure><h4 id="4-日志"><a href="#4-日志" class="headerlink" title="4. 日志"></a>4. 日志</h4><p>访问日志：需要开启压缩 gzip on; 否则不生成日志文件，打开<code>log_format</code>、<code>access_log</code>注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">access_log  /usr/local/etc/nginx/logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">gzip  on;</span><br></pre></td></tr></table></figure><h4 id="5-deny-指令"><a href="#5-deny-指令" class="headerlink" title="5. deny 指令"></a>5. deny 指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 禁止访问某个目录</span><br><span class="line">location ~* \.(txt|doc)$&#123;</span><br><span class="line">    root $doc_root;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-内置变量"><a href="#6-内置变量" class="headerlink" title="6. 内置变量"></a>6. 内置变量</h4><p>nginx的配置文件中可以使用的内置变量以美元符<code>$</code>开始，也有人叫全局变量。其中，部分预定义的变量的值是可以改变的。</p><ul><li><code>$args</code> ：<code>#</code>这个变量等于请求行中的参数，同<code>$query_string</code></li><li><code>$content_length</code> ：请求头中的Content-length字段。</li><li><code>$content_type</code> ：请求头中的Content-Type字段。</li><li><code>$document_root</code> ：当前请求在root指令中指定的值。</li><li><code>$host</code> ：请求主机头字段，否则为服务器名称。</li><li><code>$http_user_agent</code> ：客户端agent信息</li><li><code>$http_cookie</code> ：客户端cookie信息</li><li><code>$limit_rate</code> ：这个变量可以限制连接速率。</li><li><code>$request_method</code> ：客户端请求的动作，通常为GET或POST。</li><li><code>$remote_addr</code> ：客户端的IP地址。</li><li><code>$remote_port</code> ：客户端的端口。</li><li><code>$remote_user</code> ：已经经过Auth Basic Module验证的用户名。</li><li><code>$request_filename</code> ：当前请求的文件路径，由root或alias指令与URI请求生成。</li><li><code>$scheme</code> ：HTTP方法（如http，https）。</li><li><code>$server_protocol</code> ：请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1。</li><li><code>$server_addr</code> ：服务器地址，在完成一次系统调用后可以确定这个值。</li><li><code>$server_name</code> ：服务器名称。</li><li><code>$server_port</code> ：请求到达服务器的端口号。</li><li><code>$request_uri</code> ：包含请求参数的原始URI，不包含主机名，如：”<code>/foo/bar.php?arg=baz</code>”。</li><li><code>$uri</code> ：不带请求参数的当前URI，<code>$uri</code>不包含主机名，如”<code>/foo/bar.html</code>”。</li><li><code>$document_uri</code> ：与<code>$uri</code>相同</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面试</title>
      <link href="/2022/10/24/Java%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/10/24/Java%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基础问题"><a href="#基础问题" class="headerlink" title="基础问题"></a>基础问题</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><blockquote><p>long类型一定要在数值后面加上L否则将当整型</p><p>char a&#x3D;‘h’ ,char单引号 字符串双引号</p></blockquote><blockquote><p>成员变量包装类型不赋值为null,基本类型有默认值且不是null</p></blockquote><h3 id="包装类缓存机制"><a href="#包装类缓存机制" class="headerlink" title="包装类缓存机制"></a>包装类缓存机制</h3><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code>四种包装类默认创建了数值为[-128,127]的相应类型的缓存,<code>Character</code>创建了数值在[0,127]范围的缓存,<code>Boolean</code>直接返回true或false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Float</span> <span class="variable">i11</span> <span class="operator">=</span> <span class="number">333f</span>;</span><br><span class="line"><span class="type">Float</span> <span class="variable">i22</span> <span class="operator">=</span> <span class="number">333f</span>;</span><br><span class="line">System.out.println(i11 == i22);<span class="comment">// 输出 false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Double</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">40</span>);</span><br><span class="line">System.out.println(i1==i2);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">40</span>;会发生装箱等价于Integer i1=Integer.valueOf(<span class="number">40</span>),i1使用的是缓存中的数据,<span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">40</span>)会创建<span class="number">1</span>新的对象所以是<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024173657066.png" alt="image-20221024173657066"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024174542463.png" alt="image-20221024174542463"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024174855786.png" alt="image-20221024174855786"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024175410347.png" alt="image-20221024175410347"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024175527951.png" alt="image-20221024175527951"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024175621074.png" alt="image-20221024175621074"></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024180751891.png" alt="image-20221024180751891"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024180836238.png" alt="image-20221024180836238"></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024181321854.png" alt="image-20221024181321854"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024181357236.png" alt="image-20221024181357236"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024181453364.png" alt="image-20221024181453364"></p><h1 id="重要知识"><a href="#重要知识" class="headerlink" title="重要知识"></a>重要知识</h1><h2 id="为什么只有值传递"><a href="#为什么只有值传递" class="headerlink" title="为什么只有值传递"></a>为什么只有值传递</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025143950618.png" alt="image-20221025143950618"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025144356852.png" alt="image-20221025144356852"></p><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025144453486.png" alt="image-20221025144453486"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025144550972.png" alt="image-20221025144550972"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025144747798.png" alt="image-20221025144747798"></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025154114250.png" alt="image-20221025154114250"></p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025164124290.png" alt="image-20221025164124290"></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p><strong>1.定义发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.创建代理类并同样实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsProxy</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmsProxy</span><span class="params">(SmsService smsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.smsService = smsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method send()&quot;</span>);</span><br><span class="line">        smsService.send(message);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method send()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>();</span><br><span class="line">        <span class="type">SmsProxy</span> <span class="variable">smsProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsProxy</span>(smsService);</span><br><span class="line">        smsProxy.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before method send()</span><br><span class="line">send message:java</span><br><span class="line">after method send()</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p><strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong></p><p><code>Proxy</code> 类中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                      InvocationHandler h)</span></span><br><span class="line">    <span class="keyword">throws</span> IllegalArgumentException</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法一共有 3 个参数：</p><ol><li><strong>loader</strong> :类加载器，用于加载代理对象。</li><li><strong>interfaces</strong> : 被代理类实现的一些接口；</li><li><strong>h</strong> : 实现了 <code>InvocationHandler</code> 接口的对象；</li></ol><p>要实现动态代理的话，还必须需要实现<code>InvocationHandler</code> 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>invoke()</code> 方法有下面三个参数：</p><ol><li><strong>proxy</strong> :动态生成的代理类</li><li><strong>method</strong> : 与代理类对象调用的方法相对应</li><li><strong>args</strong> : 当前 method 方法的参数</li></ol><p>也就是说：<strong>你通过<code>Proxy</code> 类的 <code>newProxyInstance()</code> 创建的代理对象在调用方法的时候，实际会调用到实现<code>InvocationHandler</code> 接口的类的 <code>invoke()</code>方法。</strong> 你可以在 <code>invoke()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情</p><ul><li>定义一个接口及其实现类</li><li>自定义 <code>InvocationHandler</code> 并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑</li><li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象</li></ul><ol><li><p>创建service及其实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建自定义InvocationHandler实现InvocationHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//调用方法前添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建获取代理对象的工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">//目标类的类加载</span></span><br><span class="line">                target.getClass().getInterfaces(),<span class="comment">//代理需要实现的接口</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DebugInvocationHandler</span>(target)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>());</span><br><span class="line">smsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before method send</span><br><span class="line">send message:java</span><br><span class="line">after method send</span><br></pre></td></tr></table></figure></li></ol><h4 id="CGLB动态代理机制"><a href="#CGLB动态代理机制" class="headerlink" title="CGLB动态代理机制"></a>CGLB动态代理机制</h4><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025173443346.png" alt="image-20221025173443346"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MethodInterceptor</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Callback</span>&#123;</span><br><span class="line">    <span class="comment">// 拦截被代理类中的方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>obj 动态生成的代理对象</li><li>method 被拦截的对象(需要增强的方法).</li><li>args 方法入参</li><li>proxy 调用原始方法</li></ol><p>你可以通过 <code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 <code>MethodInterceptor</code> 中的 <code>intercept</code> 方法</p><p>实现步骤</p><ol><li>定义一个类；</li><li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li><li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li></ol><p>示例</p><ol><li><p>导入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>实现一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliSmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义 <code>MethodInterceptor</code>（方法拦截器）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 自定义MethodInterceptor</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           代理对象（增强的对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args        方法入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 用于调用原始方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建动态代理增强类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 设置类加载器</span></span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        <span class="comment">// 设置被代理类</span></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        <span class="comment">// 设置方法拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">DebugMethodInterceptor</span>());</span><br><span class="line">        <span class="comment">// 创建代理类</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AliSmsService</span> <span class="variable">aliSmsService</span> <span class="operator">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class="line">aliSmsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025174159245.png" alt="image-20221025174159245"></p></li></ol><h2 id="SPI机制详解"><a href="#SPI机制详解" class="headerlink" title="SPI机制详解"></a>SPI机制详解</h2><blockquote><p>SPI即Service Provider InterFace(服务提供者的接口):专门提供给框架功能的开发者去使用的一个接口</p><p>SPI将服务接口和具体的服务实现分离开,将服务调用方法和服务实现者解耦,能够提升程序的扩展性可维护性修改或者替代服务实现并不需要修改调用方法</p></blockquote><h3 id="SPI和API的区别"><a href="#SPI和API的区别" class="headerlink" title="SPI和API的区别"></a>SPI和API的区别</h3><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101161812646.png" alt="image-20221101161812646"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101161841398.png" alt="image-20221101161841398"></p><blockquote><p>一般模块之间都是通过通过接口进行通讯，那我们在服务调用方和服务实现方（也称服务提供者）之间引入一个“接口”。</p><p>当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是 API ，这种接口和实现都是放在实现方的。</p><p>当接口存在于调用方这边时，就是 SPI ，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。</p><p>举个通俗易懂的例子：公司 H 是一家科技公司，新设计了一款芯片，然后现在需要量产了，而市面上有好几家芯片制造业公司，这个时候，只要 H 公司指定好了这芯片生产的标准（定义好了接口标准），那么这些合作的芯片公司（服务提供者）就按照标准交付自家特色的芯片（提供不同方案的实现，但是给出来的结果是一样的）</p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>新建 <code>Logger</code> 接口，这个就是 SPI ， 服务提供者接口，后面的服务提供者就要针对这个接口进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String msg)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LoggerService</code> 类，这个主要是为服务使用者（调用方）提供特定功能的。这个类也是实现 Java SPI 机制的关键所在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">LoggerService</span> <span class="variable">SERVICE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggerService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Logger&gt; loggerList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LoggerService</span><span class="params">()</span> &#123;</span><br><span class="line">        ServiceLoader&lt;Logger&gt; loader = ServiceLoader.load(Logger.class);</span><br><span class="line">        List&lt;Logger&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Logger log : loader) &#123;</span><br><span class="line">            list.add(log);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// LoggerList 是所有 ServiceProvider</span></span><br><span class="line">        loggerList = list;</span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Logger 只取一个</span></span><br><span class="line">            logger = list.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoggerService <span class="title function_">getService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SERVICE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;info 中没有发现 Logger 服务提供者&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loggerList.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;debug 中没有发现 Logger 服务提供者&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        loggerList.forEach(log -&gt; log.debug(msg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 <code>Main</code> 类（服务使用者，调用方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LoggerService</span> <span class="variable">service</span> <span class="operator">=</span> LoggerService.getService();</span><br><span class="line"></span><br><span class="line">        service.info(<span class="string">&quot;Hello SPI&quot;</span>);</span><br><span class="line">        service.debug(<span class="string">&quot;Hello SPI&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101221226941.png" alt="image-20221101221226941"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025221743278.png" alt="image-20221025221743278"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221025221813582.png" alt="image-20221025221813582"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101221357728.png" alt="image-20221101221357728"></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>默认无参构造大小为0</p><blockquote><p>add方法扩容规则</p></blockquote><ul><li>第一次扩容创建长度为10的扩容数组(0~10)</li><li>第二次扩容的大小为上一次右移一位+原容量(N&gt;&gt;1+N)</li></ul><blockquote><p>addAll扩容规则</p></blockquote><ul><li>第一次扩容会在需要元素个数的较大者选择扩容数量</li></ul><h2 id="FaillFast-FaillSafe"><a href="#FaillFast-FaillSafe" class="headerlink" title="FaillFast FaillSafe"></a>FaillFast FaillSafe</h2><blockquote><p>FaillFast不允许修改数据 立即抛出异常 (ArrayList)</p><p>FaillSafe 允许修改数据 (CopyOnWriteArrayList)</p></blockquote><h2 id="LinkedList和ArrayList"><a href="#LinkedList和ArrayList" class="headerlink" title="LinkedList和ArrayList"></a>LinkedList和ArrayList</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221024110015768.png" alt="image-20221024110015768"></p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>1.7(数组+链表)</p><p>1.8(链表|红黑树)</p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101221504229.png" alt="image-20221101221504229"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101221516971.png" alt="image-20221101221516971"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101233158304.png" alt="image-20221101233158304"></p><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101233244109.png" alt="image-20221101233244109"></p><h2 id="Comparator定制排序"><a href="#Comparator定制排序" class="headerlink" title="Comparator定制排序"></a>Comparator定制排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparatorSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add((-<span class="number">1</span>));</span><br><span class="line">        arrayList.add(<span class="number">3</span>);</span><br><span class="line">        arrayList.add(<span class="number">3</span>);</span><br><span class="line">        arrayList.add(-<span class="number">5</span>);</span><br><span class="line">        arrayList.add(<span class="number">7</span>);</span><br><span class="line">        arrayList.add(<span class="number">4</span>);</span><br><span class="line">        arrayList.add(-<span class="number">9</span>);</span><br><span class="line">        arrayList.add(-<span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;原始数组:&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        Collections.reverse(arrayList);</span><br><span class="line">        System.out.println(<span class="string">&quot;Collections.reverse(arrayList):&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">// void sort(List list),按自然排序的升序排序</span></span><br><span class="line">        Collections.sort(arrayList);</span><br><span class="line">        System.out.println(<span class="string">&quot;Collections.sort(arrayList):&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//定制排序</span></span><br><span class="line">        Collections.sort(arrayList, (o1, o2) -&gt; o2.compareTo(o1));</span><br><span class="line">        System.out.println(<span class="string">&quot;定制排序后&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101234502841.png" alt="image-20221101234502841"></p><h2 id="重写compareTo方法实现按年龄排序"><a href="#重写compareTo方法实现按年龄排序" class="headerlink" title="重写compareTo方法实现按年龄排序"></a>重写compareTo方法实现按年龄排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age&gt;o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age&lt;o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashSet、LinkedHashSet-和-TreeSet-三者的异同"><a href="#HashSet、LinkedHashSet-和-TreeSet-三者的异同" class="headerlink" title="HashSet、LinkedHashSet 和 TreeSet 三者的异同"></a>HashSet、LinkedHashSet 和 TreeSet 三者的异同</h2><p><img src="/2022/10/24/Java%E9%9D%A2%E8%AF%95/image-20221101234938643.png" alt="image-20221101234938643"></p><h2 id="Collection-子接口之-Queue"><a href="#Collection-子接口之-Queue" class="headerlink" title="Collection 子接口之 Queue"></a>Collection 子接口之 Queue</h2><h3 id="Queue-与-Deque-的区别"><a href="#Queue-与-Deque-的区别" class="headerlink" title="Queue 与 Deque 的区别"></a>Queue 与 Deque 的区别</h3><p><code>Queue</code> 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 <strong>先进先出（FIFO）</strong> 规则。</p><p><code>Queue</code> 扩展了 <code>Collection</code> 的接口，根据 <strong>因为容量问题而导致操作失败后处理方式的不同</strong> 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。</p><table><thead><tr><th><code>Queue</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr><td>插入队尾</td><td>add(E e)</td><td>offer(E e)</td></tr><tr><td>删除队首</td><td>remove()</td><td>poll()</td></tr><tr><td>查询队首元素</td><td>element()</td><td>peek()</td></tr></tbody></table><p><code>Deque</code> 是双端队列，在队列的两端均可以插入或删除元素。</p><p><code>Deque</code> 扩展了 <code>Queue</code> 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：</p><table><thead><tr><th><code>Deque</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr><td>插入队首</td><td>addFirst(E e)</td><td>offerFirst(E e)</td></tr><tr><td>插入队尾</td><td>addLast(E e)</td><td>offerLast(E e)</td></tr><tr><td>删除队首</td><td>removeFirst()</td><td>pollFirst()</td></tr><tr><td>删除队尾</td><td>removeLast()</td><td>pollLast()</td></tr><tr><td>查询队首元素</td><td>getFirst()</td><td>peekFirst()</td></tr><tr><td>查询队尾元素</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p>事实上，<code>Deque</code> 还提供有 <code>push()</code> 和 <code>pop()</code> 等其他方法，可用于模拟栈</p><h3 id="ArrayDeque和LinkedList-的区别"><a href="#ArrayDeque和LinkedList-的区别" class="headerlink" title="ArrayDeque和LinkedList 的区别"></a>ArrayDeque和LinkedList 的区别</h3><p><code>ArrayDeque</code> 和 <code>LinkedList</code> 都实现了 <code>Deque</code> 接口，两者都具有队列的功能，但两者有什么区别呢？</p><ul><li><code>ArrayDeque</code> 是基于可变长的数组和双指针来实现，而 <code>LinkedList</code> 则通过链表来实现。</li><li><code>ArrayDeque</code> 不支持存储 <code>NULL</code> 数据，但 <code>LinkedList</code> 支持。</li><li><code>ArrayDeque</code> 是在 JDK1.6 才被引入的，而<code>LinkedList</code> 早在 JDK1.2 时就已经存在。</li><li><code>ArrayDeque</code> 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code> 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。</li></ul><p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比 <code>LinkedList</code> 更好。此外，<code>ArrayDeque</code> 也可以用于实现栈。</p><p><code>PriorityQueue</code> 是在 JDK1.5 中被引入的, 其与 <code>Queue</code> 的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。</p><p>这里列举其相关的一些要点：</p><ul><li><code>PriorityQueue</code> 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据</li><li><code>PriorityQueue</code> 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。</li><li><code>PriorityQueue</code> 是非线程安全的，且不支持存储 <code>NULL</code> 和 <code>non-comparable</code> 的对象。</li><li><code>PriorityQueue</code> 默认是小顶堆，但可以接收一个 <code>Comparator</code> 作为构造参数，从而来自定义元素优先级的先后。</li></ul><p><code>PriorityQueue</code> 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第K大的数、带权图的遍历等，所以需要会熟练使用才行。</p><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><h3 id="HashMap和HashTable的区别"><a href="#HashMap和HashTable的区别" class="headerlink" title="HashMap和HashTable的区别"></a>HashMap和HashTable的区别</h3><ul><li><strong>线程是否安全：</strong> <code>HashMap</code> 是非线程安全的，<code>Hashtable</code> 是线程安全的,因为 <code>Hashtable</code> 内部的方法基本都经过<code>synchronized</code> 修饰。（如果你要保证线程安全的话就使用 <code>ConcurrentHashMap</code> 吧！）；</li><li><strong>效率：</strong> 因为线程安全的问题，<code>HashMap</code> 要比 <code>Hashtable</code> 效率高一点。另外，<code>Hashtable</code> 基本被淘汰，不要在代码中使用它；</li><li><strong>对 Null key 和 Null value 的支持：</strong> <code>HashMap</code> 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 <code>NullPointerException</code>。</li><li><strong>初始容量大小和每次扩充容量大小的不同 ：</strong> ① 创建时如果不指定容量初始值，<code>Hashtable</code> 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。<code>HashMap</code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 <code>Hashtable</code> 会直接使用你给定的大小，而 <code>HashMap</code> 会将其扩充为 2 的幂次方大小（<code>HashMap</code> 中的<code>tableSizeFor()</code>方法保证，下面给出了源代码）。也就是说 <code>HashMap</code> 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。</li><li><strong>底层数据结构：</strong> JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间（后文中我会结合源码对这一过程进行分析）。<code>Hashtable</code> 没有这样的机制。</li></ul><p><code>HashMap</code>中带有初始容量的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="comment">//initialCapacity 初始化参数  加载阈值</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 判断初始化参数是否合法 抛出初始化参数异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">    <span class="comment">// MAXIMUM_CAPACITY= 1073741824</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="comment">//初始化参数大于最大容积</span></span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="comment">// 判断加载阈值 的合法性</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">         <span class="comment">//构造函数未指定loadFactor时 默认为 0.75</span></span><br><span class="line">         <span class="comment">// DEFAULT_LOAD_FACTOR </span></span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="comment">// |转换位二进制 两个都为1则为1</span></span><br><span class="line">    <span class="comment">// &gt;&gt;&gt;无符号右移</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>八股文</title>
      <link href="/2022/10/24/%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2022/10/24/%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><blockquote><ol><li><p>假定数组已经有序</p></li><li><p>确定左边界L和右边界R,循环二分查找(3,4步)</p></li><li><p>获取中间索引$mid&#x3D;L+\frac{R-L}{2}$</p></li><li><p>中间索引的值A[mid]与搜索值T进行比较</p><ol><li>A[M]&#x3D;&#x3D;T 直接返回中间索引</li><li>A[M]&gt;T,中间值右侧的其他元素都大于T,右边无需比较,M-1设置为右边界</li><li>A[M]&lt;T,中间值左侧的其他元素都小于T,左边无需比较,M+1设置为左边界</li></ol></li><li><blockquote><p>L&gt;R时表示没有找到</p></blockquote></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="type">int</span> L=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> R=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (L&lt;=R)&#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mid=(L+R)/2; 溢出</span></span><br><span class="line"><span class="comment">            mid=L/2+R/2=L+(-L/2+R/2)=L+(R-L)/2</span></span><br><span class="line"><span class="comment">            L+((R-L)&gt;&gt;2)</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mid=L+(R-L)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid]==value)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid]&lt;value)&#123;</span><br><span class="line">                L=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid]&gt;value)&#123;</span><br><span class="line">                R=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> swapped=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>-j; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swapped=<span class="literal">true</span>;</span><br><span class="line">                    swap(arr, i, i + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!swapped)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>最优解</p><p>记录最后一次交换的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort02</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">LastSwappedIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - j; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    LastSwappedIndex = i;</span><br><span class="line">                    swap(arr, i, i + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                N = LastSwappedIndex;</span><br><span class="line">                <span class="keyword">if</span> (N == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel</title>
      <link href="/2022/10/15/Sentinel/"/>
      <url>/2022/10/15/Sentinel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>java -jar sentinel.jar</p><p>访问127.0.0.1:8080默认密码sentinel</p></blockquote><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p><img src="/2022/10/15/Sentinel/image-20221015141957808.png" alt="image-20221015141957808"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法分析(Java)</title>
      <link href="/2022/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-Java/"/>
      <url>/2022/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-Java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="表、栈和队列"><a href="#表、栈和队列" class="headerlink" title="表、栈和队列"></a>表、栈和队列</h1><h2 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h2><p><strong>抽象数据类型</strong>(abstract data type,ADT)是带有一组操作的一些对象的集合,其中包括了添加(add)、删除(remove)以及包含(contain),并(union)和查找(find)</p><h2 id="表ADT"><a href="#表ADT" class="headerlink" title="表ADT"></a>表ADT</h2><p>我们将处理形如$A_0,A_1,A_2,\cdots,A_{N-1}$的一般的表,我们称表的大小为$N$,将大小为0的表称为<strong>空表</strong>(empty list)</p><p>对于除空表外的任何表,我们说$A_i$后继$A_{i-1}$(或继$A_{i-1}$之后,$i&lt;N$)并称$A_{i-1}$前驱$A_i(i&gt;0)$表中的第一个元素是$A_0$,表的最后一个元素是$A_{N-1}$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/09/27/ES6/"/>
      <url>/2022/09/27/ES6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2022/09/19/SpringSecurity/"/>
      <url>/2022/09/19/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Security 是一种高度自定义的安全框架，利用（基于）SpringIOC&#x2F;DI和AOP功能，为系统提供了声明式安全访问控制功能，<strong>「减少了为系统安全而编写大量重复代码的工作」</strong> 。</p><p><img src="/2022/09/19/SpringSecurity/640.png" alt="img"></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入spring-boot-starter-security启动器后，Spring Security已经生效，默认拦截全部请求，如果用户没有登录，跳转到内置登录页面。</p><p>在浏览器输入：<code>http://localhost:8080/</code> 进入Spring Security内置登录页面</p><p>用户名：user。</p><p>密码：项目启动，打印在控制台中。</p></li><li><p>配置自定义登录页面</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917143636382.png" alt="image-20220917143636382"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类图由三部分组成</p><ul><li><p>类名</p></li><li><p>类的属性 属性的表现方式 可见性 名称:类型[ &#x3D; 默认值]</p><p>​其中可见性表示该类对于类外的元素是否可见,包含公共私有受保护三种分别用+,-,#表示</p><p>​名称表示属性名,用一个字符串表示</p><p>​类型表示属性的数据类型,可以是基本数据类型,也可以是用户自定义类型</p><p>​默认值是一个可选,即属性的初始值</p></li><li><p>类的操作:操作是类的任意一个实例对象都可以使用的行为,是类的成员方法</p><p>​可见性 名称{参数列表}[ : 返回类型]</p></li></ul></blockquote><h2 id="类和类的关系"><a href="#类和类的关系" class="headerlink" title="类和类的关系"></a>类和类的关系</h2><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><blockquote><p>关联(Association)关系是类与类之间常用的一种关系,它是一种结构化关系,用于表示一类对象与另一类对象之间有联系,在UML类图中用实线连接有关联关系的对象所对应的类</p></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917144358315.png" alt="image-20220917144358315"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginForm</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JButton loginButton; <span class="comment">//定义为成员变量</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButton</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>双向关联</p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917144538640.png" alt="image-20220917144538640"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product[] products;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>单向关联</p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917144706429.png" alt="image-20220917144706429"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>自关联</p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917144828813.png" alt="image-20220917144828813"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node subNode;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>多重关联</p><table><thead><tr><th>表示方式</th><th>多重性说明</th></tr></thead><tbody><tr><td>1..1</td><td>表示另一个类的一个对象只与该类的一个对象有关系</td></tr><tr><td>0.. *</td><td>表示另一个类的一个对象与该类的零个或多个对象有关系</td></tr><tr><td>1.. *</td><td>表示另一个类的一个对象与该类的一个或多个对象有关系</td></tr><tr><td>0.. 1</td><td>表示另一个类的一个对象没有或只与该类的一个对象有关系</td></tr><tr><td>m.. n</td><td>表示另一个类的一个对象与该类最少m,最多n个对象有关系</td></tr></tbody></table><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917145311450.png" alt="image-20220917145311450"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Form</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button[] buttons;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Button</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><blockquote><p>聚合(Aggregation)关系表示整体与部分的关系，在聚合关系中,成员对象是整体对象的一部分,但成员对象可以脱离整体对象独立存在,在UML中聚合关系使用带空心菱形的直线表示</p></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917150021642.png" alt="image-20220917150021642"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(Engine engine)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设值注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEngine</span><span class="params">(Engine engine)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Engine</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h3><blockquote><p>组合(Composition)关系也表示类之间整体和部分的关系,但是在组合关系中整体对象可以控制成员对象的生命周期,一旦整体对象不存在,成员对象也不存在,在UML中组合关系用带实心菱形的直线表示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Head</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mouth mouth;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Head</span><span class="params">()</span>&#123;</span><br><span class="line">        mouth = <span class="keyword">new</span> <span class="title class_">Mouth</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouth</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><blockquote><p>依赖(Dependency)关系是一种使用关系,特定事物的改变有可能会影响到使用该事物的其他事物,在表示一个事务使用另一个事物时使用依赖关系.在UML中依赖关系用带箭头虚线表示</p></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917151516539.png" alt="image-20220917151516539"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(Car car)</span>&#123;</span><br><span class="line">        car.move();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><blockquote><p>泛化(Generalization)关系也就是继承关系,用于描述父类和子类之间的关系,父类又称为基类,子类称为派生类,在UML中使用空心三角形的直线来表示</p></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917151818467.png" alt="image-20220917151818467"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String studentNo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String teachNo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口与实现关系"><a href="#接口与实现关系" class="headerlink" title="接口与实现关系"></a>接口与实现关系</h3><blockquote><p>UML中用与类的表示方法表示接口</p><p>接口之间也可以有类之间的关系,但是接口和类之间还存在一种实现(Realization)关系,类实现了接口,类中的操作实现了接口中所有声明的操作,在UML中,类与接口之间的实现关系使用空心三角形的虚线来表示</p></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917152404732.png" alt="image-20220917152404732"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ship</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>**单一职责原则(Single Responsibility Principle,SRP)**一个类只负责一个功能领域的相应职责</p><p>单一职责原则的核心思想是:一个类不能太累,在软件系统中,一个类承担的职责越多,它被复用的可能性就越小,而且一个类承担的职责过多,就相当于将这些职责耦合在一起,当一个职责变化时,可能会影响到其他职责的运作,因此要将这些职责进行分离,将不同的职责封装在不同的类中,即将不同的变化原因封装在不同的类中,如果多个职责总是同时发生改变则可将他们封装在同一类中</p><p>单一职责原则是实现高内聚,低耦合的知道方针</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917153504702.png" alt="image-20220917153504702"></p><blockquote><p>CustomerDataChart类承担了太多职责很难实现复用使用单一职责进行拆分</p></blockquote><ol><li>DBUtil:负责连接数据库,包含getConnection()</li><li>CustomerDAO:负责操作数据库中的Customer表</li><li>CustomerDataChart:负责图表的生成</li></ol><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917153744271.png" alt="image-20220917153744271"></p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p><strong>开闭原则(Open-Closed Principle,OCP)</strong>:一个软件实体应当对扩展开放,对修改关闭.即软件实体应尽量在不修改原有代码的情况下进行扩展</p><blockquote><p>任何软件都需要面临一个很重要的问题,即需求会随时间的推移而发生改变,当软件系统需要面对新的需求时,应该尽量保证系统的设计框架是稳定的,如果一个软件设计符合开闭原则,那么可以非常复变的对系统进行扩展,而且扩展时无须修改现有代码,使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性</p></blockquote><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><blockquote><p>如果对每一个类型为S的对象o1,都有类型为T的对象o2,使得以T定义的所有程序P在所有的对象o1都代换成o2时,程序P的行为没有发生变化,那么类型S是类型T的子类型</p></blockquote><p><strong>里氏代换原则(Liskov Substitution Principle,LSP)</strong>:所有引用基类的地方都必须能透明地使用其子类的对象</p><blockquote><p>里氏代换原则表明在软件中将一个基类对象替换成它的子类对象,程序将不会产生任何错误和异常,反之不成立,如果一个软件实体使用的是一个子类对象的话,那么它不一定能够使用基类对象</p></blockquote><blockquote><p>运用里氏原则时,应该将父类设计为抽象类或者接口,让子类继承父类或实现接口,并实现在父类中声明的方法,运行时,子类实例替换父类实例,可以很方便的扩展系统的功能,无需修改原有子类的代码.增加新的功能可以通过增加一个新的子类来实现</p></blockquote><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p><strong>依赖倒转原则(Dependency Inversion Principle,DIP)</strong>:抽象不应该依赖于细节,细节应该依赖于抽象.针对接口编程,而不是针对实现编程</p><blockquote><p>依赖倒转原则要求在程序代码中传递参数时或在关联关系中,尽量引用层次高的抽象层类,即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明,以及数据类型的转换等,而不要具体的类来做这些事情。为了确保该原则的应用,一个具体类应当实现接口或抽象类中声明过的方法,而不要给出多余的方法,否则将无法调用到在子类中新加的方法</p></blockquote><blockquote><p>在实现依赖倒转原则时,需要针对抽象层编程,而将具体类的对象通过<strong>依赖注入(Dependency Injection,DI)<strong>的方法注入到其他对象中,<strong>依赖注入</strong>是指当一个对象要与其他对象发生依赖关系时,通过抽象来注入所依赖的对象,常用的注入方式有：</strong>构造注入、设值注入(Setter注入)和接口注入</strong>,构造注入是通过构造函数来传入具体类的对象,设值注入是指通过Setter方法来传入具体类的对象,而接口注入是指通过在实现在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的事抽象类型,在运行时再传入具体类型的对象,由子类对象来覆盖父类对象</p></blockquote><h3 id="开闭、里氏、依赖示例"><a href="#开闭、里氏、依赖示例" class="headerlink" title="开闭、里氏、依赖示例"></a>开闭、里氏、依赖示例</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917231027083.png" alt="image-20220917231027083"></p><blockquote><p>引入抽象数据转换类来解决该问题,引入抽象转换类DataConvertor,CustomerDAO针对抽象类DataConvertor编程,而将具体数据类型类名存储在配置文件中,符合依赖倒转原则,根据里氏代换原则,程序运行时,具体数据转换类对象将替换为DataConvertor类型的对象,程序不会产生任何异常,更换具体数据类型时无需修改源代码,只需修改配置文件,如果需要加入新的具体数据转换类，只需将新增数据转换类作为DataConvertor的子类并修改配置文件即可,源代码无需做任何修改满足开闭原则</p></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917232523165.png" alt="image-20220917232523165"></p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p><strong>接口隔离原则(Interface Segregation Principle,ISP)</strong>:使用多个专门的接口,而不使用单一的总接口,即客户端不应该依赖那些不需要用到的接口</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917233108779.png" alt="image-20220917233108779"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220917233428634.png" alt="image-20220917233428634"></p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p><strong>合成复用原则(Composite Reuse Principle,CRP)</strong>:尽量使用对象组合,而不是继承来达到复用目的</p><blockquote><p>合成复用原则就是在一个新的对象通过关联关系来使用一些已有的对象,使之称为新对象的一部分,新对象通过委派调用已有对象的方法来达到复用功能的目的</p></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918002610462.png" alt="image-20220918002610462"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918003115234.png" alt="image-20220918003115234"></p><blockquote><p>CustomerDAO和DBUtil之间的关系由继承关系变为关联关系,采用依赖注入的方式将DBUtil对象注入到CutomerDAO中,可以使用构造注入也可以使用Setter注入。如果需要对DBUtil的功能进行扩展,可以通过其子类来实现,如通过子类OracleDButil来连接Oracle数据库,由于CustomerDAO针对DBUtil编程,根据里氏代换原则,DBUtil子类的对象可以覆盖DBUtil对象,只需在CustomerDAO中注入子类对象,即可使用子类所扩展的方法</p></blockquote><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p><strong>迪米特法则(Law of Demeter,LoD)</strong>:一个软件实体应当尽可能少的与其他实体发生相互作用</p><blockquote><ol><li>当前对象本身this</li><li>以参数形式传入到当前对象方法中的对象</li><li>当前对象的成员对象</li><li>如果当前对象的成员对象是一个集合,那么集合中的元素也都是朋友</li><li>当前对象所创建的对象</li></ol></blockquote><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918005754646.png" alt="image-20220918005754646"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918005808726.png" alt="image-20220918005808726"></p><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>对于一个软件系统中的某些类而言,无需创建多个实例</p><p>任务管理器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskManager</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化窗口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskManager</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 显示进程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayProcess</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 显示服务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayServices</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现唯一性</p><ol><li><p>由于每次使用new关键字来实例化TaskManager类时都将产生一个新对象,为了确保TaskManager实例的唯一性,需要禁止类的外部直接使用new来创建对象,因此需要将TaskManager的构造函数的可见性改为private</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">TaskManager</span><span class="params">()</span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>将构造函数的可见性改为private后,虽然类的外部不能再使用new来创建对象,但是在TaskManager的内部还是可以创建对象的,可见性只对类外有效,因此可以在TaskManager中创建并保存这个唯一实例,为了让外界可以访问这个唯一示例,需要在TaskManager中定义一个静态的TaskManager类型的私有变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TaskManager</span> <span class="variable">tm</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>为了保证成员变量的封转,将TaskManager类型的tm对象的可见性设置为private,外界无法实例该成员变量,需要增加一个公共的静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TaskManager <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tm == <span class="literal">null</span>)&#123;</span><br><span class="line">        tm = <span class="keyword">new</span> <span class="title class_">TaskManager</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在getInstance方法中首先判断tm对象是否存在,如果不存在,则使用new关键字创建一个新的TaskManager类型的tm对象,在返回新创建的tm对象,否则直接返回已有的tm对象</p><p>需要注意的事getInstance方法的修饰符,首先它应该是一个public方法,以便于外界其他对象调用,其次它使用了static关键字为一个静态方法,在类外可以直接通过类名来访问无需创建TaskManager对象</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskManager</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskManager</span><span class="params">()</span>&#123;...&#125; <span class="comment">// 初始化窗口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayProcess</span><span class="params">()</span>&#123;...&#125;<span class="comment">// 显示进程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayServices</span><span class="params">()</span>&#123;...&#125; <span class="comment">// 显示服务</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TaskManager <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tm == <span class="literal">null</span>)&#123;</span><br><span class="line">            tm = <span class="keyword">new</span> <span class="title class_">TaskManager</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tm;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>单例模式(Singleton Pattern)</strong>:确保某一个类只有一个实例,而且自行实例化并向整个系统提供这个实例,这个类称为单例类,它提供全局访问的方法,单例模式是一种对象创建型模式</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>某个类只有一个实例</li><li>它必须自行创建这个实例</li><li>它必须自行向整个系统提供这个实例</li></ol><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918225026508.png" alt="image-20220918225026508"></p><h3 id="负载均衡器的设计"><a href="#负载均衡器的设计" class="headerlink" title="负载均衡器的设计"></a>负载均衡器的设计</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918225304936.png" alt="image-20220918225304936"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918225322137.png" alt="image-20220918225322137"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 负载均衡器LoadBalancer单例类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancer</span> &#123;</span><br><span class="line">    <span class="comment">// 私有静态成员变量,存储唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LoadBalancer</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 服务器集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; serverList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LoadBalancer</span><span class="params">()</span> &#123;</span><br><span class="line">       serverList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公共静态方法返回唯一实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoadBalancer <span class="title function_">getLoadBalancer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LoadBalancer</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addServer</span><span class="params">(String server)</span>&#123;</span><br><span class="line">        ServerList.add(server);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removerServer</span><span class="params">(String server)</span>&#123;</span><br><span class="line">        ServerList.remove(server);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用Random类随机获取服务器</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>random.nextInt(ServerList.size());</span><br><span class="line">        <span class="keyword">return</span> (String) ServerList.get(i).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建4个LoadBalancer对象</span></span><br><span class="line">        <span class="type">LoadBalancer</span> <span class="variable">loadBalancer1</span> <span class="operator">=</span> LoadBalancer.getLoadBalancer();</span><br><span class="line">        <span class="type">LoadBalancer</span> <span class="variable">loadBalancer2</span> <span class="operator">=</span> LoadBalancer.getLoadBalancer();</span><br><span class="line">        <span class="type">LoadBalancer</span> <span class="variable">loadBalancer3</span> <span class="operator">=</span> LoadBalancer.getLoadBalancer();</span><br><span class="line">        <span class="type">LoadBalancer</span> <span class="variable">loadBalancer4</span> <span class="operator">=</span> LoadBalancer.getLoadBalancer();</span><br><span class="line">        <span class="comment">//判断负载均衡器是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (loadBalancer1==loadBalancer2&amp;&amp;loadBalancer2==loadBalancer3&amp;&amp;loadBalancer3==loadBalancer4)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;负载均衡器具有唯一性&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加服务器</span></span><br><span class="line">        loadBalancer1.addServer(<span class="string">&quot;server1&quot;</span>);</span><br><span class="line">        loadBalancer1.addServer(<span class="string">&quot;server2&quot;</span>);</span><br><span class="line">        loadBalancer1.addServer(<span class="string">&quot;server3&quot;</span>);</span><br><span class="line">        loadBalancer1.addServer(<span class="string">&quot;server4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟请求</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">server</span> <span class="operator">=</span> loadBalancer1.getServer();</span><br><span class="line">            System.out.println(<span class="string">&quot;分发至服务器:&quot;</span>+server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918233133771.png" alt="image-20220918233133771"></p><p>多线程的情况下会出问题</p><h3 id="饿汉式单例类"><a href="#饿汉式单例类" class="headerlink" title="饿汉式单例类"></a>饿汉式单例类</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918233717813.png" alt="image-20220918233717813"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EagerSingleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EagerSingleton instance=<span class="keyword">new</span> <span class="title class_">EagerSingleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EagerSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EagerSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>当类被加载时,静态变量instance会被初始化,此时类的私有构造函数会被调用,单例类的唯一实例被创建,如果使用饿汉单例来实现负载均衡器则在多线程情况下可确保类的唯一性</p></blockquote><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220918234151053.png" alt="image-20220918234151053"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazySingleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>懒汉模式在第一次调用getInstance方法时实例化,在类加载时不自行实例化,这种技术称为<strong>延迟加载(Lazy Load)</strong>,需要的时候再加载实例,为了避免多个线程同时调用getInstance方法使用synchronized进行线程锁定</p></blockquote><blockquote><p>在多线程高并发环境下该种实现可能会导致系统性能大大降低,无需对整个getInstance方法锁定只锁定instance&#x3D;new LazySingleton()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LazySingleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton.class)&#123;</span><br><span class="line">                instance=<span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当两个线程同时对instance&#x3D;&#x3D;null进行判断时,线程A进入synchronized锁定的代码中执行实例创建代码，线程B处于排队状态必须等线程A执行完毕后才能进入synchronized锁定代码,当A执行完毕后，线程B不知道已经创建,可能会产生多个实例所以需要在synchronized锁定代码中在判断一次这种方式称为<strong>双重检查锁定(Double-Check Locking)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//第一重判断</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//锁定代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton.class) &#123;</span><br><span class="line">                <span class="comment">//第二重判断</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>volatile修饰的变量可以保证多个线程都能正确处理,但会屏蔽Java虚拟机做的代码优化,可能会导致运行效率降低</p></blockquote><h3 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h3><p><strong>Initialization on Demand Holder(IoDH)</strong></p><blockquote><p>在单例类中增加一个<strong>静态内部类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HolderClass</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HolderClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Singleton s1,s2;</span><br><span class="line">        s1=Singleton.getInstance();</span><br><span class="line">        s2=Singleton.getInstance();</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译运行上述代码,结果为true,即s1和s2为同一对象,由于静态单例对象没有作为Singleton的成员变量直接实例化,因此类加载时不会实例化Singleton,第一次调用getInstance()时将加载内部类HolderClass,在该内部类中定义一个static类型的变量instance,此时首先会初始化这个成员变量,由java虚拟机来保证其线程安全性,确保该成员变量只能初始化一次,由于getInstance()方法没有任何线程锁定所以其性能不会造成任何影响</p><p>通过使用IoDH,既能实现延迟加载,又可以保证线程安全,不影响系统性能,所以IoDH不失为一种最好的Java语言的单例,但缺点是与编程语言相关</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>1. 优点</strong></p><ul><li>单例模式提供了对唯一示例的受控访问,因为单例类封装了它的唯一实例,它可以严格控制客户怎样以及何时访问</li><li>由于在系统内存中只存在一个对象,因此可以节约系统资源,对于一些需要频繁创建和销毁的对象,单例模式无疑可以提高系统的性能</li><li>允许可变数目的实例,基于单例,可以扩展,使用与控制单例对象相似的方法来获得指定个数的实例对象,既能节省系统资源,又解决由于单例对象共享过多有损性能损耗的问题</li></ul><p><strong>2. 缺点</strong></p><ul><li>由于单例没有抽象层,所以单例类的扩展有很大的困难</li><li>单例类的职责过重,在一定程度上违背了单一职责原则,因为单例类既提供了业务方法,又提供创建对象的方法(工厂方法)将对象的创建和对象本身的功能耦合在一起</li><li>现在的很多面向对象语言的运行环境都提供了自动垃圾回收,因此,如果实例化的共享对象长时间不被利用,系统会认为它是垃圾,会自动销毁并回收资源,下次利用时又将重新实例化,这会导致共享的单例对象状态的丢失</li></ul><p><strong>3. 场景</strong></p><ul><li>系统只需要一个实例对象,例如系统要求提供一个唯一的序列号生成器或资源管理器,或者需要考虑资源消耗太大而只允许创建一个对象</li><li>客户调用类的单个实例只允许访问一个公共访问点,除了该公共访问点,不能通过其他途径访问该实例</li></ul><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002144845750.png" alt="image-20221002144845750"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;<span class="comment">//图表类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chart</span><span class="params">(Object[][]data,String type)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.type=type;</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;histogram&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//初始化柱状图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;pie&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//初始化饼图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.equalsIgnoreCase(<span class="string">&quot;line&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//初始化折线图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;histogram&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//显示柱状图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;pie&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//显示饼图</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type.equalsIgnoreCase(<span class="string">&quot;line&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//显示折线图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>上述代码存在太多的if..else代码冗长,阅读差影响性能</li><li>该类的职责过重,将初始化和显示放在了一个类影响的单一职责原则,不利于类的重用和维护,构造函数会非常庞大,需要条件判断降低了效率</li><li>当需要新类型的图表必须修改Chart类的源代码,违反了开闭原则</li><li>客户端只能通过new关键字来创建对象,chart类和客户端耦合度较高,对象的创建和使用无法分离</li><li>客户端在创建对象时可能需要大量的初始化设置,如果在类中的构造函数没有提供一个默认位置,那么需要客户来完成这些代码在每次创建对象的时候都会出现,导致代码的重复</li></ol><h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><ol><li>将需要创建的各种不同对象的相关代码封装到不同的类中称为具体产品类</li><li>将公共的代码进行抽象和抽取后放在一个抽象产品类中</li><li>每一个具体产品类都是抽象产品类的子类</li><li>提供一个工厂类用于创建各种产品</li><li>在工厂类提供一个创建产品的工厂方法该方法可以根据所传入的参数不同创建不同的具体产品对象,客户端调用工厂类的工厂方法传入相应参数得到一个产品对象</li></ol><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><strong>简单工厂模式(Simple Factory Pattern)</strong>:定义一个工厂类,它可以根据参数的不同返回不同类的实例,该创建的实例都具有共同的父类，因为在工厂模式中用于创建实例的方法是静态方法,因此简单工厂模式又称为<strong>静态工厂(Static Factory Method)模式</strong>,属于类创建型模式</p><p>简单工厂模式的要点在于:当你需要什么,只需要传入一个正确的参数,就可以获取你所需要的对象,而无需知道其创建细节</p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002151025814.png" alt="image-20221002151025814"></p><ol><li>Factory(工厂角色):即工厂类,它是简单工厂模式的核心,负责实现创建所有实例的内部逻辑,工厂类可以被外界直接调用,创建所需的产品对象,在工厂类中提供了静态的工厂方法factoryMethod()它的返回类型为抽象产品类型Product</li><li>Product(抽象产品角色):它是工厂类所创建所有对象的父类,封装了各个对象的公有方法,他的引入将提高系统的灵活性,使得在工厂类中只需定义一个通用的工厂方法,因为所有创建的具体产品对象都是其子类</li><li>ConcreteProduct(具体产品角色):它是简单工厂模式的创建目标,所有被创建的对象都充当这个角色的某个具体类的实例,每一个具体产品角色都继承了抽象产品角色,需要实现在抽象产品中声明的抽象方法</li></ol><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002155327380.png" alt="image-20221002155327380"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Chart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HistogramChart</span> <span class="keyword">implements</span> <span class="title class_">Chart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HistogramChart</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建柱状图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;显示柱状图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PieChart</span> <span class="keyword">implements</span> <span class="title class_">Chart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PieChart</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建饼图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;显示饼图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LineChart</span> <span class="keyword">implements</span> <span class="title class_">Chart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LineChart</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建折线图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;显示折线图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChartFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Chart <span class="title function_">getChart</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;histogramChart&quot;</span>)) &#123;</span><br><span class="line">            chart = <span class="keyword">new</span> <span class="title class_">HistogramChart</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化设置柱状图&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;pieChart&quot;</span>)) &#123;</span><br><span class="line">            chart = <span class="keyword">new</span> <span class="title class_">PieChart</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化设置柱状图&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;lineChart&quot;</span>)) &#123;</span><br><span class="line">            chart = <span class="keyword">new</span> <span class="title class_">LineChart</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化设置折线图&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Chart chart;</span><br><span class="line">        chart=ChartFactory.getChart(<span class="string">&quot;lineChart&quot;</span>);</span><br><span class="line">        chart.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><blockquote><p>使用xml文件读取</p></blockquote><h3 id="简单工厂模式的简化"><a href="#简单工厂模式的简化" class="headerlink" title="简单工厂模式的简化"></a>简单工厂模式的简化</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002164448568.png" alt="image-20221002164448568"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002164522381.png" alt="image-20221002164522381"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002164541092.png" alt="image-20221002164541092"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002164548565.png" alt="image-20221002164548565"></p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002174934515.png" alt="image-20221002174934515"></p><p>设计要点</p><ol><li>需要封装日志记录起的初始化过程,这些初始化工作较为复杂,例如需要初始化其他相关的类,还有可能需要配置工作环境,导致代码较长,如果将它们都写在构造函数中,会导致构造函数庞大,不利于代码的修改和维护</li><li>用户可能需要更改日志记录方式,在客户端代码中需要提供一种灵活的方式来选择日志记录器,尽量在不修改源代码的基础上更换或增加日志记录方式</li></ol><h3 id="使用简单工厂模式"><a href="#使用简单工厂模式" class="headerlink" title="使用简单工厂模式"></a>使用简单工厂模式</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002175326663.png" alt="image-20221002175326663"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseLogger</span> <span class="keyword">extends</span> <span class="title class_">Logger</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLogger</span>  <span class="keyword">extends</span> <span class="title class_">Logger</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日志记录工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerFactory</span> &#123;</span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title function_">createLogger</span><span class="params">(String args)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.equalsIgnoreCase(<span class="string">&quot;db&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//连接数据库</span></span><br><span class="line">            <span class="comment">// 创建数据库日志记录器对象</span></span><br><span class="line">            Logger logger=<span class="keyword">new</span> <span class="title class_">DatabaseLogger</span>();</span><br><span class="line">            <span class="comment">//初始化数据库日志记录器</span></span><br><span class="line">            <span class="keyword">return</span> logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (args.equalsIgnoreCase(<span class="string">&quot;file&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//创建日志文件</span></span><br><span class="line">            <span class="comment">//创建文件日志记录器对象</span></span><br><span class="line">            Logger logger=<span class="keyword">new</span> <span class="title class_">FileLogger</span>();</span><br><span class="line">            <span class="comment">//初始化文件日志记录器</span></span><br><span class="line">            <span class="keyword">return</span> logger;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在LoggerFactory类中提供了静态工厂方法createLogger()用户根据所传入的参数创建不同类型的日志记录器,通过使用简单工厂模式,将日志记录器对象的创建和使用分离,客户端只需使用工厂类创建的日志记录器对象即可,无需关心对象的创建过程</p></blockquote><p>存在的问题</p><blockquote><ol><li>工厂类过于庞大,包含了大量的if..else导致维护和测试难度增大</li><li>系统扩展不灵活,如果增加了新类型的日志记录器,必须修改静态工厂方法的业务逻辑,违反了开闭原则</li></ol></blockquote><h3 id="工厂方法模式概述"><a href="#工厂方法模式概述" class="headerlink" title="工厂方法模式概述"></a>工厂方法模式概述</h3><blockquote><p>在简单工厂模式中提供一个工厂类,该工厂类处于产品类进行实例化的中心位置,它需要知道每一个产品对象的创建细节,并决定何时实例化哪一个产品类,简单工厂模式最大的缺点就是当有新产品要加入到系统时,必须修改工厂类,需要在其中加入必要的逻辑,这违背了开闭原则,此外,在简单工厂模式中,所有的产品都由同一个工厂创建,工厂类职责较重,而工厂方法模式可以很好的解决这个问题</p><p>在工厂方法模式中,不再提供一个统一的工厂类来创建所有的产品对象,而是针对不同的产品提供不同的工厂 ,系统提供一个与产品等级结构对应的工厂等级结构</p></blockquote><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><strong>工厂方法模式(Factory Method Pattern)</strong>:定义一个用于创建对象的接口,让子类决定哪一个类实例化,工厂方法模式让一个类的实例化延迟到其子类,工厂方法模式又简称为<strong>工厂模式(Factory Pattern)</strong>,又称作<strong>虚拟构造器模式(Virtual Constructor Pattern)<strong>或</strong>多态工厂模式(Polymorphic Factory Pattern)</strong></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002204151741.png" alt="image-20221002204151741"></p><ol><li><p>Product(抽象产品):它是定义产品的接口,是工厂方法模式所创建对象的超类,也就是产品对象的公共父类</p></li><li><p>ConcreteProduct(具体产品):他实现了抽象产品接口,某种类型的具体产品由专门的具体工厂创建,具体工厂和具体产品之间一一对应</p></li><li><p>Factory(抽象工厂):在抽象工厂类中,声明了工厂方法(Factory Method),用于返回一个产品,抽象工厂是工厂方法模式的核心,所有创建对象的工厂类都必须实现该接口</p></li><li><p>ConcreteFactory(具体工厂):它是抽象工厂类的子类,实现了抽象工厂方法,并可由客户端调用,返回一个具体产品类的实例</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>与简单工厂模式相比,工厂方法模式最重要的区别就是引入了抽象工厂角色,抽象工厂角色可以是接口也可以是抽象类或者具体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">factoryMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在抽象工厂中声明了工厂方法并未实现工厂方法,具体产品对象的创建由其子类负责,客户端针对抽象工厂编程可在运行时在指定具体工厂类,具体工厂类实现了工厂方法,不同的具体工厂可以创建不同的具体产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">factoyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProduct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际使用时,具体工厂类在实现工厂方法时除了创建具体产品对象之外,还可以负责产品对象的初始化工作以及一些资源和环境配置工作,例如连接数据库,创建文件</p><p>在客户端代码中,只需关心工厂类即可,不同的具体工厂可以创建不同的产品,典型的客户端类代码片段如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Factory factory;</span><br><span class="line">factory = <span class="keyword">new</span> <span class="title class_">ConcreteFactory</span>();<span class="comment">//可以通过配置文件实现</span></span><br><span class="line">Product product;</span><br><span class="line">product = factory.factoryMethod();</span><br></pre></td></tr></table></figure><h3 id="完美解决方案"><a href="#完美解决方案" class="headerlink" title="完美解决方案"></a>完美解决方案</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002205920003.png" alt="image-20221002205920003"></p></li></ol><blockquote><p>Loger接口充当抽象产品,其子类FileLogger和DatabaseLogger充当具体产品,LoggerFactory接口充当抽象工厂,其子类FileLoggerFactory和DatabaseLoggerFatory充当具体工厂</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据库日志记录器:具体产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseLogger</span> <span class="keyword">implements</span> <span class="title class_">Logger</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据库日志记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件日志记录器:具体产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLogger</span>  <span class="keyword">implements</span> <span class="title class_">Logger</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件日志记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日志记录工厂 抽象工厂</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LoggerFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Logger <span class="title function_">createLogger</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库日志记录器工厂类 具体工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseLoggerFactory</span>  <span class="keyword">implements</span> <span class="title class_">LoggerFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Logger <span class="title function_">createLogger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//连接数据库</span></span><br><span class="line">        <span class="comment">// 创建数据库日志记录器对象</span></span><br><span class="line">        Logger logger=<span class="keyword">new</span> <span class="title class_">DatabaseLogger</span>();</span><br><span class="line">        <span class="comment">//初始化数据库日志记录器</span></span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件日志记录器工厂类 具体工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLoggerFactory</span>  <span class="keyword">implements</span> <span class="title class_">LoggerFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Logger <span class="title function_">createLogger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建文件日志记录器对象</span></span><br><span class="line">        Logger logger=<span class="keyword">new</span> <span class="title class_">FileLogger</span>();</span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LoggerFactory factory;</span><br><span class="line">        Logger logger;</span><br><span class="line">        factory=<span class="keyword">new</span> <span class="title class_">FileLoggerFactory</span>();</span><br><span class="line">        logger=factory.createLogger();</span><br><span class="line">        logger.writeLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射与配置文件"><a href="#反射与配置文件" class="headerlink" title="反射与配置文件"></a>反射与配置文件</h3><p>**Java反射(Java Reflection)**是指在程序运行时获取已知名称的类或已有对象的相关信息的一种机制,包括类的方法、属性、父类等信息,还包括实例的创建和实例类型的判断等,在反射中使用最多的类是class,class类的实例表示正在运行的java应用程序中类和接口,其中forname(String className)方法可以返回与带有给定字符串名的类或接口相关联的class对象,在通过class对象的newInstance()方法来创建此对象所表示的类的一个新实例,即通过一个类名字符串得到类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过类名生成实例对象并将其返回</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;String&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure><h3 id="重载的工厂方法"><a href="#重载的工厂方法" class="headerlink" title="重载的工厂方法"></a>重载的工厂方法</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002230940935.png" alt="image-20221002230940935"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002231045104.png" alt="image-20221002231045104"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002231054529.png" alt="image-20221002231054529"></p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221002231104905.png" alt="image-20221002231104905"></p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="引入-2"><a href="#引入-2" class="headerlink" title="引入"></a>引入</h3><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221010162036386.png" alt="image-20221010162036386"></p><p>原始产品结构图</p><p><img src="/2022/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221010162508573.png" alt="image-20221010162508573"></p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ol><li>当需要增加新的皮肤时,虽然不需要修改现有代码,但是需要大量类,针对一个新增具体部件组件都需要增加一个具体工厂,类的个数成对增加,无疑会让系统越来越庞大,从而增加了系统的维护成本和运行开销</li><li>由于同一种风格的具体界面组件通常要一起显示,因此需要为每个组件都选择一个具体工厂,用户在使用时必须逐个进行设置,如果某个具体工厂选择失误将会导致界面显示混乱,虽然可以适当增加一些约束语句,但客户端和配置文件都较为复杂</li></ol><h3 id="产品等级结构和产品族"><a href="#产品等级结构和产品族" class="headerlink" title="产品等级结构和产品族"></a>产品等级结构和产品族</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch</title>
      <link href="/2022/09/05/elasticsearch/"/>
      <url>/2022/09/05/elasticsearch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p><img src="/2022/09/05/elasticsearch/image-20220905182519279.png" alt="image-20220905182519279"></p><p>倒排索引:</p><pre><code>+ 文档(document):每条数据就是一个文档+ 词条(term):文档按照语义分成的词语</code></pre><p><img src="/2022/09/05/elasticsearch/image-20220905182736509.png" alt="image-20220905182736509"></p><p><img src="/2022/09/05/elasticsearch/image-20220905182921416.png" alt="image-20220905182921416"></p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>es为面向文档存储,可以是存在数据库的一条商品数据,一个订单信息,文档数据会被序列化为json格式存储在es中</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li>索引:相同类型的文档的集合</li></ul><p><img src="/2022/09/05/elasticsearch/image-20220905183514249.png" alt="image-20220905183514249"></p><ul><li><p>映射:索引文档中字段约束信息</p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table></li></ul><p><img src="/2022/09/05/elasticsearch/image-20220905183713518.png" alt="image-20220905183713518"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java进阶</title>
      <link href="/2022/09/04/Java%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/09/04/Java%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="异常和处理"><a href="#异常和处理" class="headerlink" title="异常和处理"></a>异常和处理</h2><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><blockquote><p>将异常抛出给方法调用者</p></blockquote><h3 id="try…catch捕获异常"><a href="#try…catch捕获异常" class="headerlink" title="try…catch捕获异常"></a>try…catch捕获异常</h3><blockquote><p>对出现代码的异常进行处理</p></blockquote><p>当出现错误时catch执行,不影响后续代码执行</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><h3 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h3><p>继承Exception 使用super的默认构造器</p><h3 id="编译时异常-1"><a href="#编译时异常-1" class="headerlink" title="编译时异常"></a>编译时异常</h3><p>继承RuntimeException</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">//不限定类型</span></span><br><span class="line">ArrayList&lt;指定数据类型&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//指定数据类型</span></span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> <span class="comment">//添加元素</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,E element)</span> <span class="comment">//往指定索引位置添加元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span><span class="comment">//删除元素</span></span><br><span class="line">E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//删除指定位置元素,返回值为被删除的元素</span></span><br><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,E element)</span> <span class="comment">//修改指定索引位置的元素 返回值为修改前的元素</span></span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//根据索引获取元素 返回值为该元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> <span class="comment">//获取元素个数</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(object o)</span> <span class="comment">//判断集合中是否存在某个元素</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><blockquote><p>使用迭代器遍历,不要在迭代器中修改元素,会出现并非异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;T&gt; it=list.iterator();</span><br><span class="line">it.hasNext() <span class="comment">//是否有下个元素</span></span><br><span class="line">it.Next() <span class="comment">//获取下个元素</span></span><br></pre></td></tr></table></figure><blockquote><p>使用for循环修改需要逆序</p><p>foreach</p><p>toArray遍历</p></blockquote><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LinkedList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();<span class="comment">//不限定类型</span></span><br><span class="line">LinkedList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();<span class="comment">//限定类型</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> <span class="comment">//添加元素</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,E element)</span> <span class="comment">//往指定索引位置添加元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span><span class="comment">//删除元素</span></span><br><span class="line">E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//删除指定位置元素,返回值为被删除的元素</span></span><br><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,E element)</span> <span class="comment">//修改指定索引位置的元素 返回值为修改前的元素</span></span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//根据索引获取元素 返回值为该元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> <span class="comment">//获取元素个数</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(object o)</span> <span class="comment">//判断集合中是否存在某个元素</span></span><br></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><p>同ArrayList</p><h3 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a>ArrayList和LinkedList区别</h3><blockquote><p>ArrayList使用数组存储 查找快,增删慢</p><p>LinkedList使用链表存储 增删快,查找慢</p></blockquote><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>不重复</p><p>没有索引</p></blockquote><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><blockquote><p>采用哈希表存储</p><p>存储元素的顺序和遍历获取的顺序可以不一致</p><p>没有索引</p><p>集合没有重复元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;T&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">add(E e);<span class="comment">//添加</span></span><br><span class="line">remove(object o);<span class="comment">//删除元素</span></span><br><span class="line">contains(object o);<span class="comment">//判断元素是否存在</span></span><br></pre></td></tr></table></figure><p>遍历 数组 迭代器</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>Map接口为双列集合</p><p>interface Map&lt;K,V&gt;;</p><p>key 不重复</p></blockquote><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>哈希表存储</li><li>存储元素的顺序和遍历获取顺序可能不一致</li><li>key唯一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;k,v&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">V <span class="title function_">put</span><span class="params">(K,V)</span>;<span class="comment">//添加元素 不存在添加 存在修改 返回修改前的v</span></span><br><span class="line">V <span class="title function_">get</span><span class="params">(object key)</span>;<span class="comment">//根据key获取value</span></span><br><span class="line">V <span class="title function_">remove</span><span class="params">(object key)</span>;<span class="comment">//根据key删除 返回删除的value</span></span><br><span class="line">containskey(key);<span class="comment">//判断key是否存在</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;<span class="comment">//个数</span></span><br><span class="line">clear();<span class="comment">//清楚所有</span></span><br></pre></td></tr></table></figure><h4 id="遍历-2"><a href="#遍历-2" class="headerlink" title="遍历"></a>遍历</h4><p>使用entry获取一个set集合用set集合的办法遍历</p><p>使用keySet获取为set集合通过key获取值</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="创建File对象"><a href="#创建File对象" class="headerlink" title="创建File对象"></a>创建File对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File(String pathname);<span class="comment">//通过字符串的路径来创建对象</span></span><br><span class="line">File(String parent,String child);<span class="comment">//通过父目录的路径和文件名称来创建对象</span></span><br><span class="line">File(File parent,String child);<span class="comment">//通过父目录的路径和文件名称来创建</span></span><br></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">createNewFile();<span class="comment">//创建文件 传入路径</span></span><br><span class="line">mkdir();<span class="comment">//创建文件夹</span></span><br><span class="line">mkdirs();<span class="comment">//父目录不存在自动创建父目录</span></span><br><span class="line">exists();<span class="comment">//判断是否存在</span></span><br><span class="line">isFile();<span class="comment">//判断是否为文件</span></span><br><span class="line">isDirectory();<span class="comment">//是否为文件夹</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">length</span><span class="params">()</span>;<span class="comment">//文件大小</span></span><br><span class="line">getName();<span class="comment">//获取名字</span></span><br><span class="line">File <span class="title function_">getParentFile</span><span class="params">()</span>;<span class="comment">//获取父目录的File对象</span></span><br><span class="line">String <span class="title function_">getAbsoultePath</span><span class="params">()</span>;<span class="comment">//获取File对象的绝对路径</span></span><br><span class="line">File[] listFiles();<span class="comment">//获取所有文件和文件夹对象</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>若依</title>
      <link href="/2022/09/01/%E8%8B%A5%E4%BE%9D/"/>
      <url>/2022/09/01/%E8%8B%A5%E4%BE%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">后端目录结构</span><br><span class="line">com.ruoyi     </span><br><span class="line">├── common            // 工具类</span><br><span class="line">│       └── annotation                    // 自定义注解</span><br><span class="line">│       └── config                        // 全局配置</span><br><span class="line">│       └── constant                      // 通用常量</span><br><span class="line">│       └── core                          // 核心控制</span><br><span class="line">│       └── enums                         // 通用枚举</span><br><span class="line">│       └── exception                     // 通用异常</span><br><span class="line">│       └── filter                        // 过滤器处理</span><br><span class="line">│       └── utils                         // 通用类处理</span><br><span class="line">├── framework         // 框架核心</span><br><span class="line">│       └── aspectj                       // 注解实现</span><br><span class="line">│       └── config                        // 系统配置</span><br><span class="line">│       └── datasource                    // 数据权限</span><br><span class="line">│       └── interceptor                   // 拦截器</span><br><span class="line">│       └── manager                       // 异步处理</span><br><span class="line">│       └── security                      // 权限控制</span><br><span class="line">│       └── web                           // 前端控制</span><br><span class="line">├── ruoyi-generator   // 代码生成（可移除）</span><br><span class="line">├── ruoyi-quartz      // 定时任务（可移除）</span><br><span class="line">├── ruoyi-system      // 系统代码</span><br><span class="line">├── ruoyi-admin       // 后台服务</span><br><span class="line">├── ruoyi-xxxxxx      // 其他模块</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">前端目录结构</span><br><span class="line">├── build                      // 构建相关  </span><br><span class="line">├── bin                        // 执行脚本</span><br><span class="line">├── public                     // 公共文件</span><br><span class="line">│   ├── favicon.ico            // favicon图标</span><br><span class="line">│   └── index.html             // html模板</span><br><span class="line">│   └── robots.txt             // 反爬虫</span><br><span class="line">├── src                        // 源代码</span><br><span class="line">│   ├── api                    // 所有请求</span><br><span class="line">│   ├── assets                 // 主题 字体等静态资源</span><br><span class="line">│   ├── components             // 全局公用组件</span><br><span class="line">│   ├── directive              // 全局指令</span><br><span class="line">│   ├── layout                 // 布局</span><br><span class="line">│   ├── plugins                // 通用方法</span><br><span class="line">│   ├── router                 // 路由</span><br><span class="line">│   ├── store                  // 全局 store管理</span><br><span class="line">│   ├── utils                  // 全局公用方法</span><br><span class="line">│   ├── views                  // view</span><br><span class="line">│   ├── App.vue                // 入口页面</span><br><span class="line">│   ├── main.js                // 入口 加载组件 初始化等</span><br><span class="line">│   ├── permission.js          // 权限管理</span><br><span class="line">│   └── settings.js            // 系统配置</span><br><span class="line">├── .editorconfig              // 编码格式</span><br><span class="line">├── .env.development           // 开发环境配置</span><br><span class="line">├── .env.production            // 生产环境配置</span><br><span class="line">├── .env.staging               // 测试环境配置</span><br><span class="line">├── .eslintignore              // 忽略语法检查</span><br><span class="line">├── .eslintrc.js               // eslint 配置项</span><br><span class="line">├── .gitignore                 // git 忽略项</span><br><span class="line">├── babel.config.js            // babel.config.js</span><br><span class="line">├── package.json               // package.json</span><br><span class="line">└── vue.config.js              // vue.config.js</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目相关配置</span></span><br><span class="line"><span class="attr">ruoyi:</span></span><br><span class="line">  <span class="comment"># 名称</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">RuoYi</span></span><br><span class="line">  <span class="comment"># 版本</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">3.3</span><span class="number">.0</span></span><br><span class="line">  <span class="comment"># 版权年份</span></span><br><span class="line">  <span class="attr">copyrightYear:</span> <span class="number">2021</span></span><br><span class="line">  <span class="comment"># 实例演示开关</span></span><br><span class="line">  <span class="attr">demoEnabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /home/ruoyi/uploadPath）</span></span><br><span class="line">  <span class="attr">profile:</span> <span class="string">D:/ruoyi/uploadPath</span></span><br><span class="line">  <span class="comment"># 获取ip地址开关</span></span><br><span class="line">  <span class="attr">addressEnabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 验证码类型 math 数组计算 char 字符验证</span></span><br><span class="line">  <span class="attr">captchaType:</span> <span class="string">math</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发环境配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 服务器的HTTP端口，默认为8080</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment"># 应用的访问路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="comment"># tomcat的URI编码</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># tomcat最大线程数，默认为200</span></span><br><span class="line">    <span class="attr">max-threads:</span> <span class="number">800</span></span><br><span class="line">    <span class="comment"># Tomcat启动初始化的线程数，默认值25</span></span><br><span class="line">    <span class="attr">min-spare-threads:</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.ruoyi:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">warn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 资源信息</span></span><br><span class="line">  <span class="attr">messages:</span></span><br><span class="line">    <span class="comment"># 国际化资源文件路径</span></span><br><span class="line">    <span class="attr">basename:</span> <span class="string">i18n/messages</span></span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">druid</span></span><br><span class="line">  <span class="comment"># 文件上传</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">     <span class="attr">multipart:</span></span><br><span class="line">       <span class="comment"># 单个文件大小</span></span><br><span class="line">       <span class="attr">max-file-size:</span>  <span class="string">10MB</span></span><br><span class="line">       <span class="comment"># 设置总上传的文件大小</span></span><br><span class="line">       <span class="attr">max-request-size:</span>  <span class="string">20MB</span></span><br><span class="line">  <span class="comment"># 服务模块</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment"># 热部署开关</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># redis 配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># 地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment"># 端口，默认为6379</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># 数据库索引</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 密码</span></span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池的最大数据库连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># #连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># token配置</span></span><br><span class="line"><span class="attr">token:</span></span><br><span class="line">    <span class="comment"># 令牌自定义标识</span></span><br><span class="line">    <span class="attr">header:</span> <span class="string">Authorization</span></span><br><span class="line">    <span class="comment"># 令牌密钥</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line">    <span class="comment"># 令牌有效期（默认30分钟）</span></span><br><span class="line">    <span class="attr">expireTime:</span> <span class="number">30</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># MyBatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="comment"># 搜索指定包别名</span></span><br><span class="line">    <span class="attr">typeAliasesPackage:</span> <span class="string">com.ruoyi.**.domain</span></span><br><span class="line">    <span class="comment"># 配置mapper的扫描，找到所有的mapper.xml映射文件</span></span><br><span class="line">    <span class="attr">mapperLocations:</span> <span class="string">classpath*:mapper/**/*Mapper.xml</span></span><br><span class="line">    <span class="comment"># 加载全局的配置文件</span></span><br><span class="line">    <span class="attr">configLocation:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PageHelper分页插件</span></span><br><span class="line"><span class="attr">pagehelper:</span> </span><br><span class="line">  <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countSql</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Swagger配置</span></span><br><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="comment"># 是否开启swagger</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 请求前缀</span></span><br><span class="line">  <span class="attr">pathMapping:</span> <span class="string">/dev-api</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止XSS攻击</span></span><br><span class="line"><span class="attr">xss:</span> </span><br><span class="line">  <span class="comment"># 过滤开关</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 排除链接（多个用逗号分隔）</span></span><br><span class="line">  <span class="attr">excludes:</span> <span class="string">/system/notice/*</span></span><br><span class="line">  <span class="comment"># 匹配链接</span></span><br><span class="line">  <span class="attr">urlPatterns:</span> <span class="string">/system/*,/monitor/*,/tool/*</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 主库数据源</span></span><br><span class="line">            <span class="attr">master:</span></span><br><span class="line">                <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">            <span class="comment"># 从库数据源</span></span><br><span class="line">            <span class="attr">slave:</span></span><br><span class="line">                <span class="comment"># 从数据源开关/默认关闭</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">                <span class="attr">url:</span> </span><br><span class="line">                <span class="attr">username:</span> </span><br><span class="line">                <span class="attr">password:</span> </span><br><span class="line">            <span class="comment"># 初始连接数</span></span><br><span class="line">            <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">            <span class="comment"># 最小连接池数量</span></span><br><span class="line">            <span class="attr">minIdle:</span> <span class="number">10</span></span><br><span class="line">            <span class="comment"># 最大连接池数量</span></span><br><span class="line">            <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">            <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">            <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">            <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">            <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">            <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">            <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">            <span class="comment"># 配置一个连接在池中最大生存的时间，单位是毫秒</span></span><br><span class="line">            <span class="attr">maxEvictableIdleTimeMillis:</span> <span class="number">900000</span></span><br><span class="line">            <span class="comment"># 配置检测连接是否有效</span></span><br><span class="line">            <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">            <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">webStatFilter:</span> </span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">statViewServlet:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="comment"># 设置白名单，不填则允许所有访问</span></span><br><span class="line">                <span class="attr">allow:</span></span><br><span class="line">                <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">                <span class="comment"># 控制台管理用户名和密码</span></span><br><span class="line">                <span class="attr">login-username:</span> </span><br><span class="line">                <span class="attr">login-password:</span> </span><br><span class="line">            <span class="attr">filter:</span></span><br><span class="line">                <span class="attr">stat:</span></span><br><span class="line">                    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                    <span class="comment"># 慢SQL记录</span></span><br><span class="line">                    <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">                    <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">                    <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">wall:</span></span><br><span class="line">                    <span class="attr">config:</span></span><br><span class="line">                        <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码生成</span></span><br><span class="line"><span class="attr">gen:</span> </span><br><span class="line">  <span class="comment"># 作者</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">ruoyi</span></span><br><span class="line">  <span class="comment"># 默认生成包路径 system 需改成自己的模块名称 如 system monitor tool</span></span><br><span class="line">  <span class="attr">packageName:</span> <span class="string">com.ruoyi.system</span></span><br><span class="line">  <span class="comment"># 自动去除表前缀，默认是false</span></span><br><span class="line">  <span class="attr">autoRemovePre:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 表前缀（生成类名不会包含表前缀，多个用逗号分隔）</span></span><br><span class="line">  <span class="attr">tablePrefix:</span> <span class="string">sys_</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2022/09/01/mysql/"/>
      <url>/2022/09/01/mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mysql笔记"><a href="#Mysql笔记" class="headerlink" title="Mysql笔记"></a>Mysql笔记</h1><h2 id="Mysql架构"><a href="#Mysql架构" class="headerlink" title="Mysql架构"></a>Mysql架构</h2><h3 id="了解mysql的安装目录"><a href="#了解mysql的安装目录" class="headerlink" title="了解mysql的安装目录"></a>了解mysql的安装目录</h3><h4 id="windows中的目录"><a href="#windows中的目录" class="headerlink" title="windows中的目录"></a>windows中的目录</h4><p><img src="/2022/09/01/mysql/image-20201201151814062.82ec67ba.png" alt="image-20201201151814062"></p><ul><li>数据文件目录</li></ul><p><img src="/2022/09/01/mysql/image-20201124143358592.e6ead470-166201151994410.png" alt="image-20201124143358592"></p><ul><li>1、<code>bin</code>目录</li><li>用于放置一些可执行文件，如mysql.exe、mysqld.exe、mysqlshow.exe等。</li><li>2、<code>data</code>目录</li><li>用于放置一些日志文件以及数据库。</li><li>3、<code>include</code>目录</li><li>用于放置一些头文件，如：mysql.h、mysql_ername.h等。</li><li>4、<code>lib</code>目录</li><li>用于放置一系列库文件。</li><li>5、<code>share</code>目录</li><li>用于存放字符集、语言等信息。</li><li>6、<code>my.ini</code>这个很重要</li><li>是MySQL数据库中使用的配置文件。</li></ul><p>配置文件很重要，所谓配置文件就是配置一下你的mysql让他成为你想要的的样子。</p><h4 id="linux中的文件目录"><a href="#linux中的文件目录" class="headerlink" title="linux中的文件目录"></a>linux中的文件目录</h4><p>咱们当时使用的是rpm安装，他会有个默认的路径。</p><ul><li>bin目录</li></ul><p><img src="/2022/09/01/mysql/image-20201124144036825.f6083823-16620115199439.png" alt="image-20201124144036825"></p><ul><li>配置文件</li></ul><p><img src="/2022/09/01/mysql/image-20201124144308513.1edc6745.png" alt="image-20201124144308513"></p><ul><li>pid文件</li></ul><p>这个文件用来指导当前运行的mysql实例的进程号！</p><p><img src="/2022/09/01/mysql/image-20201124145129705.3d57ca1b-166201151994411.png" alt="image-20201124145129705"></p><ul><li>数据库文件</li></ul><p><img src="/2022/09/01/mysql/image-20201124145235600.2b47a32d.png" alt="image-20201124145235600"></p><h4 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h4><ul><li>port：端口</li><li>server-id：数据库唯一标识码</li><li>datadir：数据目录路径</li><li>basedir：基本路径</li><li>socket：指定socket文件路径</li><li>skip-name-resolve：禁止mysql对外部连接进行DNS解析，启用时所有远程连接都要使用ip地址方式</li><li>skip-external-locking：避免外部锁，默认开启</li><li>skip-grant-tables：mysql启动时不使用grant-tables授权表，常用于忘记密码情况下</li><li>user：使用的用户</li><li>sql_mode：约束SQL语法模式</li><li>show_query_log_file：慢日志存储路径，5.6及以上版本，log-slow-queries是5.6以下版本</li><li>long_query_time：设置慢查询时间，默认10s</li><li>log-queries-not-using-indexes：记录未使用索引查询</li><li>log_throttle_queries_not_using_indexs：5.6.5版本新增参数，设定每分钟记录到日志未使用索引的语句数目，超过则之后只记录语句数量和花费总时间</li><li>log_output：日志存储方式，默认FILE，TABLE表示写入到mysql.slow_log表</li><li>expire_logs_days：二进制日志保留的时间</li><li>log-bin：设置日志文件路径及名称</li><li>log-bin-index：日志文件后缀形式</li><li>relay-bin：中继日志文件</li><li>relay-bin-index：中继日志文件后缀形式</li><li>max_connections：mysql最大连接数（超出会报Too many connections）</li><li>back_log：mysql暂存的连接数量(每个连接占用256kb)</li><li>wait_timeout：关闭一个非交互的连接之前所需要等待的秒数</li><li>max_connect_errors：最大错误连接数，flush host进行解禁</li><li>max_allowed_packet：接受数据包大小，需要是才会分配内存，设置过大会造成内存溢出</li><li>max_heap_table_size：用户可以创建的内存表大小</li><li>tmp_table_size：mysql的heap表缓冲大小</li><li>read_rnd_buffer_size：mysql随机读缓冲区大小</li><li>sort_buffer_size：mysql执行排序使用的缓冲大小</li><li>join_buffer_size：联合查询操作所能使用的缓冲区大小</li></ul><h4 id="mysql修改配置的方法mysql修改配置的方法"><a href="#mysql修改配置的方法mysql修改配置的方法" class="headerlink" title="mysql修改配置的方法mysql修改配置的方法"></a>mysql修改配置的方法mysql修改配置的方法</h4><p>（1）设置全局变量方法1(不推荐): 修改参数文件, 然后重启mysqld</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">wait_timeout=10</span><br><span class="line"># service mysqld restart</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4</p><p>不过这个方法太生硬了, 线上服务重启无论如何都应该尽可能避免.</p><p>（2）设置全局变量方法2(推荐): 在命令行里通过SET来设置, 然后再修改参数文件**</p><p>如果要修改全局变量, 必须要显示指定”GLOBAL”或者”@@global.”, 同时必须要有SUPER权限.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global wait_timeout=10;</span><br><span class="line">mysql&gt; set @@global.wait_timeout=10;</span><br></pre></td></tr></table></figure><p>1<br>2</p><p>然后查看设置是否成功:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@global.wait_timeout=10;</span><br><span class="line">or</span><br><span class="line">mysql&gt; show global variables like &#x27;wait_timeout&#x27;;</span><br></pre></td></tr></table></figure><p>1<br>2<br>3</p><p>如果查询时使用的是show variables的话, 会发现设置并没有生效, 除非重新登录再查看. 这是因为使用show variables的话就等同于使用show session variables, 查询的是会话变量, 只有使用show global variables查询的才是全局变量. 如果仅仅想修改会话变量的话, 可以使用类似set wait_timeout&#x3D;10;或者set session wait_timeout&#x3D;10;这样的语法.</p><p>当前只修改了正在运行的MySQL实例参数, 但下次重启mysqld又会回到默认值, 所以别忘了修改参数文件:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">wait_timeout=10</span><br></pre></td></tr></table></figure><p>1<br>2<br>3</p><p>（3）设置会话变量方法: 在命令行里通过SET来设置</p><p>如果要修改会话变量值, 可以指定”SESSION”或者”@@session.”或者”@@”或者”LOCAL”或者”@@local.”, 或者什么都不使用.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> wait_timeout<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session wait_timeout<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">local</span> wait_timeout<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> @<span class="variable">@wait</span>_timeout<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> @<span class="variable">@session</span>.wait_timeout<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> @<span class="variable">@local</span>.wait_timeout<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6</p><p>然后查看设置是否成功:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@wait</span>_timeout;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@session</span>.wait_timeout;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@local</span>.wait_timeout;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">local</span> variables <span class="keyword">like</span> <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> session variables <span class="keyword">like</span> <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6</p><p>（4）会话变量和全局变量转换方法:</p><p>在命令行里通过SET来设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将会话变量值设置为对应的全局变量值呢:</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> @@session.wait_timeout=@@global.wait_timeout;</span><br><span class="line"><span class="comment"># 将会话变量值设置为MySQL编译时的默认值(wait_timeout=28800):</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> wait_timeout=DEFAULT;</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4</p><p>这里要注意的是, 并不是所有的系统变量都能被设置为DEFAULT, 如果设置这些变量为DEFAULT则会返回错误.</p><h3 id="mysql的系统架构"><a href="#mysql的系统架构" class="headerlink" title="mysql的系统架构"></a>mysql的系统架构</h3><h4 id="1、-数据库和数据库实例"><a href="#1、-数据库和数据库实例" class="headerlink" title="1、 数据库和数据库实例"></a>1、 数据库和数据库实例</h4><p>在MySQL的学习研究中，存在两个非常容易混淆的概念，即<code>数据库</code>和<code>数据库实例</code>。在MySQL中，数据库和数据库实例定义如下：</p><ul><li>数据库：存储数据的；</li><li>数据库实例：操作数据库的。</li></ul><p>如上定义很清楚了，数据库是用来存储数据的，数据库实例是用来操作数据的，从操作系统的角度，数据库实例表现为一个进程，对应多个线程，</p><p>在非集群数据库架构中，数据库与数据库实例存在一 一对应关系，在数据库集群中，可能存在多个数据库实例操作一个数据库情况，即多对一关系。</p><h4 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h4><p>复杂的架构是为了更好的工作，架构中的每一个角色都可以高效的单独处理一类事件，举个例子。</p><p>你去拜访你朋友当然朋友自己迎接你即可。</p><p>但是你要拜访市长，可能就要门卫处做身份认证、传达室负责接通电话确认可以、市长办公室负责接待、你可能需要排队等候、你的事情如果办公室就能解决可能就不用见市长了，最后轮到你了，你才能见上市长。</p><p>对于MySQL来说，虽然经历了多个版本迭代（MySQL5.5,MySQL 5.6,MySQL 5.7,MySQL 8）,但每次的迭代，都是基于MySQL</p><p>基架的，MySQL基架大致包括如下几大模块组件：</p><p><strong>（1）MySQL向外提供的交互接口（Connectors）</strong></p><p>Connectors组件，是MySQL向外提供的交互组件，如java,.net,php等语言可以通过该组件来操作SQL语句，实现与SQL的交互。</p><p><strong>（2）管理服务组件和工具组件(Management Service &amp; Utilities)</strong></p><p>提供对MySQL的集成管理，如备份(Backup),恢复(Recovery),安全管理(Security)等</p><p><strong>（3）连接池组件(Connection Pool)</strong></p><p>负责监听对客户端向MySQL Server端的各种请求，接收请求，转发请求到目标模块。每个成功连接MySQL Server的客户请求都会被</p><p>创建或分配一个线程，该线程负责客户端与MySQL Server端的通信，接收客户端发送的命令，传递服务端的结果信息等。</p><p><strong>（4）SQL接口组件(SQL Interface)</strong></p><p>接收用户SQL命令，如DML,DDL和存储过程等，并将最终结果返回给用户。</p><p><strong>（5）查询分析器组件(Parser)</strong></p><p>首先分析SQL命令语法的合法性，并尝试将SQL命令分解成数据结构，若分解失败，则提示SQL语句不合理。</p><p><strong>（6）优化器组件（Optimizer）</strong></p><p>对SQL命令按照标准流程进行优化分析。</p><p><strong>（7）缓存主件（Caches &amp; Buffers）</strong></p><p>缓存和缓冲组件</p><p><img src="/2022/09/01/mysql/image-20201208160336839.6d0236a8.png" alt="image-20201208160336839"></p><p><img src="/2022/09/01/mysql/image-20201208160226331.a43090d0.png" alt="image-20201208160226331"></p><p><strong>（8）MySQL存储引擎</strong></p><blockquote><p>什么是MySQL存储引擎</p></blockquote><p> MySQL属于关系型数据库，而关系型数据库的存储是以表的形式进行的，对于表的创建，数据的存储，检索，更新等都是由MySQL</p><p>存储引擎完成的，这也是MySQL存储引擎在MySQL中扮演的重要角色。</p><p> 研究过SQL Server和Oracle的读者可能很清楚，这两种数据库的存储引擎只有一个，而MySQL的存储引擎种类比较多，如MyISAM存储引擎，InnoDB存储引擎和Memory存储引擎.</p><p> MySQL之所以有多种存储引擎，是因为MySQL的开源性决定的。MySQL存储引擎，从种类上来说，大致可归结为官方存储引擎和第三方存储引起。MySQL的开源性，允许第三方基于MySQL骨架，开发适合自己业务需求的存储引擎。</p><blockquote><p>MySQL存储引擎作用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL存储引擎在MySQL中扮演重要角色，其作比较重要作用，大致归结为如下两方面：</span><br></pre></td></tr></table></figure><p> 作用一：管理表创建，数据检索，索引创建等</p><p> 作用二：满足自定义存储引擎开发。</p><blockquote><p>MySQL引擎种类</p></blockquote><p> 不同种类的存储引擎，在存储表时的存储引擎表机制也有所不同，从MySQL存储引擎种类上来说，可以分为官方存储引擎和第三方存储引擎。</p><p> 比较常用的存储引擎包括InnoDB存储引擎，MyISAM存储引擎和Momery存储引擎。</p><p>（九）物理文件（File System）</p><p>实际存储<code>MySQL 数据库文件</code>和一些<code>日志文件</code>等的系统。</p><h3 id="mysql的存储引擎"><a href="#mysql的存储引擎" class="headerlink" title="mysql的存储引擎"></a>mysql的存储引擎</h3><blockquote><p>能看懂多少看多少，以后会一点点了解</p></blockquote><h3 id="MySQL常用存储引擎及特点"><a href="#MySQL常用存储引擎及特点" class="headerlink" title="MySQL常用存储引擎及特点"></a>MySQL常用存储引擎及特点</h3><h4 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h4><p>从MySQL5.5版本之后，MySQL的默认内置存储引擎已经是InnoDB了，他的主要特点有：</p><p>（1）支持事务。默认的事务隔离级别为可重复度，通过MVCC（并发版本控制）来实现的。 （2）使用的锁粒度为行级锁，可以支持更高的并发； （3）支持外键； （4）在InnoDB中存在着缓冲管理，通过缓冲池，将索引和数据全部缓存起来，加快查询的速度； （5）对于InnoDB类型的表，其数据的物理组织形式是聚簇表。所有的数据按照主键来组织。数据和索引放在一块，都位于B+数的叶子节点上；</p><h4 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h4><p>在5.5版本之前，MyISAM是MySQL的默认存储引擎，该存储引擎并发性差，不支持事务，所以使用场景比较少，主要特点为：</p><p>（1）不支持事务； （2）不支持外键，如果强行增加外键，不会提示错误，只是外键不其作用； （3）对数据的查询缓存只会缓存索引，不会像InnoDB一样缓存数据，而且是利用操作系统本身的缓存； （4）默认的锁粒度为表级锁，所以并发度很差，加锁快，锁冲突较少，所以不太容易发生死锁； （5）支持全文索引（MySQL5.6之后，InnoDB存储引擎也对全文索引做了支持），但是MySQL的全文索引基本不会使用，对于全文索引，现在有其他成熟的解决方案，比如：ElasticSearch，Solr，Sphinx等。 （6）数据库所在主机如果宕机，MyISAM的数据文件容易损坏，而且难恢复；</p><h4 id="两种引擎的对比"><a href="#两种引擎的对比" class="headerlink" title="两种引擎的对比"></a>两种引擎的对比</h4><p>1、由于锁粒度的不同，InnoDB比MyISAM支持更高的并发；</p><p> 2、InnoDB为行级锁，MyISAM为表级锁，所以InnoDB相对于MyISAM来说，更容易发生死锁，锁冲突的概率更大，而且上锁的开销也更大，因为需要为每一行加锁； </p><p>3、在备份容灾上，InnoDB支持在线热备，有很成熟的在线热备解决方案；</p><p> 4、查询性能上，MyISAM的查询效率高于InnoDB，因为InnoDB在查询过程中，是需要维护数据缓存，而且查询过程是先定位到行所在的数据块，然后在从数据块中定位到要查找的行；而MyISAM可以直接定位到数据所在的内存地址，可以直接找到数据； </p><p>5、SELECT COUNT(*)语句，如果行数在千万级别以上，MyISAM可以快速查出，而InnoDB查询的特别慢，因为MyISAM将行数单独存储了，而InnoDB需要逐行去统计行数；所以如果使用InnoDB，而且需要查询行数，则需要对行数进行特殊处理，如：离线查询并缓存； </p><p>6、MyISAM的表结构文件包括：.frm(表结构定义),.MYI(索引),.MYD(数据)；而InnoDB的表数据文件为:.ibd和.frm(表结构定义)；</p><h4 id="选择合适的存储引擎"><a href="#选择合适的存储引擎" class="headerlink" title="选择合适的存储引擎"></a>选择合适的存储引擎</h4><p>1、使用场景是否需要事务支持； </p><p>2、是否需要支持高并发，InnoDB的并发度远高于MyISAM；</p><p> 3、是否需要支持外键；</p><p> 4、高效缓冲数据，InnoDB对数据和索引都做了缓冲，而MyISAM只缓冲了索引；</p><p> 5、索引，不同存储引擎的索引并不太一样；</p><h2 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h2><h4 id="计算机硬盘原理"><a href="#计算机硬盘原理" class="headerlink" title="计算机硬盘原理"></a>计算机硬盘原理</h4><h5 id="磁盘IO的问题"><a href="#磁盘IO的问题" class="headerlink" title="磁盘IO的问题"></a>磁盘IO的问题</h5><p>mysql的数据一般以文件形式存储在磁盘上，检索需要磁盘I&#x2F;O操作。与主存不同，磁盘I&#x2F;O存在机械运动耗费，因此磁盘I&#x2F;O的时间消耗是巨大的。</p><p><img src="/2022/09/01/mysql/image-20201122150129276.837e618f.png" alt="image-20201122150129276"></p><h5 id="磁盘的一些概念"><a href="#磁盘的一些概念" class="headerlink" title="磁盘的一些概念"></a>磁盘的一些概念</h5><ol><li>盘片、片面 和 磁头</li></ol><p>硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个读&#x2F;写磁头。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。 如下图：</p><p><img src="/2022/09/01/mysql/image-20211220185623160.549dea9c.png" alt="image-20211220185623160"></p><ol start="2"><li>扇区 和 磁道</li></ol><p>下图显示的是一个盘面，盘面中一圈圈灰色同心圆为一条条磁道，从圆心向外画直线，可以将磁道划分为若干个弧段，每个磁道上一个弧段被称之为一个扇区（图践绿色部分）。扇区是磁盘的最小组成单元，通常是512字节。（由于不断提高磁盘的大小，部分厂商设定每个扇区的大小是4096字节）</p><p><img src="/2022/09/01/mysql/image-20211220185637275.3aa075f8-166201207344456.png" alt="image-20211220185637275"></p><ol start="3"><li>磁头-和-磁头 和 柱面</li></ol><p>硬盘通常由重叠的一组盘片构成，每个盘面都被划分为数目相等的磁道，并从外缘的“0”开始编号，具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面。磁盘的柱面数与一个盘面上的磁道数是相等的。由于每个盘面都有自己的磁头，因此，盘面数等于总的磁头数。 如下图</p><p><img src="/2022/09/01/mysql/image-20211220185702150.91f610d6-166201207344457.png" alt="image-20211220185702150"></p><p>图3</p><h5 id="磁盘容量计算"><a href="#磁盘容量计算" class="headerlink" title="磁盘容量计算"></a>磁盘容量计算</h5><p>存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数</p><p>图3中磁盘是一个 3个圆盘6个磁头，7个柱面（每个盘片7个磁道） 的磁盘，图3中每条磁道有12个扇区，所以此磁盘的容量为：</p><p>存储容量 6 * 7 * 12 * 512 &#x3D; 258048</p><blockquote><p>每个磁道的扇区数一样是说的老的硬盘，外圈的密度小，内圈的密度大，每圈可存储的数据量是一样的。新的硬盘数据的密度都一致，这样磁道的周长越长，扇区就越多，存储的数据量就越大。</p></blockquote><h5 id="磁盘读取响应时间"><a href="#磁盘读取响应时间" class="headerlink" title="磁盘读取响应时间"></a>磁盘读取响应时间</h5><ol><li>寻道时间：磁头从开始移动到数据所在磁道所需要的时间，寻道时间越短，I&#x2F;O操作越快，目前磁盘的平均寻道时间一般在3－15ms，一般都在10ms左右。</li><li>旋转延迟：盘片旋转将请求数据所在扇区移至读写磁头下方所需要的时间，旋转延迟取决于磁盘转速。普通硬盘一般都是7200rpm，慢的5400rpm。</li><li>数据传输时间：完成传输所请求的数据所需要的时间。 小结一下：从上面的指标来看、其实最重要的、或者说、我们最关心的应该只有两个：寻道时间；旋转延迟。</li></ol><blockquote><p>读写一次磁盘信息所需的时间可分解为：寻道时间、延迟时间、传输时间。为提高磁盘传输效率，软件应着重考虑减少寻道时间和延迟时间。</p></blockquote><h5 id="块-x2F-簇"><a href="#块-x2F-簇" class="headerlink" title="块&#x2F;簇"></a>块&#x2F;簇</h5><p>磁盘块&#x2F;簇（虚拟出来的）。 块是操作系统中最小的逻辑存储单位。操作系统与磁盘打交道的最小单位是磁盘块。每个块可以包括2、4、8、16、32、64…2的n次方个扇区。</p><blockquote><p>为什么存在磁盘块？</p></blockquote><p>读取方便：由于扇区的数量比较小，数目众多在寻址时比较困难，所以操作系统就将相邻的扇区组合在一起，形成一个块，再对块进行整体的操作。</p><p>分离对底层的依赖：操作系统忽略对底层物理存储结构的设计。通过虚拟出来磁盘块的概念，在系统中认为块是最小的单位。</p><h5 id="page"><a href="#page" class="headerlink" title="page"></a>page</h5><p>操作系统经常与内存和硬盘这两种存储设备进行通信，类似于“块”的概念，都需要一种虚拟的基本单位。所以，与内存操作，是虚拟一个页的概念来作为最小单位。与硬盘打交道，就是以块为最小单位。</p><h5 id="扇区、块-x2F-簇、page的关系"><a href="#扇区、块-x2F-簇、page的关系" class="headerlink" title="扇区、块&#x2F;簇、page的关系"></a>扇区、块&#x2F;簇、page的关系</h5><ol><li>扇区： 硬盘的最小读写单元</li><li>块&#x2F;簇： 是操作系统针对硬盘读写的最小单元</li><li>page： 是内存与操作系统之间操作的最小单元。</li></ol><p>扇区 &lt;&#x3D; 块&#x2F;簇 &lt;&#x3D; page</p><h5 id="计算机读取数据流程"><a href="#计算机读取数据流程" class="headerlink" title="计算机读取数据流程"></a>计算机读取数据流程</h5><p> 当需要从磁盘读取数据时，系统会将数据地址传给磁盘，即确定要读的数据在哪个磁道，哪个扇区。为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做<code>寻道</code>，所耗费时间叫做<code>寻道时间</code>，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做<strong>旋转时间</strong>。</p><h5 id="局部性原理与磁盘预读"><a href="#局部性原理与磁盘预读" class="headerlink" title="局部性原理与磁盘预读"></a>局部性原理与磁盘预读</h5><p> 由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的十万分之一，因此为了提高效率，要<strong>尽量减少磁盘I&#x2F;O</strong>。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的<strong>局部性原理</strong>：</p><p> 当一个数据被用到时，其附近的数据也通常会马上被使用。</p><p> 程序运行期间所需要的数据通常比较集中。</p><p> 由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I&#x2F;O效率。</p><p> 预读的长度一般为<strong>页（page）</strong>的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p><p>下图是计算机硬件延迟的对比图，供大家参考：</p><p><img src="/2022/09/01/mysql/image-20211220185718788.4f28688a-166201207344458.png" alt="image-20211220185718788"></p><h4 id="mysql数据结构的选型"><a href="#mysql数据结构的选型" class="headerlink" title="mysql数据结构的选型"></a>mysql数据结构的选型</h4><p>从第一块内容中我们明白了磁盘是怎么存储文件的，而我们的mysql的数据文件又是存储在磁盘上的，所以我们有必要去研究一下，mysql是怎么保障数据在磁盘上存储，效率还能比较高的原因。</p><p>首先，在数据库文件存储在磁盘时，为了提升查询效率，一定会选用合适的数据结构进行文件的存储。接下来咱们探讨一下：</p><h5 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h5><p>肯定不能选，这种最基本的数据结构，各自的劣势太明显。</p><p>数据库对查询要求是最很高的所以链表这种查询必须全表遍历的基本数据结构是不能用的。</p><p>数组这种结构在添加数据时成本太大，插入数据时太过于频繁。</p><h5 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h5><p>类似与咱们的hashmap，这样行吗？ 速度快，但是只要是hash就会产生无序的问题，所以不常用但也有。</p><h5 id="树"><a href="#树" class="headerlink" title="树"></a>树</h5><p>看来看去也就是树这种结构比较合理了。</p><p>二叉查找树可以吗？</p><p>在查找一个数据时，二叉树是读取根节点，小则从左找，大则从右找，每次读取一个数据。没有办法合理的利用局部性原理与磁盘预读，IO次数太多太多，其次就是树的层次还是偏高，所以不适合。</p><p>那每次读多个数据，每一个节点存多个数据的结构就只有B-树和B+树了；</p><p>接下来就讨论这两种数据结构的选型。</p><h5 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h5><p>B-树,这里的 B 表示 balance( 平衡的意思),B-树是一种多路自平衡的搜索树 它类似普通的平衡二叉树，不同的一点是B-树允许每个节点有更多的子节点。下图是 B-树的简化图.</p><p><img src="/2022/09/01/mysql/image-20211220185730764.23e36eec-166201207344459.png" alt="image-20211220185730764"></p><p>B-树有如下特点:</p><ol><li>所有键值分布在整颗树中；</li><li>任何一个关键字出现且只出现在一个结点中；</li><li>搜索有可能在非叶子结点结束；</li><li>在关键字全集内做一次查找,性能逼近二分查找；</li></ol><h5 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+ 树"></a>B+ 树</h5><p>默认是主键，如果没有主键则使用唯一索引，唯一索引也没有则使用rowid，行号。</p><p>所以一定要建立主键。</p><p>B+树是B-树的变体，也是一种多路搜索树, 它与 B- 树的不同之处在于:</p><ol><li>所有关键字存储在叶子节点出现,内部节点(非叶子节点并不存储真正的 data)</li><li>为所有叶子结点增加了一个链指针</li></ol><p>简化 B+树 如下图</p><p><img src="/2022/09/01/mysql/image-20211220185740972.ff0c4b5b-166201207344460.png" alt="image-20211220185740972"></p><h5 id="为什么使用-B-树"><a href="#为什么使用-B-树" class="headerlink" title="为什么使用 B+树"></a>为什么使用 B+树</h5><ol><li>相对于 B 树 非叶子节点 没有数据， 一个页就能存更多的id， 可以大大减小层级。   每个节点能节点的范围更大更精确,I&#x2F;O效率更高。</li><li>Mysql是一种关系型数据库，区间访问是常见的一种情况，B+树叶节点增加的链指针,加强了区间访问性，可使用在范围区间查询等。</li></ol><p>  参考网上的回答：<a href="https://www.cnblogs.com/Candycan/p/14810842.html">数据库索引——B+树索引（为什么使用B+树作为MySql的索引结构，用什么好处？） - your_棒棒糖 - 博客园 (cnblogs.com)</a></p><h4 id="为什么要使用索引"><a href="#为什么要使用索引" class="headerlink" title="为什么要使用索引"></a>为什么要使用索引</h4><p>1、mysql的数据是存在磁盘上的，磁盘的读取速度是比较慢的使用主键的读取方式会很快，当数据来那个太大非主键的字段查询是会特别耗时。一条语句可能查询10秒以上。</p><p>2、建立在主键上的B+树结构可以快速查询出咱们的数据，那使用其他字段就一定要这么慢吗？</p><h4 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h4><h5 id="索引的数据结构-1"><a href="#索引的数据结构-1" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h5><p><img src="/2022/09/01/mysql/image-20211220185740972.ff0c4b5b-166201207344460.png" alt="image-20211220185740972"></p><p>最顶层的叶子节点为常驻内存，这样旧可以减少一次io</p><p>在数据库中，B+Tree的高度一般都在2<del>4层。mysql的innoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1</del>3次磁盘I&#x2F;O操作。</p><h5 id="有了索引怎么查询"><a href="#有了索引怎么查询" class="headerlink" title="有了索引怎么查询"></a>有了索引怎么查询</h5><ul><li>从索引里自上而下查询</li><li>走到叶子节点查询到id</li><li>根据id去聚簇索引中查找真正的数据，这个过程叫做<code>回表</code></li><li>如果你要的数据索引都有了不需要回表，就叫<code>索引覆盖</code>。</li></ul><h4 id="索引的分类和创建"><a href="#索引的分类和创建" class="headerlink" title="索引的分类和创建"></a>索引的分类和创建</h4><blockquote><p>索引的命名</p></blockquote><p>普通索引：idx_字段名</p><p>唯一索引：ux_字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 学科表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> subject(</span><br><span class="line"> id <span class="type">int</span>(<span class="number">10</span>) auto_increment,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> teacher_id <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> <span class="keyword">primary</span> key (id),</span><br><span class="line"> index idx_teacher_id (teacher_id));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 教师表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(</span><br><span class="line"> id <span class="type">int</span>(<span class="number">10</span>) auto_increment,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> teacher_no <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> <span class="keyword">primary</span> key (id),</span><br><span class="line"> <span class="keyword">unique</span> index unx_teacher_no (teacher_no(<span class="number">20</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"> id <span class="type">int</span>(<span class="number">10</span>) auto_increment,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> student_no <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> <span class="keyword">primary</span> key (id),</span><br><span class="line"> <span class="keyword">unique</span> index unx_student_no (student_no(<span class="number">20</span>)));</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 学生成绩表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_score(</span><br><span class="line"> id <span class="type">int</span>(<span class="number">10</span>) auto_increment,</span><br><span class="line"> student_id <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> subject_id <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> score <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> <span class="keyword">primary</span> key (id),</span><br><span class="line"> index idx_student_id (student_id),</span><br><span class="line"> index idx_subject_id (subject_id));</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 教师表增加名字普通索引 </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> index idx_name(name(<span class="number">20</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name,student_no) <span class="keyword">values</span> (<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;20200001&#x27;</span>),(<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;20200002&#x27;</span>),(<span class="string">&#x27;yan&#x27;</span>,<span class="string">&#x27;20200003&#x27;</span>),(<span class="string">&#x27;dede&#x27;</span>,<span class="string">&#x27;20200004&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(name,teacher_no) <span class="keyword">values</span>(<span class="string">&#x27;wangsi&#x27;</span>,<span class="string">&#x27;T2010001&#x27;</span>),(<span class="string">&#x27;sunsi&#x27;</span>,<span class="string">&#x27;T2010002&#x27;</span>),(<span class="string">&#x27;jiangsi&#x27;</span>,<span class="string">&#x27;T2010003&#x27;</span>),(<span class="string">&#x27;zhousi&#x27;</span>,<span class="string">&#x27;T2010004&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> subject(name,teacher_id) <span class="keyword">values</span>(<span class="string">&#x27;math&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;Chinese&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;English&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;history&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_score(student_id,subject_id,score) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">90</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">60</span>),(<span class="number">1</span>,<span class="number">3</span>,<span class="number">80</span>),(<span class="number">1</span>,<span class="number">4</span>,<span class="number">100</span>),(<span class="number">2</span>,<span class="number">4</span>,<span class="number">60</span>),(<span class="number">2</span>,<span class="number">3</span>,<span class="number">50</span>),(<span class="number">2</span>,<span class="number">2</span>,<span class="number">80</span>),(<span class="number">2</span>,<span class="number">1</span>,<span class="number">90</span>),(<span class="number">3</span>,<span class="number">1</span>,<span class="number">90</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">100</span>),(<span class="number">4</span>,<span class="number">1</span>,<span class="number">40</span>),(<span class="number">4</span>,<span class="number">2</span>,<span class="number">80</span>),(<span class="number">4</span>,<span class="number">3</span>,<span class="number">80</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h5 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h5><p><img src="/2022/09/01/mysql/image-20201122163422044.3237ed38.png" alt="image-20201122163422044"></p><ol><li>InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上，若使用”where id &#x3D; 14”这样的条件查找主键，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。</li><li>若对Name列进行条件搜索，则需要两个步骤：第一步在辅助索引B+树中检索Name，到达其叶子节点获取对应的主键。第二步使用主键在主索引B+树种再执行一次B+树检索操作，最终到达叶子节点即可获取整行数据。（重点在于通过其他键需要建立辅助索引）</li></ol><p><strong>聚簇索引具有唯一性</strong>，由于聚簇索引是将数据跟索引结构放到一块，因此一个表仅有一个聚簇索引。</p><p><strong>表中行的物理顺序和索引中行的物理顺序是相同的</strong>，在创建任何非聚簇索引之前创建聚簇索引，这是因为聚簇索引改变了表中行的物理顺序，数据行 按照一定的顺序排列，并且自动维护这个顺序；</p><p><strong>聚簇索引默认是主键</strong>，如果表中没有定义主键，InnoDB 会选择一个唯一且非空的索引代替。如果没有这样的索引，InnoDB 会隐式定义一个主键（类似oracle中的RowId）来作为聚簇索引。如果已经设置了主键为聚簇索引又希望再单独设置聚簇索引，必须先删除主键，然后添加我们想要的聚簇索引，最后恢复设置主键即可。</p><p><strong>MyISAM使用的是非聚簇索引，</strong>非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，这两颗B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</p><h6 id="使用聚簇索引的优势："><a href="#使用聚簇索引的优势：" class="headerlink" title="使用聚簇索引的优势："></a>使用聚簇索引的优势：</h6><p>1.由于行数据和聚簇索引的叶子节点存储在一起，同一页中会有多条行数据，访问同一数据页不同行记录时，已经把页加载到了Buffer中（缓存器），再次访问时，会在内存中完成访问，不必访问磁盘。这样主键和行数据是一起被载入内存的，找到叶子节点就可以立刻将行数据返回了，如果按照主键Id来组织数据，获得数据更快。</p><p><strong>自己的理解</strong>： 访问一页时，加载了行数据。。。例如查询2.。。。返回了1,2,3,4行数据。。后面再查3，就可以立马在缓存区拿到，而不用进入磁盘。。。但是 非聚集索引，只是记录了地址信息，没有排序，无法拿到附近的数据。</p><p>2.辅助索引的叶子节点，存储主键值，而不是数据的存放地址。好处是当行数据放生变化时，索引树的节点也需要分裂变化；或者是我们需要查找的数据，在上一次IO读写的缓存中没有，需要发生一次新的IO操作时，可以避免对辅助索引的维护工作，只需要维护聚簇索引树就好了。另一个好处是，因为辅助索引存放的是主键值，减少了辅助索引占用的存储空间大小。</p><p><strong>自己的理解</strong>，比如增删改，为了维护节点会造成地址变化。</p><p>注：我们知道一次io读写，可以获取到16K大小的资源，我们称之为读取到的数据区域为Page。而我们的B树，B+树的索引结构，叶子节点上存放好多个关键字（索引值）和对应的数据，都会在一次IO操作中被读取到缓存中，所以在访问同一个页中的不同记录时，会在内存里操作，而不用再次进行IO操作了。除非发生了页的分裂，即要查询的行数据不在上次IO操作的换村里，才会触发新的IO操作。</p><p>3.因为MyISAM的主索引并非聚簇索引，那么他的数据的物理地址必然是凌乱的，拿到这些物理地址，按照合适的算法进行I&#x2F;O读取，于是开始不停的寻道不停的旋转。聚簇索引则只需一次I&#x2F;O。（强烈的对比）</p><p>4.不过，如果涉及到大数据量的排序、全表扫描、count之类的操作的话，还是MyISAM占优势些，因为索引所占空间小，这些操作是需要在内存中完成的。</p><h6 id="主键建议使用自增id"><a href="#主键建议使用自增id" class="headerlink" title="主键建议使用自增id"></a>主键建议使用自增id</h6><p> 当使用主键为聚簇索引时，主键最好不要使用uuid，因为uuid的值太过离散，不适合排序且可能出线新增加记录的uuid，会插入在索引树中间的位置，导致索引树调整复杂度变大，消耗更多的时间和资源。</p><p>聚簇索引的数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻地存放在磁盘上的。如果主键不是自增id，那么可以想 象，它会干些什么，不断地调整数据的物理地址、分页，当然也有其他一些措施来减少这些操作，但却无法彻底避免。但，如果是自增的，那就简单了，它只需要一 页一页地写，索引结构相对紧凑，磁盘碎片少，效率也高。</p><h5 id="主键索引-（primary-key）"><a href="#主键索引-（primary-key）" class="headerlink" title="主键索引 （primary key）"></a>主键索引 （primary key）</h5><p>也简称主键。它可以提高查询效率，并提供唯一性约束。一张表中只能有一个主键。被标志为自动增长的字段一定是主键，但主键不一定是自动增长。一般把主键定义在无意义的字段上（如：编号），主键的数据类型最好是数值。</p><p>一种方法在创建表的时候创建，再次是修改表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (column_list)</span><br></pre></td></tr></table></figure><p>1</p><p>索引都能在创建表是指定</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_score(</span><br><span class="line"> id <span class="type">int</span>(<span class="number">10</span>) auto_increment,</span><br><span class="line"> student_id <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> subject_id <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> score <span class="type">int</span>(<span class="number">10</span>),</span><br><span class="line"> <span class="keyword">primary</span> key (id),</span><br><span class="line"> index idx_student_id (student_id),</span><br><span class="line"> index idx_subject_id (subject_id)</span><br><span class="line">); </span><br></pre></td></tr></table></figure><blockquote><p>小tips：</p></blockquote><p>int(n)括号里面的数字表示显示宽度，不是代表能存放多少位数，始终占用4个字节的空间int(M) 跟 int 数据类型是相同的。int(M) 只有跟 zerofill 结合起来，才能使我们清楚的看到不同之处 1.创建表t</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t(id <span class="type">int</span>(<span class="number">5</span>) zerofill);</span><br></pre></td></tr></table></figure><p>1</p><p>2.插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t(id) <span class="keyword">values</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>1</p><p>3.显示select * from t</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00010</span><br></pre></td></tr></table></figure><p>1</p><h5 id="普通索引-（常规索引）-normal"><a href="#普通索引-（常规索引）-normal" class="headerlink" title="普通索引 （常规索引）(normal)"></a>普通索引 （常规索引）(normal)</h5><p>就是普普通通的索引，没有什么特殊要求，创建方式如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_indexName <span class="keyword">ON</span> mytable(username(length)); </span><br></pre></td></tr></table></figure><p>1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_myDeptIndex <span class="keyword">on</span> detail(dept_id);</span><br></pre></td></tr></table></figure><p>1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX [idx_indexName] <span class="keyword">ON</span> mytable; </span><br></pre></td></tr></table></figure><p>1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> INDEX idx_index_name (column_list);</span><br></pre></td></tr></table></figure><p>1</p><h5 id="唯一索引（UNIQUE-）"><a href="#唯一索引（UNIQUE-）" class="headerlink" title="唯一索引（UNIQUE ）"></a>唯一索引（UNIQUE ）</h5><p>索引的值不能重复</p><p><strong>唯一索引（UNIQUE KEY）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX ux_indexName <span class="keyword">ON</span> mytable(username(length)) </span><br></pre></td></tr></table></figure><p>1</p><p>修改表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [ux_indexName] (username(length))</span><br></pre></td></tr></table></figure><p>1</p><ul><li>主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。</li><li>主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。</li><li>唯一性索引列允许空值，而主键列不允许为空值。</li><li>主键列在创建时，已经默认为非空值 + 唯一索引了。</li><li>主键可以被其他表引用为外键，而唯一索引不能。</li><li>一个表最多只能创建一个主键，但可以创建多个唯一索引。</li><li>主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。</li></ul><h5 id="全文索引（FULLTEXT）"><a href="#全文索引（FULLTEXT）" class="headerlink" title="全文索引（FULLTEXT）"></a>全文索引（FULLTEXT）</h5><p>做全文检索使用的索引，我们有更好的替代品 ElacticSearch，所以实际使用不多，只当了解。</p><p>通过数值比较、范围过滤等就可以完成绝大多数我们需要的查询，但是，如果希望通过关键字的匹配来进行查询过滤，那么就需要基于相似度的查询，而不是原来的精确数值比较。全文索引就是为这种场景设计的。</p><p>你可能会说，用 like + % 就可以实现模糊匹配了，为什么还要全文索引？like + % 在文本比较少时是合适的，但是对于大量的文本数据检索，是不可想象的。全文索引在大量的数据面前，能比 like + % 快 N 倍，速度不是一个数量级，但是全文索引可能存在精度问题。</p><p>你可能没有注意过全文索引，不过至少应该对一种全文索引技术比较熟悉：各种的搜索引擎。虽然搜索引擎的索引对象是超大量的数据，并且通常其背后都不是关系型数据库，不过全文索引的基本原理是一样的。</p><blockquote><p>全文索引的版本支持</p></blockquote><ol><li>MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</li><li>MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</li><li>只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</li></ol><blockquote><p>使用全文索引的注意</p></blockquote><ol><li>使用全文索引前，搞清楚版本支持情况；</li><li>全文索引比 like + % 快 N 倍，但是可能存在精度问题；</li><li>如果需要全文索引的是大量数据，建议先添加数据，再创建索引；</li><li>对于中文，可以使用 MySQL 5.7.6 之后的版本，或者第三方插件。</li></ol><p>1、创建表时创建全文索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> fulltext_test (</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    content text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    tag <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">    FULLTEXT KEY content_tag_fulltext(content,tag)  <span class="operator">/</span><span class="operator">/</span> 创建联合全文索引列</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;<span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7</p><p>2、在已存在的表上创建全文索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> fulltext index content_tag_fulltext</span><br><span class="line">    <span class="keyword">on</span> fulltext_test(content,tag);</span><br></pre></td></tr></table></figure><p>1<br>2</p><p>3、通过 SQL 语句 ALTER TABLE 创建全文索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> fulltext_test</span><br><span class="line">    <span class="keyword">add</span> fulltext index content_tag_fulltext(content,tag);</span><br></pre></td></tr></table></figure><p>1<br>2</p><p>4、直接使用 DROP INDEX 删除全文索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index content_tag_fulltext</span><br><span class="line">    <span class="keyword">on</span> fulltext_test;<span class="number">12</span></span><br></pre></td></tr></table></figure><p>1<br>2</p><p>5、通过 SQL 语句 ALTER TABLE 删除全文索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> fulltext_test</span><br><span class="line">    <span class="keyword">drop</span> index content_tag_fulltext;</span><br></pre></td></tr></table></figure><p>1<br>2</p><p>6、全文检索的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="keyword">match</span>(content) against(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure><p>1</p><h5 id="空间索引（SPATIAL）"><a href="#空间索引（SPATIAL）" class="headerlink" title="空间索引（SPATIAL）"></a>空间索引（SPATIAL）</h5><p>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。这是在地理位置领域使用的一种索引，其他场景用的很少，所以不需要深入学习。</p><h5 id="复合索引（联合索引）重要"><a href="#复合索引（联合索引）重要" class="headerlink" title="复合索引（联合索引）重要"></a>复合索引（联合索引）重要</h5><p>当有多个查询条件时，我们推荐使用复合索引。索引的<code>组合使用</code>（索引合并）效率是低于<code>复合索引</code>的。</p><p>比如：我们经常按照 A列 B列 C列进行查询时，通常的做法是建立一个由三个列共同组成的复合索引而不是对每一个列建立普通索引。</p><p><img src="/2022/09/01/mysql/image-20201130174603592.a2da4626.png" alt="image-20201130174603592"></p><p>关于复合索引的一些知识：</p><blockquote><p>为什么要使用联合索引</p></blockquote><p><strong>减少开销。</strong>建一个联合索引<code>(Gid,Cid,SId)</code>，实际相当于建了<code>(Gid)、(Gid,Cid)、(Gid,Cid,SId)</code>三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用联合索引会大大的减少开销！</p><p><strong>覆盖索引。</strong>对联合索引<code>(Gid,Cid,SId)</code>，如果有如下的sql: select <code>Gid,Cid,SId</code> from student where <code>Gid</code>&#x3D;1 and <code>Cid</code>&#x3D;2。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机io操作。减少io操作，特别的随机io其实是dba主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</p><p><strong>效率高。</strong>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:select from table where <code>Gid</code>&#x3D;1 and <code>Cid</code>&#x3D;2 and <code>SId</code>&#x3D;3,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W10%&#x3D;100w条数据，然后再回表从100w条数据中找到符合<code>Gid</code>&#x3D;2 and <code>Cid</code>&#x3D; 3的数据，然后再排序，再分页；如果是联合索引，通过索引筛选出1000w10% 10% *10%&#x3D;1w，效率提升可想而知！</p><p><strong>缺点。</strong>联合索引越多，索引列越多，则创建的索引越多，索引都是存储在磁盘里的，通过索引算法(Btree代表索引算法使用二叉树的形式来做索引的)来查找数据，的确可以极大的提高查询效率，但是与此同时增删改的同时，需要更新索引，同样是需要花时间的，并且索引所占的磁盘空间也不小。</p><p><strong>建议。</strong>单表尽可能不要超过一个联合索引，单个联合索引不超过3个</p><blockquote><p>联合索引的创建注意事项</p></blockquote><p>1.<code>最左前缀匹配原则</code>，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.&#x3D;和in可以乱序，比如a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p><p>把范围查询的字段放在后边</p><blockquote><p>创建联合索引，就是括号里多了几个列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert <span class="keyword">table</span> test <span class="keyword">add</span> idx_clo1_col2 <span class="keyword">table</span> (a1,a2,a3) </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_clo1_col2 <span class="keyword">on</span> <span class="keyword">table</span>(a1,a2,a3);</span><br></pre></td></tr></table></figure><h5 id="hash索引"><a href="#hash索引" class="headerlink" title="hash索引"></a>hash索引</h5><ul><li>hash相信大家应该都很熟悉，hash是一种key-value形式的数据结构。实现一般是数组+链表的结构，通过hash函数计算出key在数组中的位置，然后如果出现hash冲突就通过链表来解决。当然还有其他的解决hash冲突的方法。hash这种数据结构是很常用的，比如我们系统使用HashMap来构建热点数据缓存，存取效率很好。</li><li>hash结构存数据首先通过计算key的hash值来确定其在数组中的位置，如果有冲突就在该数组位置建一个链表。这样很明显有几个问题：</li><li>即使是具有相同特征的key计算出来的位置可能相隔很远，连续查询效率低下。即<code>不支持范围查询</code>。</li><li>hash索引存储的是计算得到的hash值和行指针，而不存储具体的行值，所以通过hash索引查询数据需要进行两次查询(首先查询行的位置，然后找到具体的数据)</li><li>hash索引查询数据的前提就是计算hash值，也就是要求key为一个能准确指向一条数据的key，所以对于like等一类的匹配查询是不支持的。</li><li><strong>所以我们可以知道的是hash索引适用于快速选取某一行的数据，超级大表中定位某一行特别快。</strong></li><li><strong>只要是只需要做等值比较查询，而不包含排序或范围查询的需求，都适合使用哈希索引。</strong></li></ul><p>创建的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index index_test <span class="keyword">using</span> hash <span class="keyword">on</span> test1(id);</span><br></pre></td></tr></table></figure><p>你会发现创建了也没有用，因为InnoDB和myIsam都不支持hash索引。</p><p><img src="/2022/09/01/mysql/image-20201130170655340.e8a6028e-166201207344461.png" alt="image-20201130170655340"></p><blockquote><p>创建自定义hash索引</p></blockquote><p>若存储引擎不支持hash索引，又想拥有hash索引所带来的性能提升，则可以模拟InnoDB一样创建哈希索引。 　　思路也比较简单，就是在B+tree基础上创建一个伪哈希索引。这和真正的hash索引不是一回事，因为还是采用B-Tree进行查找，但是它使用的是hash值而不是键本身进行查找。只需要在查询的where子句中手动指定使用hash函数即可。下面举个简单的例子：</p><p>比如：当我们需要存储大量的URL，并需要根据URL进行搜索查找。若用B-Tree来存储URL，存储的内容就会很大。此时的查询语句就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> url <span class="keyword">where</span> url <span class="operator">=</span> &quot;www.baidu.com&quot;;</span><br></pre></td></tr></table></figure><p>若删除原来的url列上的索引，而新增一个被索引的url_crc列，使用crc32做hash函数，则可以使用如下方式查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> url <span class="keyword">where</span> url <span class="operator">=</span> &quot;www.baidu.com&quot; <span class="keyword">and</span> url_crc<span class="operator">=</span>CRC32(&quot;www.baidu.com&quot;);</span><br></pre></td></tr></table></figure><p>这样做的话，性能就会有很大提升，因为mysql优化器会使用这个选择性高而体积很小的基于url_crc列的索引来完成查找。即使有多个记录相同的索引值，查找仍然很快，只需要根据hash值做快速的整数比较就能找到索引条目，然后一一返回对应的行。</p><p><strong>缺点</strong> 1、需要维护hash值，可以手动维护，也可以使用触发器实现。 2、若数据表非常大的话，CRC32（）会出现大量hash冲突，则可以自己实现一个64位的hash函数，这个自定义的hash函数要返回整数而不是字符串，因为范围整数，对此效率更高。一个简单的办法就是使用MD5（）函数返回值的一部分来作为自定义的hash函数。但是这可能比自己写一个hash算法性能要差一些。</p><p>案例博客：<a href="https://segmentfault.com/a/1190000003741888">https://segmentfault.com/a/1190000003741888</a></p><h4 id="navicat中创建索引"><a href="#navicat中创建索引" class="headerlink" title="navicat中创建索引"></a>navicat中创建索引</h4><p>设计表中的索引模块</p><p><img src="/2022/09/01/mysql/image-20201130174637501.3643489b-166201207344462.png" alt="image-20201130174637501"></p><h4 id="使用索引的问题"><a href="#使用索引的问题" class="headerlink" title="使用索引的问题"></a>使用索引的问题</h4><p>设计好MySql的索引可以让你的数据库飞起来，大大的提高数据库效率。</p><p>但是你设计了索引就一定会用到码？索引就不会给你带来一些问题吗？</p><p>设计MySql索引的时候有一下几点注意：</p><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><p>对于<code>查询占主要</code>的应用来说，索引显得尤为重要。很多时候性能问题很简单的就是因为我们忘了添加索引而造成的，或者说没有添加更为有效的索引导致。如果不加索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下降。但是也不是什么情况都非得建索引不可，比如性别可能就只有两个值，建索引不仅没什么优势，还会影响到更新速度，这被称为过度索引。</p><blockquote><p>哪些情况下适合建索引</p></blockquote><ol><li><p>频繁作为where条件语句查询的字段</p></li><li><p>关联字段需要建立索引，例如外键字段，student表中的classid, classes表中的schoolid 等</p></li><li><p>排序字段可以建立索引</p></li><li><p>分组字段可以建立索引，因为分组的前提是排序</p></li><li><p>统计字段可以建立索引，例如count(),max()</p></li></ol><blockquote><p>哪些情况下不适合建索引</p></blockquote><pre><code> 1.频繁更新的字段不适合建立索引</code></pre><p>​2.where条件中用不到的字段不适合建立索引</p><p>​3.表数据可以确定比较少的不需要建索引</p><p>​4.数据重复且发布比较均匀的的字段不适合建索引（唯一性太差的字段不适合建立索引），例如性别，真假值</p><p>​假如索引列TYPE有5个键值，如果有1万条数据，那么 WHERE TYPE &#x3D; 1将访问表中的2000个数据块。再加上访问索引块，一共要访问大于200个的数据块。如果全表扫描，假设10条数据一个数据块，那么只需访问1000个数据块，既然全表扫描访问的数据块少一些，肯定就不会利用索引了。</p><p>​5.参与列计算的列不适合建索引，索引会失效</p><h5 id="习惯使用复合索引"><a href="#习惯使用复合索引" class="headerlink" title="习惯使用复合索引"></a>习惯使用复合索引</h5><p>比如有一条语句是这样的：select * from users where area&#x3D;’beijing’ and age&#x3D;22;</p><p>如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效</p><p>率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age,</p><p>salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀</p><p>特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。</p><h5 id="索引不会包含有NULL值的列"><a href="#索引不会包含有NULL值的列" class="headerlink" title="索引不会包含有NULL值的列"></a>索引不会包含有NULL值的列</h5><p>a.单列索引无法储null值，复合索引无法储全为null的值。</p><p>b.查询时，采用is null条件时，不能利用到索引，只能全表扫描。</p><p>为什么索引列无法存储Null值？</p><p>a.索引是有序的。NULL值进入索引时，无法确定其应该放在哪里。（将索引列值进行建树，其中必然涉及到诸多的比较操作，null 值是不确定值无法</p><p>比较，无法确定null出现在索引树的叶子节点位置。）</p><p>b.如果需要把空值存入索引，方法有二：其一，把NULL值转为一个特定的值，在WHERE中检索时，用该特定值查找。其二，建立一个复合索引。例如</p><p>create index ind_a on table(col1,1); 通过在复合索引中指定一个非空常量值，而使构成索引的列的组合中，不可能出现全空值。</p><h5 id="使用短索引"><a href="#使用短索引" class="headerlink" title="使用短索引"></a>使用短索引</h5><p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I&#x2F;O操作。</p><h5 id="排序的索引问题"><a href="#排序的索引问题" class="headerlink" title="排序的索引问题"></a>排序的索引问题</h5><p>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建<code>复合索引</code>。</p><h5 id="MySQL索引失效的几种情况"><a href="#MySQL索引失效的几种情况" class="headerlink" title="MySQL索引失效的几种情况"></a>MySQL索引失效的几种情况</h5><ul><li>如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引</li><li>复合索引不满足最左原则就不能使用索引</li><li>like查询以%开头</li><li>如果mysql估计使用全表扫描要比使用索引快,则不使用索引</li></ul><h5 id="MySQL主要提供2种方式的索引：B-Tree索引，Hash索引"><a href="#MySQL主要提供2种方式的索引：B-Tree索引，Hash索引" class="headerlink" title="MySQL主要提供2种方式的索引：B-Tree索引，Hash索引"></a>MySQL主要提供2种方式的索引：B-Tree索引，Hash索引</h5><ul><li>B树索引具有<strong>范围查找和前缀查找的能力</strong>，对于有N节点的B树，检索一条记录的复杂度为O(LogN)。相当于二分查找。</li><li>哈希索引只能做等于查找，但是无论多大的Hash表，查找复杂度都是O(1)。</li><li>显然，如果值的差异性大，并且以等值查找（&#x3D;、 &lt;、&gt;、in）为主，Hash索引是更高效的选择，它有O(1)的查找复杂度。</li><li>如果值的差异性相对较差，并且以范围查找为主，B树是更好的选择，它支持范围查找。</li></ul><h5 id="面试回答问题"><a href="#面试回答问题" class="headerlink" title="面试回答问题"></a>面试回答问题</h5><p>为什么要建立索引？</p><p>因为如果数据比较多的话， 一个个去遍历比较会比较慢。如果使用索引的话，索引是有组织过的数据。是有序的，可以更快的查到数据。有序的结构可以更快查到数据，例如，一个无需的数组，咱们需要遍历全部元素才可以查询到数据。但是如果排过数据，就可以二分查询。</p><p>innoDB 当然不是使用数组的形式来构建数据，innoDB采用了 B + 树来进行构建数据，该数据结构，在每个节点上可以保存更多的关键字，来减少层级。这样可以减少IO次数。在叶子节点通过指针链接在一起。可以用来做范围查询。 同时，内存页加载到相邻数据更多，又进一步减少了访问IO次数。 磁盘IO是关系型数据库主要要解决的问题，解决了磁盘IO问题才可以更快响应应用程序。Mysql的索引很大一部分都是围绕这个点进行的。 </p><p><a href="https://blog.csdn.net/qq_36520235/article/details/94317993">(37条消息) 为什么MySQL使用B+而不是使用B树、二叉树、AVL树呢？（来龙去脉的去理解）_王伟的博客-CSDN博客_mysql为什么用b+,不用b</a></p><p>为什么使用B+ 树而不使用B树？</p><p> 原因是，B+ 树的数据都是存在</p><h4 id="explain关键字"><a href="#explain关键字" class="headerlink" title="explain关键字"></a>explain关键字</h4><blockquote><p>explain关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈。</p></blockquote><h5 id="explain的用途"><a href="#explain的用途" class="headerlink" title="explain的用途"></a>explain的用途</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 表的读取顺序如何</span><br><span class="line">2. 数据读取操作有哪些操作类型</span><br><span class="line">3. 哪些索引可以使用</span><br><span class="line">4. 哪些索引被实际使用</span><br><span class="line">5. 表之间是如何引用</span><br><span class="line">6. 每张表有多少行被优化器查询</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h5 id="explain的执行效果"><a href="#explain的执行效果" class="headerlink" title="explain的执行效果"></a>explain的执行效果</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> subject <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">           id: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        <span class="keyword">table</span>: subject</span><br><span class="line">   partitions: <span class="keyword">NULL</span></span><br><span class="line">         type: const</span><br><span class="line">possible_keys: <span class="keyword">PRIMARY</span></span><br><span class="line">          key: <span class="keyword">PRIMARY</span></span><br><span class="line">      key_len: <span class="number">4</span></span><br><span class="line">          <span class="keyword">ref</span>: const</span><br><span class="line">         <span class="keyword">rows</span>: <span class="number">1</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h5 id="explain包含的字段"><a href="#explain包含的字段" class="headerlink" title="explain包含的字段"></a>explain包含的字段</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. id //select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</span><br><span class="line">2. select_type //查询类型</span><br><span class="line">3. table //正在访问哪个表</span><br><span class="line">4. partitions //匹配的分区</span><br><span class="line">5. type //访问的类型</span><br><span class="line">6. possible_keys //显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</span><br><span class="line">7. key //实际使用到的索引，如果为NULL，则没有使用索引</span><br><span class="line">8. key_len //表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</span><br><span class="line">9. ref //显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</span><br><span class="line">10. rows //根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</span><br><span class="line">11. filtered //查询的表行占表的百分比</span><br><span class="line">12. Extra //包含不适合在其它列中显示但十分重要的额外信息</span><br></pre></td></tr></table></figure><h6 id="id字段"><a href="#id字段" class="headerlink" title="id字段"></a>id字段</h6><p><strong>1. id相同</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行顺序从上至下</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject,student_score,teacher where subject.id = student_id and subject.teacher_id = teacher.id;</span><br><span class="line">读取顺序：subject &gt; teacher &gt; student_score</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220185904178.23754ea6-166201207344463.png" alt="image-20211220185904178"></p><p><strong>2. id不同</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果是子查询，id的序号会递增，id的值越大优先级越高，越先被执行</span><br><span class="line">例子：</span><br><span class="line">explain select score.* from student_score as score where subject_id =  (select id from subject where teacher_id = (select id from teacher where id = 2));</span><br><span class="line">读取顺序：teacher &gt; subject &gt; student_score</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220185917085.26c148d2.png" alt="image-20211220185917085"></p><p><strong>3. id相同又不同</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id如果相同，可以认为是一组，从上往下顺序执行</span><br><span class="line">在所有组中，id值越大，优先级越高，越先执行</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject left join teacher on subject.teacher_id = teacher.id</span><br><span class="line">nion </span><br><span class="line"> -&gt; select subject.* from subject right join teacher on subject.teacher_id = teacher.id;</span><br><span class="line"> 读取顺序：2.teacher &gt; 2.subject &gt; 1.subject &gt; 1.teacher</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220185929385.01a7907f-166201207344464.png" alt="image-20211220185929385"></p><h6 id="select-type字段"><a href="#select-type字段" class="headerlink" title="select_type字段"></a>select_type字段</h6><p><strong>1. SIMPLE</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">简单查询，不包含子查询或Union查询</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject,student_score,teacher where subject.id = student_id and subject.teacher_id = teacher.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220185949668.a206a040-166201207344465.png" alt="image-20211220185949668"></p><p><strong>2. PRIMARY</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询中若包含任何复杂的子部分，最外层查询则被标记为主查询</span><br><span class="line">例子：</span><br><span class="line">explain select score.* from student_score as score where subject_id = (select id from subject where teacher_id = (select id from teacher where id = 2));</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190000990.b9749798-166201207344466.png" alt="image-20211220190000990"></p><p><strong>3. SUBQUERY</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在select或where中包含子查询</span><br><span class="line">例子：</span><br><span class="line">explain select score.* from student_score as score where subject_id = (select id from subject where teacher_id = (select id from teacher where id = 2));</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190011526.c55c03f5-166201207344467.png" alt="image-20211220190011526"></p><p><strong>4. DERIVED</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在FROM列表中包含的子查询被标记为DERIVED（衍生），MySQL</span><br><span class="line">会递归执行这些子查询，把结果放在临时表中</span><br><span class="line">备注：</span><br><span class="line">MySQL5.7+ 进行优化了，增加了derived_merge（派生合并），默认开启，可加快查询效率</span><br></pre></td></tr></table></figure><p><strong>5. UNION</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">若第二个select出现在uion之后，则被标记为UNION</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject left join teacher on subject.teacher_id = teacher.id</span><br><span class="line"> -&gt; union </span><br><span class="line"> -&gt; select subject.* from subject right join teacher on subject.teacher_id = teacher.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190022655.fbcb13a5.png" alt="image-20211220190022655"></p><p><strong>6. UNION RESULT</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从UNION表获取结果的select</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject left join teacher on subject.teacher_id = teacher.id</span><br><span class="line"> -&gt; union </span><br><span class="line"> -&gt; select subject.* from subject right join teacher on subject.teacher_id = teacher.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190032207.191959be-166201207344468.png" alt="image-20211220190032207"></p><h6 id="type字段"><a href="#type字段" class="headerlink" title="type字段"></a>type字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NULL&gt;system&gt;const&gt;eq_ref&gt;ref&gt;fulltext&gt;ref_or_null&gt;index_merge&gt;unique_subquery&gt;index_subquery&gt;range&gt;index&gt;ALL //最好到最差</span><br><span class="line">备注：掌握以下10种常见的即可</span><br><span class="line">NULL&gt;system&gt;const&gt;eq_ref&gt;ref&gt;ref_or_null&gt;index_merge&gt;range&gt;index&gt;ALL</span><br></pre></td></tr></table></figure><p><strong>1. NULL</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引，比如通过id没有找到</span><br><span class="line">例子：</span><br><span class="line">explain select min(id) from subject;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190040931.415a680d-166201207344469.png" alt="image-20211220190040931"></p><p><strong>2. system</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表只有一行记录（等于系统表），这是const类型的特列，平时不大会出现，可以忽略</span><br></pre></td></tr></table></figure><p><strong>3. const</strong></p><p>只有唯一索引和id才能出现</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表示通过索引一次就找到了，const用于比较primary key或uique索引，因为只匹配一行数据，所以很快，如主键置于where列表中，MySQL就能将该查询转换为一个常量</span><br><span class="line">例子：</span><br><span class="line">explain select * from teacher where teacher_no = &#x27;T2010001&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190050963.5889db4d-166201207344470.png" alt="image-20211220190050963"></p><p><strong>4. eq_ref</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject left join teacher on subject.teacher_id = teacher.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190059802.86cdfcad-166201207344471.png" alt="image-20211220190059802"></p><p><strong>5. ref</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">非唯一性索引扫描，返回匹配某个单独值的所有行</span><br><span class="line">本质上也是一种索引访问，返回所有匹配某个单独值的行</span><br><span class="line">然而可能会找到多个符合条件的行，应该属于查找和扫描的混合体</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject,student_score,teacher where subject.id = student_id and subject.teacher_id = teacher.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190109040.7592f0f1.png" alt="image-20211220190109040"></p><p><strong>6. ref_or_null</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类似ref，但是可以搜索值为NULL的行</span><br><span class="line">例子：</span><br><span class="line">explain select * from teacher where name = &#x27;wangsi&#x27; or name is null;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190118650.a4c59aa4-166201207344472.png" alt="image-20211220190118650"></p><p><strong>7. index_merge</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表示使用了索引合并的优化方法</span><br><span class="line">例子：</span><br><span class="line">explain select * from teacher where id = 1 or teacher_no = &#x27;T2010001&#x27; .</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190129635.fb995207.png" alt="image-20211220190129635"></p><p><strong>8. range</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只检索给定范围的行，使用一个索引来选择行，key列显示使用了哪个索引</span><br><span class="line">一般就是在你的where语句中出现between、&lt;&gt;、in等的查询。</span><br><span class="line">例子：</span><br><span class="line">explain select * from subject where id between 1 and 3;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190140237.0513300b-166201207344473.png" alt="image-20211220190140237"></p><p><strong>9. index</strong>（全索引扫描）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Full index Scan，Index与All区别：index只遍历索引树，通常比All快</span><br><span class="line">因为索引文件通常比数据文件小，也就是虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘读的。</span><br><span class="line">例子：</span><br><span class="line">explain select id from subject;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190149239.5f833d80-166201207344474.png" alt="image-20211220190149239"></p><p><strong>10. ALL</strong>（全表扫）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Full Table Scan，将遍历全表以找到匹配行</span><br><span class="line">例子：</span><br><span class="line">explain select * from subject;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190158161.936afdb3-166201207344475.png" alt="image-20211220190158161"></p><h6 id="table字段"><a href="#table字段" class="headerlink" title="table字段"></a>table字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据来自哪张表</span><br></pre></td></tr></table></figure><h6 id="possible-keys字段"><a href="#possible-keys字段" class="headerlink" title="possible_keys字段"></a>possible_keys字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">显示可能应用在这张表中的索引，一个或多个</span><br><span class="line">查询涉及到的字段若存在索引，则该索引将被列出，但不一定被实际使用</span><br></pre></td></tr></table></figure><h6 id="key字段"><a href="#key字段" class="headerlink" title="key字段"></a>key字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实际使用到的索引，如果为NULL，则没有使用索引</span><br><span class="line">查询中若使用了覆盖索引（查询的列刚好是索引），则该索引仅出现在key列表</span><br></pre></td></tr></table></figure><h6 id="key-len字段"><a href="#key-len字段" class="headerlink" title="key_len字段"></a>key_len字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</span><br><span class="line">在不损失精确度的情况下，长度越短越好</span><br><span class="line">key_len显示的值为索引字段最大的可能长度，并非实际使用长度</span><br><span class="line">即key_len是根据定义计算而得，不是通过表内检索出的</span><br></pre></td></tr></table></figure><h6 id="ref字段"><a href="#ref字段" class="headerlink" title="ref字段"></a>ref字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</span><br></pre></td></tr></table></figure><h6 id="rows字段"><a href="#rows字段" class="headerlink" title="rows字段"></a>rows字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</span><br></pre></td></tr></table></figure><h6 id="partitions字段"><a href="#partitions字段" class="headerlink" title="partitions字段"></a>partitions字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配的分区</span><br></pre></td></tr></table></figure><h6 id="filtered字段"><a href="#filtered字段" class="headerlink" title="filtered字段"></a>filtered字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询的表行占表的百分比</span><br></pre></td></tr></table></figure><h6 id="Extra字段"><a href="#Extra字段" class="headerlink" title="Extra字段"></a>Extra字段</h6><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包含不适合在其它列中显示但十分重要的额外信息</span><br></pre></td></tr></table></figure><ol><li><strong>Using filesort</strong></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">说明MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取</span><br><span class="line">MySQL中无法利用索引完成的排序操作称为“文件排序”</span><br><span class="line">例子：</span><br><span class="line">explain select * from subject order by name;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190212555.1b4db533-166201207344476.png" alt="image-20211220190212555"></p><p><strong>2. Using temporary</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用了临时表保存中间结果，MySQL在对结果排序时使用临时表，常见于排序order by 和分组查询group by</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject left join teacher on subject.teacher_id = teacher.id</span><br><span class="line"> -&gt; union </span><br><span class="line"> -&gt; select subject.* from subject right join teacher on subject.teacher_id = teacher.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190220539.3dc53162.png" alt="image-20211220190220539"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">表示相应的select操作中使用了覆盖索引（Covering Index）,避免访问了表的数据行，效率不错！</span><br><span class="line">如果同时出现using where，表明索引被用来执行索引键值的查找</span><br><span class="line">如果没有同时出现using where，表明索引用来读取数据而非执行查找动作</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject,student_score,teacher where subject.id = student_id and subject.teacher_id = teacher.id;</span><br><span class="line">备注：</span><br><span class="line">覆盖索引：select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件，即查询列要被所建的索引覆盖</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190229214.0e36b860.png" alt="image-20211220190229214"></p><p><strong>3. Using where</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用了where条件</span><br><span class="line">例子：</span><br><span class="line">explain select subject.* from subject,student_score,teacher where subject.id = student_id and subject.teacher_id = teacher.id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190242306.f11b316e.png" alt="image-20211220190242306"></p><p><strong>4. Using join buffer</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用了连接缓存</span><br><span class="line">例子：</span><br><span class="line">explain select student.*,teacher.*,subject.* from student,teacher,subject;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190252786.92be6455.png" alt="image-20211220190252786"></p><p><strong>5. impossible where</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">where子句的值总是false，不能用来获取任何元组</span><br><span class="line">例子：</span><br><span class="line">explain select * from teacher where name = &#x27;wangsi&#x27; and name = &#x27;lisi&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190304170.89f489f0-166201207344477.png" alt="image-20211220190304170"></p><p><strong>6. distinct</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一旦mysql找到了与行相联合匹配的行，就不再搜索了</span><br><span class="line">例子：</span><br><span class="line">explain select distinct teacher.name from teacher left join subject on teacher.id = subject.teacher_id;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190315525.43c223db-166201207344478.png" alt="image-20211220190315525"></p><p><strong>7. Select tables optimized away</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT操作已经优化到不能再优化了（MySQL根本没有遍历表或索引就返回数据了）</span><br><span class="line">例子：</span><br><span class="line">explain select min(id) from subject;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/01/mysql/image-20211220190327314.2c8c39ce-166201207339755.png" alt="image-20211220190327314"></p><h2 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h2><h4 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h4><p>(1)在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。 (2)事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。 (3)事务用来管理 insert,update,delete 语句。</p><h4 id="事务四大特征"><a href="#事务四大特征" class="headerlink" title="事务四大特征"></a>事务四大特征</h4><p>一般来说，事务是必须满足4个条件（ACID）：</p><h5 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h5><p>一个事务（transaction）中的所有操作，<strong>要么全部完成，要么全部不完成</strong>，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><h5 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h5><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。(<strong>比如：A向B转账，不可能A扣了钱，B却没有收到</strong>)</p><h5 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h5><p>数据库<strong>允许多个并发事务同时对其数据进行读写和修改的能力</strong>，隔离性可以防止多个事务并发执行时由于<strong>交叉执行而导致数据的不一致</strong>。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。（比u人：A正在从一张银行卡里面取钱，在A取钱的过程中，B不能向这张银行卡打钱）</p><h5 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h5><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p><h4 id="事务提交、回滚"><a href="#事务提交、回滚" class="headerlink" title="事务提交、回滚"></a>事务提交、回滚</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- UNSIGNED代表无符号数，不能是负数 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">balance <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) UNSIGNED</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;楠哥&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;楠哥老婆&#x27;</span>,<span class="number">50000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账业务，必须都成功，或者都失败，所以不能一句一句执行，万一执行了一半，断电了咋办</span></span><br><span class="line"><span class="comment">-- 所以要编程一个整体</span></span><br><span class="line"><span class="comment">-- 都成功</span></span><br><span class="line"><span class="comment">-- begin;</span></span><br><span class="line"><span class="keyword">start</span> transaction;    </span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 都失败</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><h4 id="事务特性–隔离性"><a href="#事务特性–隔离性" class="headerlink" title="事务特性–隔离性"></a>事务特性–隔离性</h4><p>隔离强调的是两个或两个以上同时发生（并发）的业务同时操作一个数据库，为了让两个事务一方面能都看到、得到正确的结果，一方面还要保证一定的效率而产生的不同的隔离级别。</p><h5 id="隔离性有隔离级别"><a href="#隔离性有隔离级别" class="headerlink" title="隔离性有隔离级别"></a>隔离性有隔离级别</h5><p>（1）读未提交：read uncommitted （2）读已提交：read committed （3）可重复读：repeatable read （4）串行化：serializable</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>查看个设置事务的隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.tx_isolation, @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level repeatable read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span>  transaction isolation level read uncommitted;</span><br><span class="line"><span class="keyword">SET</span>  transaction isolation level read committed;</span><br><span class="line"><span class="keyword">set</span>  transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">SET</span>  transaction isolation level serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> transaction isolation level read uncommitted;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> transaction isolation level read committed;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> transaction isolation level serializable;</span><br><span class="line"></span><br><span class="line">其中，SESSION 和 <span class="keyword">GLOBAL</span> 关键字用来指定修改的事务隔离级别的范围：</span><br><span class="line">SESSION：表示修改的事务隔离级别将应用于当前 session（当前 cmd 窗口）内的所有事务；</span><br><span class="line"><span class="keyword">GLOBAL</span>：表示修改的事务隔离级别将应用于所有 session（全局）中的所有事务，且当前已经存在的 session 不受影响；</span><br><span class="line">如果省略 SESSION 和 <span class="keyword">GLOBAL</span>，表示修改的事务隔离级别将应用于当前 session 内的下一个还未开始的事务。</span><br></pre></td></tr></table></figure><h6 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h6><ul><li>事物A和事物B，事物A未提交的数据，事物B可以读取到</li><li>这里读取到的数据叫做“脏数据”，叫脏读</li><li>这种隔离级别最低，这种级别一般是在理论上存在，数据库隔离级别一般都高于该级别</li></ul><p>简而言之第一个事务没提交，别的事物就能读，这种数据不一定是正确的因为人家可能回滚呀！</p><p><strong>案例：</strong></p><p>楠哥发工资了，老婆让楠哥把工资打到他老婆的账号上，但是该事务并未提交，就让老婆去查看，老婆一看真的打了钱了，高高兴兴关了网页，此时楠哥急中生智进行回滚，钱瞬间回来，一次蒙混了一个月工资。所以楠哥老婆看到的数据我们称之为“脏数据”。</p><p>必须开两个事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br><span class="line"><span class="keyword">SET</span>  transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><p>1-楠哥，转账</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">10000</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">10000</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>2-楠哥老婆，查账，不错，钱已到账</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>3-楠哥,回马枪，回滚</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p>4-楠老婆某天查账，哎，怎么少了一万</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>出现上述情况，即我们所说的脏读 ，两个并发的事务，“事务A：领导给singo发工资”、“事务B：singo查询工资账户”，事务B读取了事务A尚未提交的数据。</p><h6 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h6><p>能读到别的事物已经提交的数据。</p><p>A事务在本次事务中，对自己操作过的数据，进行了多次读取发现数据不一致，不可重复读。</p><p>简单点说就是不能让我好好的重复读，一个事务里读出来的数据都不一样，让不让人干活了。</p><p>针对的语句update和delete，会导致不可重复读</p><p>楠哥拿着工资卡去消费，系统读取到卡里确实有10200元，而此时她的老婆也正好在网上转账，把楠哥工资卡的2000元转到另一账户，并在 楠哥之前提交了事务，当楠哥扣款时，系统检查到楠哥的工资卡和上次读取的不一样了，楠哥十分纳闷，明明卡里有钱，为何……</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET  transaction isolation level read committed;</span><br></pre></td></tr></table></figure><p>1-楠哥去消费了，显示有余额，贼高兴</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from user where id = 1;</span><br></pre></td></tr></table></figure><p>2-老婆转账</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3-楠哥查账，同一个事务里，发现钱少了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当隔离级别设置为Read committed 时，避免了脏读，但是可能会造成不可重复读。</p><p>大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。如何解决不可重复读这一问题，请看下一个隔离级别。</p><h6 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h6><p>A事务在本次事务中对未操作的数据进行多次查询，发现第一次没有，第二次出现了就像幻觉一样。或者第一次有而第二次没有。针对delete和insert。</p><p><strong>案例</strong></p><p>楠哥的老婆在银行部门工作，她时常通过银行内部系统查看楠哥的账户信息。有一天，她正在查询到楠哥账户信息时发现楠哥只有一个账户，心想这家伙应该没有私房钱。此时楠哥在另外一家分行右开了一个账户，准备存私房钱。一次同时楠哥老婆点击了打印，结果打印出的楠哥账户居然多了一个，真实奇怪。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set  transaction isolation level repeatable read;</span><br></pre></td></tr></table></figure><p>1-楠哥开启事务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br></pre></td></tr></table></figure><p>2-老婆查账户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;楠哥&#x27;</span>;</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>3-楠哥趁机开户</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into user values(3,&#x27;楠哥&#x27;,10000);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>4-老婆再查询并打印，应该发现楠哥多了一个账户，但是没有。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name = &#x27;楠哥&#x27;;</span><br></pre></td></tr></table></figure><p>MySQL 通过多版本并发控制（MVCC）（快照读&#x2F;一致性读）其实解决了幻读问题。</p><p>原理：事务开启后，将历史数据存一份快照，其他事务增加与删除的数据，对于当前事务来说是不可见的。</p><p>当然还能这样测一下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set  transaction isolation level repeatable read;</span><br></pre></td></tr></table></figure><p>1-楠哥开启事务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br></pre></td></tr></table></figure><p>2-老婆查账户，给楠哥开了个账户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;楠哥&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;楠哥&#x27;</span>,<span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p>3-楠哥不知道老婆给他开了账户，自己也开一个，看见自己没有这个3号账户，居然不能插入，很奇幻。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;楠哥&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;楠哥&#x27;</span>,<span class="number">10000</span>);</span><br></pre></td></tr></table></figure><h5 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h5><ul><li>事务A和事务B，事务A在操作数据库时，事务B只能排队等待</li><li>这种隔离级别很少使用，吞吐量太低，用户体验差</li><li>这种级别可以避免“幻像读”，每一次读取的都是数据库中真实存在数据，事务A与事务B串行，而不并发。</li><li>别的地方一用这个数据就不能修改删除，直到别的地方提交</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>  transaction isolation level serializable;</span><br></pre></td></tr></table></figure><p>1-楠哥</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>2-老婆</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>3-楠哥操作发现卡住了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p>4-老婆这边一提交，那边就能操作了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h2 id="Mysql的锁机制"><a href="#Mysql的锁机制" class="headerlink" title="Mysql的锁机制"></a>Mysql的锁机制</h2><ul><li>数据库锁机制简单来说，就是数据库为了保证数据的一致性，使各种<code>共享资源</code>在被访问时变得<code>有序而设计</code>的一种规则。</li><li>MysQL的锁机制比较简单最著的特点是不同的存储引擎支持不同的锁机制。 InoDB支持行锁,(有时也会升级为表锁）MyISAM只支持表锁。</li><li><code>表锁</code>的特点就是开销小、加锁快，不会出现死锁。锁粒度大，发生锁冲突的概率小，并发度相对低。</li><li><code>行锁</code>的特点就是开销大、加锁慢，会出现死锁。锁粒度小，发生锁冲突的概率高，并发度搞。</li><li>今天我们讲锁主要从InnoDB引擎来讲，因为它既支持行锁、也支持表锁。</li></ul><h4 id="InnoDB行锁的种类"><a href="#InnoDB行锁的种类" class="headerlink" title="InnoDB行锁的种类"></a>InnoDB行锁的种类</h4><p>InnoDB默认的事务隔离级别是RR，并且参数innodb_locks_unsafe_for_binling&#x3D;0的模式下，行锁有三种。</p><h5 id="记录锁（Record-Lock）"><a href="#记录锁（Record-Lock）" class="headerlink" title="记录锁（Record Lock）"></a>记录锁（Record Lock）</h5><p>（1）不加索引，两个事务修改同一行记录</p><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010005&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;wangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010006&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;wangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>发现卡住了：</p><p>事务一提交了，事务二才获取了。</p><p>（2）不加索引，两个事务修改同一表非同行记录</p><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010005&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;wangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010006&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;wangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>发现卡住了：</p><p>事务一提交了，事务二才获取了。</p><p>说明锁的是表！</p><p>（3）加索引，修改同一行记录，不行</p><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010005&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;wangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010006&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;wangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>发现卡住了：</p><p>事务一提交了，事务二才获取了。</p><p>（4）加索引，修改同表的不同行，可以修改</p><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010008&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;wangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> teacher_no <span class="operator">=</span> <span class="string">&#x27;T2010009&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;jiangsi&#x27;</span>;</span><br></pre></td></tr></table></figure><p>发现都可一顺利修改，说明锁的的确是行。</p><p>证明行行锁是加在索引上的，这是标准的行级锁。</p><h5 id="间隙锁（GAP-Lock）"><a href="#间隙锁（GAP-Lock）" class="headerlink" title="间隙锁（GAP Lock）"></a>间隙锁（GAP Lock）</h5><p><code>在RR这个级别下</code>，为了避免幻读，引入了间隙锁，他锁定的是记录范围，不包含记录本身，也就是不允许在范围内插入数据。</p><p>根据检索条件向下寻找最靠近检索条件的记录值A作为左区间，向上寻找最靠近检索条件的记录值B作为右区间，即锁定的间隙为（A，B）。</p><p>查看隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%iso%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>唯一索引 等值判断只会产生记录锁，范围查询会产生间隙锁</p><p>普通索引等值判断会产生间隙锁</p><p>第一步把teacher表的id的4改成8</p><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">6</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">&#x27;zhangnan&#x27;</span>,<span class="string">&#x27;T888888&#x27;</span>);</span><br></pre></td></tr></table></figure><p>发现卡住了，因为他会把小于6的数据锁定，并不允许间隙中间的值插入：</p><p>事务三：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span> (<span class="number">9</span>,<span class="string">&#x27;huijun&#x27;</span>,<span class="string">&#x27;T66666666&#x27;</span>);</span><br></pre></td></tr></table></figure><p>发现成功了，因为9不在锁定的范围。</p><h5 id="记录锁和间隙锁的组合（next-key-lock）"><a href="#记录锁和间隙锁的组合（next-key-lock）" class="headerlink" title="记录锁和间隙锁的组合（next-key lock）"></a>记录锁和间隙锁的组合（next-key lock）</h5><p><strong>临键锁</strong>，是<strong>记录锁与间隙锁的组合</strong>，它的封锁范围，既包含索引记录，又包含索引区间。</p><p>**注：*<em>临键锁的主要目的，也是为了避免*<em>幻读</em></em>(Phantom Read)。如果把事务的隔离级别降级为RC，临键锁则也会失效。</p><h5 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h5><p>1、对于InnoDB表，在绝大部分情况下都应该使用行级锁，因为事务和行锁往往是我们之所以选择InnoDB表的理由。但在个另特殊事务中，也可以考虑使用表级锁。</p><ul><li>第一种情况是：事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间锁等待和锁冲突，这种情况下可以考虑使用表锁来提高该事务的执行速度。</li><li>第二种情况是：事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。这种情况也可以考虑一次性锁定事务涉及的表，从而避免死锁、减少数据库因事务回滚带来的开销。</li></ul><p>2、在InnoDB下 ，使用表锁要注意以下两点。</p><p>（１）使用LOCK TALBES虽然可以给InnoDB加表级锁，但必须说明的是，表锁不是由InnoDB存储引擎层管理的，而是由其上一层ＭySQL Server负责的，仅当autocommit&#x3D;0、innodb_table_lock&#x3D;1（默认设置）时，InnoDB层才能知道MySQL加的表锁，ＭySQL Server才能感知InnoDB加的行锁，这种情况下，InnoDB才能自动识别涉及表级锁的死锁；否则，InnoDB将无法自动检测并处理这种死锁。</p><p>（２）在用LOCAK TABLES对InnoDB锁时要注意，要将AUTOCOMMIT设为0，否则ＭySQL不会给表加锁；事务结束前，不要用UNLOCAK TABLES释放表锁，因为UNLOCK TABLES会隐含地提交事务；COMMIT或ROLLBACK不能释放用LOCAK TABLES加的表级锁，必须用UNLOCK TABLES释放表锁，正确的方式见如下语句。</p><p>例如，可以按如下做：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lock tables teacher write,student read;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p>表锁的力度很大，慎用。</p><h4 id="InnoDB的锁类型"><a href="#InnoDB的锁类型" class="headerlink" title="InnoDB的锁类型"></a>InnoDB的锁类型</h4><p>InnoDB的锁类型主要有读锁(共享锁)、写锁(排他锁)、意向锁和MDL锁。</p><h5 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h5><p>读锁（共享锁，shared lock）简称S锁。一个事务获取了一个数据行的读锁，其他事务能获得该行对应的读锁但不能获得写锁，即一个事务在读取一个数据行时，其他事务也可以读，但不能对该数行增删改的操作。</p><blockquote><p>简而言之：就是可以多个事务读，但只能一个事务写。</p></blockquote><p>读锁有两种select方式的应用：</p><ol><li>第一种是自动提交模式下的select查询语句，不需加任何锁,直接返回查询结果，这就是一致性非锁定读。</li><li>第二种就是通过select…. lock in share mode被读取的行记录或行记录的范围上加一个读锁,让其他事务可以读,但是要想申请加写锁,那就会被阻塞。</li></ol><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  teacher <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;lucy2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>卡住了，说明加了锁了。</p><h5 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h5><p>写锁，也叫排他锁，或者叫独占所，简称x锁。一个事务获取了一个数据行的写锁，其他事务就不能再获取该行的其他锁与锁优先级最高。</p><p>写锁的应用就很简单了，有以下两种情况：</p><blockquote><p>简而言之：就是只能有一个事务操作这个数据，别的事务都不行。</p></blockquote><p>（1）一些DML语句的操作都会对行记录加写锁。</p><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;lucy&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;lucy2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>卡住了，说明加了锁了。</p><p>你发现他还能读，这是应为mysql实现了MVCC模型。</p><p>（2）比较特殊的就是select for update，它会对读取的行记录上加一个写锁，那么其他任何事务戴不能对被锁定的行上加任何锁了，要不然会被阻塞。</p><p>事务一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  teacher <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>事务二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;lucy2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>卡住了，说明加了锁了。</p><p>你发现他还能读，这是应为mysql实现了MVCC模型。</p><h5 id="MDL锁"><a href="#MDL锁" class="headerlink" title="MDL锁"></a>MDL锁</h5><p>MySQL 5.5引入了meta data lock，简称MDL锁，用于保证表中<code>元数据</code>的信息。在会话A中，表开启了查询事务后，会自动获得一个MDL锁，会话B就不可以执行任何DDL语句，不能执行为表中添加字段的操作，会用MDL锁来保证数据之间的一致性。</p><p>元数据就是描述数据的数据，也就是你的表结构。意识是在你开启了事务之后获得了意向锁，其他事务就不能更改你的表结构。</p><h5 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h5><p>在mysql的innodb引擎中，意向锁是表级锁，意向锁有两种</p><p>意向共享锁（IS） 是指在给一个数据行加共享锁前必须获取该表的意向共享锁</p><p>意向排它锁（IX） 是指在给一个数据行加排他锁前必须获取该表的意向排他锁</p><p>意向锁和MDL锁都是为了防止在事务进行中，执行DDL语句导致数据不一致。</p><h4 id="从另一个角度区分锁的分类"><a href="#从另一个角度区分锁的分类" class="headerlink" title="从另一个角度区分锁的分类"></a>从另一个角度区分锁的分类</h4><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>乐观锁大多是基于数据版本记录机制实现，一般是给数据库表增加一个”version”字段。读取数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</p><p>比如下单操作：</p><p>查询出商品信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name, version <span class="keyword">from</span> teacher <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>根据商品信息生成订单。</p><p>将商品数量减1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> teacher <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;lucy&#x27;</span>，version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>  <span class="keyword">and</span> version <span class="operator">=</span>  <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>总有刁民想害朕</p><p>悲观锁依靠数据库提供的锁机制实现。MySQL中的共享锁和排它锁都是悲观锁。数据库的增删改操作默认都会加排他锁，而查询不会加任何锁。此处不赘述。</p><h4 id="锁等待和死锁"><a href="#锁等待和死锁" class="headerlink" title="锁等待和死锁"></a>锁等待和死锁</h4><p>锁等待是指一个事务过程中产生的锁，其他事务需要等待上一个事务释放它的锁，才能占用该资源。如果该事务一直不释放，就需要持续等待下去，直到超过了锁等待时间，会报一个等待超时的错误。</p><p>MysQL中通过innodb_lock_wait_timeout参数控制,单位是秒。</p><blockquote><p>死锁的条件</p></blockquote><ol><li>两行记录，至少两个事务</li><li>事务A 操作 第n行数据，并加锁 <code>update teacher set name = &#39;a&#39; where id = 1;</code></li><li>事务B 操作 第m行数据，并加锁 <code>update teacher set name = &#39;b&#39; where id = 2;</code></li><li>事务A 操作 第m行数据 <code>update teacher set name = &#39;c&#39; where id = 2;</code></li><li>事务B 操作 第n行数据 <code>update teacher set name = &#39;d&#39; where id = 1;</code></li><li>形成死锁 <code>Deadlock found when trying to get lock; try restarting transaction</code></li></ol><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，就是所谓的锁资源请求产生了回路现象，即死循环。</p><p>InnoDB引擎可以自动检测死锁并<code>回滚该事务</code>好不容易执行了一个业务给我回滚了，所以死锁尽量不要出现。</p><h4 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h4><ol><li>出现死锁并不可怕，但我们要尽量避免死锁</li><li>如果不同的程序会并发处理同一个表，或者涉及多行记录，尽量约定使用相同顺序访问表，可以大大减少死锁的发生。</li><li>业务中尽量采用小事务，避免使用大事务，要即使提交和回滚事务，可减少死锁产生的概率。</li><li>同一个事务中尽量做到一次锁定所需要的所有资源，减少死锁发生的概率。</li><li>对于非常容易发生死锁的业务，可以尝试使用升级锁的力度，该用表锁减少死锁的发生。</li></ol><h4 id="MVCC，多版本并发控制"><a href="#MVCC，多版本并发控制" class="headerlink" title="MVCC，多版本并发控制"></a>MVCC，多版本并发控制</h4><p>此章节本文转载至：<a href="https://blog.csdn.net/SnailMann">https://blog.csdn.net/SnailMann</a> 的博客</p><p>**<code>MVCC</code>**，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p><p><strong>MVCC</strong>在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读</p><hr><h5 id="什么是当前读和快照读？"><a href="#什么是当前读和快照读？" class="headerlink" title="什么是当前读和快照读？"></a>什么是当前读和快照读？</h5><p>在学习MVCC多版本并发控制之前，我们必须先了解一下，什么是MySQL InnoDB下的<code>当前读</code>和<code>快照读</code>?</p><ul><li><strong>当前读</strong> 像select lock in share mode(<code>共享锁</code>), select for update ; update, insert ,delete(<code>排他锁</code>)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</li><li><strong>快照读</strong> 像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</li></ul><p><strong>说白了MVCC就是为了实现读-写冲突不加锁，而这个读指的就是<code>快照读</code>, 而非当前读，当前读实际上是一种加锁的操作，是悲观锁的实现</strong></p><hr><h6 id="当前读，快照读和MVCC的关系"><a href="#当前读，快照读和MVCC的关系" class="headerlink" title="当前读，快照读和MVCC的关系"></a>当前读，快照读和MVCC的关系</h6><ul><li>准确的说，MVCC多版本并发控制指的是 <strong>“维持一个数据的多个版本，使得读写操作没有冲突”</strong> 这么一个概念。仅仅是一个理想概念</li><li>而在MySQL中，实现这么一个MVCC理想概念，<strong>我们就需要MySQL提供具体的功能去实现它，而快照读就是MySQL为我们实现MVCC理想模型的其中一个具体非阻塞读功能</strong>。而相对而言，当前读就是悲观锁的具体功能实现</li><li>要说的再细致一些，快照读本身也是一个抽象概念，再深入研究。MVCC模型在MySQL中的具体实现则是由 <strong><code>3个隐式字段</code><strong>，</strong><code>undo日志</code></strong> ，**<code>Read View</code>** 等去完成的，具体可以看下面的MVCC实现原理</li></ul><hr><h6 id="MVCC能解决什么问题"><a href="#MVCC能解决什么问题" class="headerlink" title="MVCC能解决什么问题"></a>MVCC能解决什么问题</h6><p><strong>数据库并发场景有三种，分别为：</strong></p><ul><li><code>读-读</code>：不存在任何问题，也不需要并发控制</li><li><code>读-写</code>：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读</li><li><code>写-写</code>：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失</li></ul><p><strong>MVCC带来的好处是？</strong> 多版本并发控制（MVCC）是一种用来解决<code>读-写冲突</code>的<strong>无锁并发控制</strong>，也就是为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。 所以MVCC可以为数据库解决以下问题</p><ul><li>在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能</li><li>同时还可以解决脏读，幻读，不可重复读等事务隔离问题，但不能解决更新丢失问题</li></ul><p><strong>小结一下咯</strong> 总之，MVCC就是因为大牛们，不满意只让数据库采用悲观锁这样性能不佳的形式去解决读-写冲突问题，而提出的解决方案，所以<strong>在数据库中，因为有了MVCC，所以我们可以形成两个组合：</strong></p><ul><li><code>MVCC + 悲观锁</code> MVCC解决读写冲突，悲观锁解决写写冲突</li><li><code>MVCC + 乐观锁</code> MVCC解决读写冲突，乐观锁解决写写冲突</li></ul><p>这种组合的方式就可以最大程度的提高数据库并发性能，并解决读写冲突，和写写冲突导致的问题</p><h6 id="MVCC的实现原理"><a href="#MVCC的实现原理" class="headerlink" title="MVCC的实现原理"></a>MVCC的实现原理</h6><hr><p>MVCC的目的就是多版本并发控制，在数据库中的实现，就是为了解决<code>读写冲突</code>，它的实现原理主要是依赖记录中的 <strong><code>3个隐式字段</code><strong>，</strong><code>undo日志</code></strong> ，**<code>Read View</code>** 来实现的。所以我们先来看看这个三个point的概念</p><blockquote><p>隐式字段</p></blockquote><p>每行记录除了我们自定义的字段外，还有数据库隐式定义的<code>DB_TRX_ID</code>,<code>DB_ROLL_PTR</code>,<code>DB_ROW_ID</code>等字段</p><ul><li>DB_TRX_ID 6byte，最近修改(修改&#x2F;插入)事务ID：记录创建这条记录&#x2F;最后一次修改该记录的事务ID</li><li>DB_ROLL_PTR 7byte，回滚指针，指向这条记录的上一个版本（存储于rollback segment里）</li><li>DB_ROW_ID 6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</li><li>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了</li></ul><p><img src="/2022/09/01/mysql/image-20211220190538714.4931715f.png" alt="image-20211220190538714"> 如上图，<code>DB_ROW_ID</code>是数据库默认为该行记录生成的唯一隐式主键，<code>DB_TRX_ID</code>是当前操作该记录的事务ID,而<code>DB_ROLL_PTR</code>是一个回滚指针，用于配合undo日志，指向上一个旧版本</p><hr><blockquote><p>undo日志</p></blockquote><p>undo log主要分为两种：</p><ul><li><strong>insert undo log</strong> 代表事务在<code>insert</code>新记录时产生的<code>undo log</code>, 只在事务回滚时需要，并且在事务提交后可以被立即丢弃</li><li><strong>update undo log</strong> 事务在进行<code>update</code>或<code>delete</code>时产生的<code>undo log</code>; 不仅在事务回滚时需要，在快照读时也需要；所以不能随便删除，只有在快速读或事务回滚不涉及该日志时，对应的日志才会被<code>purge</code>线程统一清除</li></ul><blockquote><p>purge线程，想成是一个环卫工人</p></blockquote><ul><li>从前面的分析可以看出，为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下老记录的deleted_bit，并不真正将过时的记录删除。</li><li>为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。</li></ul><p>对MVCC有帮助的实质是update undo log，undo log实际上就是存旧记录链，<strong>它的执行流程如下：</strong></p><p>一、 比如persion表有一条记录，记录如下，<code>name</code>为Jerry, <code>age</code>为24岁，<code>隐式主键</code>是1，<code>事务ID</code>和<code>回滚指针</code>，我们假设为NULL</p><p><img src="/2022/09/01/mysql/image-20211220190550058.f54297a7.png" alt="image-20211220190550058"></p><p>二、 现在来了一个事务1对该记录的name做出了修改，改为Tom</p><ul><li>在事务1修改该行(记录)数据时，数据库会先对该行加排他锁</li><li>然后把该行数据拷贝到<code>undo log</code>中，作为旧记录，既在<code>undo log</code>中有当前行的拷贝副本</li><li>拷贝完毕后，修改该行<code>name</code>为Tom，并且修改隐藏字段的事务ID为当前<code>事务1</code>的ID, 我们默认从<code>1</code>开始，之后递增，回滚指针指向拷贝到<code>undo log</code>的副本记录，既表示我的上一个版本就是它</li><li>事务提交后，释放锁</li></ul><p><img src="/2022/09/01/mysql/image-20211220190610200.1ae5d427.png" alt="image-20211220190610200"></p><p>三、又来了个事务2修改person表的同一个记录，将<code>age</code>修改为30岁</p><ul><li>在<code>事务2</code>修改该行数据时，数据库也先为该行加锁</li><li>然后把该行数据拷贝到<code>undo log</code>中，作为旧记录，发现该行记录已经有<code>undo log</code>了，那么最新的旧数据作为链表的表头，插在该行记录的<code>undo log</code>最前面</li><li>修改该行<code>age</code>为30岁，并且修改隐藏字段的事务ID为当前<code>事务2</code>的ID, 那就是<code>2</code>，回滚指针指向刚刚拷贝到<code>undo log</code>的副本记录</li><li>事务提交，释放锁</li><li><img src="/2022/09/01/mysql/image-20211220190627964.143d9167.png" alt="image-20211220190627964"></li></ul><p>从上面，我们就可以看出，不同事务或者相同事务的对同一记录的修改，会导致该记录的<code>undo log</code>成为一条记录版本线性表，既链表，<code>undo log</code>的链首就是最新的旧记录，链尾就是最早的旧记录（<strong>当然就像之前说的该undo log的节点可能是会purge线程清除掉，向图中的第一条insert undo log，其实在事务提交之后可能就被删除丢失了，不过这里为了演示，所以还放在这里</strong>）</p><hr><h6 id="Read-View-读视图"><a href="#Read-View-读视图" class="headerlink" title="Read View(读视图)"></a>Read View(读视图)</h6><p>什么是Read View，说白了Read View就是事务进行<code>快照读</code>操作的时候生产的<code>读视图</code>(Read View)，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的ID（<strong>当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大</strong>）</p><p>所以我们知道 <code>Read View</code>主要是用来做可见性判断的, 即当我们某个事务执行快照读的时候，对该记录创建一个 Read View 读视图，把它比作条件用来判断当前事务能够看到哪个版本的数据，既可能是当前最新的数据，也有可能是该行记录的<code>undo log</code>里面的某个版本的数据。</p><h4 id="Redo-log"><a href="#Redo-log" class="headerlink" title="Redo log"></a>Redo log</h4><p>MySQL数据库作为现在互联网公司内最流行的关系型数据库，相信大家都有工作中使用过。InnoDB是MySQL里最为常用的一种存储引擎，主要面向在线事务处理(OLTP)的应用。今天就让我们来探究一下InnoDB是如何一步一步实现事务的，这次我们先讲事务实现的redo log。</p><p>首先我们先明确一下InnoDB的修改数据的基本流程，当我们想要修改DB上某一行数据的时候，InnoDB是把数据从磁盘读取到内存的缓冲池上进行修改。数据在内存中被修改，与磁盘中相比就存在了差异，我们称这种有差异的数据为<strong>脏页</strong>。InnoDB对脏页的处理不是每次生成脏页就将脏页刷新回磁盘，这样会产生海量的IO操作，严重影响InnoDB的处理性能。对于此，InnoDB有一套完善的处理策略，与我们这次主题关系不大，表过不提。既然脏页与磁盘中的数据存在差异，那么如果在这期间DB出现故障就会造成数据的丢失。为了解决这个问题，redo log就应运而生了。</p><h5 id="Redo-log工作原理"><a href="#Redo-log工作原理" class="headerlink" title="Redo log工作原理"></a>Redo log工作原理</h5><p>在讲Redo log工作原理之前，先来学习一下MySQL的一些基础：</p><p><strong>一、日志类型</strong></p><p><img src="/2022/09/01/mysql/image-20211220190639970.d6e37914.png" alt="image-20211220190639970"></p><p>redo log在数据库重启恢复的时候被使用，因为其属于物理日志的特性，恢复速度远快于逻辑日志。而我们经常使用的binlog就属于典型的逻辑日志。</p><p><strong>二、 checkpoint</strong></p><p>坦白来讲checkpoint本身是比较复杂的，checkpoint所做的事就是把脏页给刷新回磁盘。所以，当DB重启恢复时，只需要恢复checkpoint之后的数据。这样就能大大缩短恢复时间。当然checkpoint还有其他的作用。</p><p><strong>三、 LSN(Log Sequence Number)</strong></p><p>LSN实际上就是InnoDB使用的一个版本标记的计数，它是一个单调递增的值。数据页和redo log都有各自的LSN。我们可以根据数据页中的LSN值和redo log中LSN的值判断需要恢复的redo log的位置和大小。</p><p><strong>四、 工作原理</strong></p><p>好的，现在我们来看看redo log的工作原理。说白了，redo log就是存储了数据被修改后的值。当我们提交一个事务时，InnoDB会先去把要修改的数据写入日志，然后再去修改缓冲池里面的真正数据页。</p><p>我们着重看看redo log是怎么一步步写入磁盘的。redo log本身也由两部分所构成即重做日志缓冲(redo log buffer)和重做日志文件(redo log file)。这样的设计同样也是为了调和内存与磁盘的速度差异。InnoDB写入磁盘的策略可以通过<code>innodb_flush_log_at_trx_commit</code>这个参数来控制。</p><p><img src="/2022/09/01/mysql/image-20211220190701788.1c09e00c.png" alt="image-20211220190701788"></p><p>当该值为1时，当然是最安全的，但是数据库性能会受一定影响。</p><p>为0时性能较好，但是会丢失掉master thread还没刷新进磁盘部分的数据。</p><p>这里我想简单介绍一下master thread，这是InnoDB一个在后台运行的主线程，从名字就能看出这个线程相当的重要。它做的主要工作包括但不限于：刷新日志缓冲，合并插入缓冲，刷新脏页等。master thread大致分为每秒运行一次的操作和每10秒运行一次的操作。master thread中刷新数据，属于checkpoint的一种。所以如果在master thread在刷新日志的间隙，DB出现故障那么将丢失掉这部分数据。</p><p>当该值为2时，当DB发生故障能恢复数据。但如果操作系统也出现宕机，那么就会丢失掉，文件系统没有及时写入磁盘的数据。</p><p>这里说明一下，<code>innodb_flush_log_at_trx_commit</code>设为非0的值，并不是说不会在master thread中刷新日志了。master thread刷新日志是在不断进行的，所以redo log写入磁盘是在持续的写入。</p><p><strong>五、 宕机恢复</strong></p><p>DB宕机后重启，InnoDB会首先去查看数据页中的LSN的数值。这个值代表数据页被刷新回磁盘的LSN的大小。然后再去查看redo log的LSN的大小。如果数据页中的LSN值大说明数据页领先于redo log刷新回磁盘，不需要进行恢复。反之需要从redo log中恢复数据。</p><h2 id="Mysql主从同步"><a href="#Mysql主从同步" class="headerlink" title="Mysql主从同步"></a>Mysql主从同步</h2><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。对于多级复制，数据库服务器即可充当主机，也可充当从机。</p><p>MySQL主从复制的基础是<strong>主服务器对数据库修改记录二进制日志</strong>，从服务器通过主服务器的二进制日志自动执行更新。 一句话表示就是，主数据库做什么，从数据库就跟着做什么。</p><h3 id="主从复制工作原理剖析"><a href="#主从复制工作原理剖析" class="headerlink" title="主从复制工作原理剖析"></a>主从复制工作原理剖析</h3><ul><li>Master 数据库只要发生变化，立马记录到Binary log 日志文件中</li><li>Slave数据库启动一个I&#x2F;O thread连接Master数据库，请求Master变化的二进制日志</li><li>Slave I&#x2F;O获取到的二进制日志，保存到自己的Relay log 日志文件中。</li><li>Slave 有一个 SQL thread定时检查Realy log是否变化，变化那么就更新数据</li></ul><p><img src="/2022/09/01/mysql/image-20201211164642229.abb459d2.png" alt="image-20201211164642229"></p><h3 id="为什么要用mysql-的主从"><a href="#为什么要用mysql-的主从" class="headerlink" title="为什么要用mysql 的主从"></a>为什么要用mysql 的主从</h3><hr><h4 id="实现服务器负载均衡"><a href="#实现服务器负载均衡" class="headerlink" title="实现服务器负载均衡"></a><strong>实现服务器负载均衡</strong></h4><p> 即可以通过在主服务器和从服务器之间切分处理客户查询的负荷，从而得到更好的客户相应时间。通常情况下，数据库管理员会有两种思路。</p><p> 一是在主服务器上只实现数据的更新操作。包括数据记录的更新、删除、新建等等作业。而不关心数据的查询作业。数据库管理员将数据的查询请求全部 转发到从服务器中。这在某些应用中会比较有用。如某些应用，像基金净值预测的网站。其数据的更新都是有管理员更新的，即更新的用户比较少。而查询的用户数 量会非常的多。此时就可以设置一台主服务器，专门用来数据的更新。同时设置多台从服务器，用来负责用户信息的查询</p><p> 二是在主服务器上与从服务器切分查询的作业。在这种思路下，主服务器不单单要完成数据的更新、删除、插入等作业，同时也需要负担一部分查询作业。而从服务器的话，只负责数据的查询。当主服务器比较忙时，部分查询请求会自动发送到从服务器重，以降低主服务器的工作负荷。</p><h4 id="通过复制实现数据的异地备份"><a href="#通过复制实现数据的异地备份" class="headerlink" title="通过复制实现数据的异地备份"></a><strong>通过复制实现数据的异地备份</strong></h4><p> 可以定期的将数据从主服务器上复制到从服务器上，这无疑是先了数据的异地备份。在传统的备份体制下，是将数据备份在本地。此时备份 作业与数据库服务器运行在同一台设备上，当备份作业运行时就会影响到服务器的正常运行。有时候会明显的降低服务器的性能。同时，将备份数据存放在本地，也 不是很安全。如硬盘因为电压等原因被损坏或者服务器被失窃，此时由于备份文件仍然存放在硬盘上，数据库管理员无法使用备份文件来恢复数据。这显然会给企业 带来比较大的损失。</p><h4 id="提高数据库系统的可用性"><a href="#提高数据库系统的可用性" class="headerlink" title="提高数据库系统的可用性"></a><strong>提高数据库系统的可用性</strong></h4><p> 数据库复制功能实现了主服务器与从服务器之间数据的同步，增加了数据库系统的可用性。当主服务器出现问题时，数据库管理员可以马上让从服务器作为主服务器，用来数据的更新与查询服务。然后回过头来再仔细的检查主服务器的问题。此时一般数据库管理员也会采用两种手段。</p><p> 一是主服务器故障之后，虽然从服务器取代了主服务器的位置，但是对于主服务器可以采取的操作仍然做了一些限制。如仍然只能够进行数据的查询，而 不能够进行数据的更新、删除等操作。这主要是从数据的安全性考虑。如现在一些银行系统的升级，在升级的过程中，只能够查询余额而不能够取钱。这是同样的道 理。</p><p> 二是从服务器真正变成了主服务器。当从服务器切换为主服务器之后，其地位完全与原先的主服务器相同。此时可以实现对数据的查询、更新、删除等操 作。为此就需要做好数据的安全性工作。即数据的安全策略，要与原先的主服务器完全相同。否则的话，就可能会留下一定的安全隐患</p><h3 id="怎么配置mysql主从复制"><a href="#怎么配置mysql主从复制" class="headerlink" title="怎么配置mysql主从复制"></a>怎么配置mysql主从复制</h3><hr><h4 id="环境准环境准备"><a href="#环境准环境准备" class="headerlink" title="环境准环境准备"></a>环境准环境准备</h4><p>本地安装两个mysql，或者使用虚拟机，需要准备两个mysql，</p><p>环境，可以使伪集群，也可以是真集群</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql1(master): 192.168.120.200:3306</span><br><span class="line">mysql2(slave):  192.168.120.201:3306</span><br></pre></td></tr></table></figure><h4 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h4><p>mysql1(master): 配置文件设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql master1 config </span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id = 1        <span class="comment"># 节点ID，确保唯一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log config</span></span><br><span class="line">log-bin = master-bin     <span class="comment">#开启mysql的binlog日志功能</span></span><br><span class="line">sync_binlog = 1         <span class="comment">#控制数据库的binlog刷到磁盘上去 , 0 不控制，性能最好，1每次事物提交都会刷到日志文件中，性能最差，最安全</span></span><br><span class="line">binlog_format = mixed   <span class="comment">#binlog日志格式，mysql默认采用statement，建议使用mixed</span></span><br><span class="line">expire_logs_days = 7                           <span class="comment">#binlog过期清理时间</span></span><br><span class="line">max_binlog_size = 100m                    <span class="comment">#binlog每个日志文件大小</span></span><br><span class="line">binlog_cache_size = 4m                        <span class="comment">#binlog缓存大小</span></span><br><span class="line">max_binlog_cache_size= 512m              <span class="comment">#最大binlog缓存大</span></span><br><span class="line">binlog-ignore-db=mysql <span class="comment">#不生成日志文件的数据库，多个忽略数据库可以用逗号拼接，或者 复制这句话，写多行</span></span><br><span class="line"></span><br><span class="line">auto-increment-offset = 1     <span class="comment"># 自增值的偏移量</span></span><br><span class="line">auto-increment-increment = 1  <span class="comment"># 自增值的自增量</span></span><br><span class="line">slave-skip-errors = all        <span class="comment">#跳过从库错误</span></span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17</p><p>mysql2(slave): 201 mysql.cnf 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line">replicate-wild-ignore-table=mysql.%</span><br><span class="line">replicate-wild-ignore-table=<span class="built_in">test</span>.%</span><br><span class="line">replicate-wild-ignore-table=information_schema.%</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7</p><p>重启两个mysql，让配置生效</p><h4 id="master数据库，创建复制用户并授权"><a href="#master数据库，创建复制用户并授权" class="headerlink" title="master数据库，创建复制用户并授权"></a>master数据库，创建复制用户并授权</h4><p>1.进入master的数据库，为master创建复制用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER repl IDENTIFIED BY <span class="string">&#x27;Root12345_&#x27;</span>;</span><br></pre></td></tr></table></figure><p>1</p><p>2.赋予该用户复制的权利</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave <span class="keyword">on</span> *.* to <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;192.168.120.200&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;Root12345_&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>1<br>2</p><p>3.查看master的状态</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">|<span class="params"> File             </span>| Position |<span class="params"> Binlog_Do_DB </span>| Binlog_Ignore_DB |<span class="params"> Executed_Gtid_Set </span>|</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">|<span class="params"> mysql-bin.000005      120</span>|              |<span class="params"> mysql            </span>|                   |<span class="params"></span></span><br><span class="line"><span class="params">+------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line"><span class="params">1 row <span class="keyword">in</span> set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p><p>4,配置从库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO </span><br><span class="line">MASTER_HOST = <span class="string">&#x27;192.168.120.200&#x27;</span>,  </span><br><span class="line">MASTER_USER = <span class="string">&#x27;repl&#x27;</span>, </span><br><span class="line">MASTER_PASSWORD = <span class="string">&#x27;Root12345_&#x27;</span>,</span><br><span class="line">MASTER_PORT = 3306,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;master-bin.000001&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS=120,</span><br><span class="line">MASTER_RETRY_COUNT = 60,</span><br><span class="line">MASTER_HEARTBEAT_PERIOD = 10000; </span><br><span class="line"></span><br><span class="line"><span class="comment"># MASTER_LOG_FILE与主库File 保持一致</span></span><br><span class="line"><span class="comment"># MASTER_LOG_POS=120 , #与主库Position 保持一致</span></span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12</p><p>启动从库slave进程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; slave start;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><p>1<br>2</p><p>查看是否配置成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 主库添加一条数据</span></span><br><span class="line"><span class="comment">-- 从库查询</span></span><br></pre></td></tr></table></figure><p>1<br>2</p><h3 id="可能遇到的问题可能遇到的问题"><a href="#可能遇到的问题可能遇到的问题" class="headerlink" title="可能遇到的问题可能遇到的问题"></a>可能遇到的问题可能遇到的问题</h3><blockquote><p>在配置mysql主从复制的时候出现错误：</p></blockquote><p>Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.</p><h4 id="现象现象"><a href="#现象现象" class="headerlink" title="现象现象"></a>现象现象</h4><p><img src="/2022/09/01/mysql/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAyNTM2Mg==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"> Slave_IO_Running:No，mysql的IO线程没有正常工作</p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>笔者使用两台虚拟机，一主一从，从库的mysql是直接克隆的。在mysql 5.6的复制引入了uuid的概念，各个复制结构中的server_uuid得保证不一样，但是查看到直接克隆data文件夹后server_uuid是相同的。</p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>找到data文件夹下的auto.cnf文件，修改里面的server_uuid值，保证各个db的server_uuid不一样，重启db即可。 找出auto.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&#x27;auto.cnf&#x27;</span></span><br></pre></td></tr></table></figure><p>修改server_uuid的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/mysql/auto.cnf</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> uuid();</span><br></pre></td></tr></table></figure><p>生成一个uuid即可。</p><p>重启数据库即可。</p><h2 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h2><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>与表有关的数据对象，在满足某种条件的时候，被动执行的SQL语句。</p><h4 id="触发器的特性触发器的特性"><a href="#触发器的特性触发器的特性" class="headerlink" title="触发器的特性触发器的特性"></a>触发器的特性触发器的特性</h4><ol><li>有begin、end的结构体（多条sql语句）</li><li>需要指定触发的条件：INSERT，UPDATE，DELETE</li><li>有指定的触发时间：BEFORE，AFTER</li></ol><h4 id="触发器的创建"><a href="#触发器的创建" class="headerlink" title="触发器的创建"></a>触发器的创建</h4><ul><li>单条业务逻辑的触发器创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">CREATE TRIGGER 触发器名称 BEFORE|AFTER INSERT|UPDATE|DELETE ON 表名</span><br><span class="line">FOR EACH ROW 业务逻辑</span><br><span class="line">*/</span><br><span class="line">#当b_user表中插入数据后，b_log表中也插入一条数据</span><br><span class="line">CREATE TRIGGER trigger_insert AFTER INSERT ON b_user</span><br><span class="line">FOR EACH ROW INSERT INTO b_log(字段) VALUES(&#x27;插入数据&#x27;)</span><br></pre></td></tr></table></figure><ul><li>多条业务逻辑的触发器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE TRIGGER 触发器名称 BEFORE|AFTER INSERT|UPDATE|DELETE ON 表名</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BIGIN</span><br><span class="line">INSERT...;</span><br><span class="line">UPDATE...;</span><br><span class="line">END;$</span><br><span class="line">*/</span><br><span class="line">#在b_user表中插入数据前，b_log表中插入2条数据</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE TRIGGER trigger_ insert_before BEFORE INSERT ON b_user</span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO b_log(comments,name) values(&#x27;insert1&#x27; ，NEW.name);</span><br><span class="line">INSERT INTO b_log(comments,name) values(&#x27;insert2&#x27; , NEW.name) ;</span><br><span class="line">END;$</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17</p><p><strong>总结</strong></p><ul><li>BEFORE|AFTER INSERT用于获取将要插入的数据</li><li>BEFORE|AFTER UPDATE|DELETE用于获取已经修改或删除的数据</li></ul><h4 id="删除触发器删除触发器"><a href="#删除触发器删除触发器" class="headerlink" title="删除触发器删除触发器"></a>删除触发器删除触发器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TRIGGER 触发器名称</span><br></pre></td></tr></table></figure><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h5><p>由mysql数据库管理系统提供的，变量名称固定，可以修改和查看值，分为<strong>全局变量</strong>和<strong>会话变量</strong></p><p><strong>全局变量</strong>：当mysql服务没有重启时，我们可以查看和修改的变量</p><p><strong>会话变量</strong>：和MySQL连接形成的会话，生命周期在整个会话过程中</p><p>全局变量用global修饰，会话变量用session修饰，通常session可以省略</p><ul><li>查看系统变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SHOW GLOBAL variables; -- 查看全局变量</span><br><span class="line">SHOW SESSION variables; -- 查看会话变量</span><br><span class="line">SHOW variables; -- 查看会话变量</span><br><span class="line">SHOW GLOBAL variables like &#x27;%dir%&#x27;; -- 模糊查询环境变量</span><br><span class="line">SELECT @@datadir; -- 查看全局系统变量</span><br><span class="line">SELECT @@session_track_transaction_info;</span><br></pre></td></tr></table></figure><ul><li>修改系统变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SHOW GLOBAL variables like &#x27;autocommit&#x27;; -- 全局系统变量中为自动提交事务</span><br><span class="line">SET GLOBAL autocommit=0; -- 将全局的自动提交的事务改为手动提交</span><br><span class="line">SHOW SESSION variables link &#x27;autocommit&#x27;; -- 查看会话变量中自动提交事务</span><br><span class="line">SET SESSION autocommit=0; -- 将会话变量中自动提交的事务改为手动提交</span><br><span class="line">SET @@session.autocommit=1;</span><br><span class="line">SET @@global.autocommit=1;</span><br></pre></td></tr></table></figure><p><strong>全局变量</strong>在修改后，在不同的会话中都会立即生效，但是在重新启动mysql服务后，全局变量会恢复为默认值，如果想让全局变量依旧有效，需要去修改.ini文件（MySQL配置文件）</p><p><strong>会话变量</strong>在修改后只对当前会话有效。一般在开发过程中修改会话变量。如：字符编码格式等可以在ini文件中进行设置</p><h5 id="用户变量用户变量"><a href="#用户变量用户变量" class="headerlink" title="用户变量用户变量"></a>用户变量用户变量</h5><p>MySQL允许用户自定义变量，分为用户变量和局部变量</p><ul><li><p>用户变量</p><p>作用域：当前会话有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置方式1，先去声明并初始化用户变量，赋值操作既可以使用=进行赋值，也可以使用:=进行赋值</span><br><span class="line">SET @变量名=值;</span><br><span class="line">SET @变量名:=值;</span><br><span class="line">SELECT @变量名:=值;</span><br><span class="line">#设置方式2</span><br><span class="line">SELECT 字段 into @变量名 FROM 表名;</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6</p></li><li><p>局部变量</p><p>作用域：在begin end的结构体中，声明必须是begin end结构体的第一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#声明方式，必须在begin后面从第一行开始</span><br><span class="line">DECLARE 变量名 类型;</span><br><span class="line">DECLARE 变量名 类型 DEFAULT 值;</span><br><span class="line"></span><br><span class="line">#局部变量的赋值</span><br><span class="line">SET 变量名:=值;</span><br><span class="line">SELECT @变量名:=值;</span><br><span class="line">SELECT 字段 into 变量名 FROM 表名;</span><br></pre></td></tr></table></figure></li></ul><h4 id="存储过程的创建存储过程的创建"><a href="#存储过程的创建存储过程的创建" class="headerlink" title="存储过程的创建存储过程的创建"></a>存储过程的创建存储过程的创建</h4><p>存储过程是一组已经预先编译好的sql语句的集合，理解为批处理语句（增加流程控制语句），一般在复杂逻辑中才会使用存储过程</p><ul><li><p>存储过程的优点</p><ul><li>提供了代码的可用性</li><li>简化了数据库操作，将业务逻辑的细节隐藏在存储过程中</li><li>减少了编译次数，减少了网络IO的次数，从而提高操作效率</li></ul></li><li><p>存储过程的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE 存储过程的名称(参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">局部变量的定义</span><br><span class="line">多条sql语句</span><br><span class="line">流程控制语句</span><br><span class="line">END;$</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>如果存储过程中只有一条SQL语句可以省略BEGIN END</p><p>参数列表</p><table><thead><tr><th>参数模式</th><th>形参名称</th><th>参数类型</th></tr></thead><tbody><tr><td>IN</td><td>username</td><td>mysql数据库中的数据类型（数值型，字符型，日期型）</td></tr><tr><td>OUT</td><td>pwd</td><td>mysql数据库中的数据类型（数值型，字符型，日期型）</td></tr><tr><td>INOUT</td><td>xxx</td><td>mysql数据库中的数据类型（数值型，字符型，日期型）</td></tr></tbody></table><p>IN：声明该参数是一个输入姓参数（类似于java中的形参）</p><p>OUT：声明该参数为一个输出型参数（类似于java中的返回值），在一个存储过程中可以定义多个out类型的参数</p><p>INOUT：声明该参数可以为输入型参数，也可以为输出型参数</p><ul><li><p>存储过程调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL 存储过程的名称(实参列表) </span><br><span class="line">-- 实参列表中包含由输出类型的参数</span><br></pre></td></tr></table></figure><p>1<br>2</p></li><li><p>存储过程演示</p><ul><li><p>无参的存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#用于向b_user表中插入2条数据</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE pro_insert()</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO b_user(name,sex) VALUES(&#x27;1&#x27;,&#x27;1&#x27;);</span><br><span class="line">INSERT INTO b_user(name,sex) VALUES(&#x27;2&#x27;,&#x27;2&#x27;);</span><br><span class="line">END;$</span><br><span class="line"></span><br><span class="line">CALL pro_insert();</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p></li><li><p>带有IN模式参数的存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#用于向b_user插入2条数据，性别由客户输入</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE pro_insert2(IN sex CHAR(1))</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO b_user(name,sex) VALUES(&#x27;1&#x27;,sex);</span><br><span class="line">INSERT INTO b_user(name,sex) VALUES(&#x27;2&#x27;,sex);</span><br><span class="line">END;$</span><br><span class="line"></span><br><span class="line">CALl pro_insert2(&#x27;男&#x27;);</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p></li><li><p>多个带有IN参数的存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#用于向b_user插入2条数据，用户名和密码由客户输入</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE pro_insert3(IN name VARCHAR(10),IN sex VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO b_user(name,sex) VALUES(name,sex);</span><br><span class="line">INSERT INTO b_user(name,sex) VALUES(name,sex);</span><br><span class="line">END;$</span><br><span class="line"></span><br><span class="line">CALL pro_insert2(&#x27;uname&#x27;,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p></li><li><p>带IN，OUT参数的存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#判断用户登录，如果用户名和密码输入正确登录成功，否则登录失败</span><br><span class="line">#根据输入的用户名和密码作为条件去b_user表中查询，如果查询总行数==1，则认为登录成功，让result返回登录成功，否则登录失败</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE pro_login(IN name VARCHAR(20),IN pwd VARCHAR(20),OUT result VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE total INT DEFAULT 0;-- 用于存放查询总行数</span><br><span class="line">select count(*) from b_user u where u.name=name and u.pwd=pwd;-- 将查询结果赋值给total局部变量</span><br><span class="line">SET result:=IF(total=1,&#x27;登录成功&#x27;,&#x27;登录失败&#x27;);</span><br><span class="line">END;$</span><br><span class="line">#存储过程如何执行</span><br><span class="line">-- 解决判断，使用自定义变量</span><br><span class="line">SET @result:=&#x27;&#x27;;</span><br><span class="line">CAll pro_login(&#x27;李四&#x27;,&#x27;123&#x27;,@result);</span><br><span class="line">select @result;</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14</p></li><li><p>删除存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE 存储过程名称</span><br></pre></td></tr></table></figure><p>1</p></li><li><p>查看存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE 存储过程名称;</span><br></pre></td></tr></table></figure><p>1</p></li><li><p>修改存储过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP</span><br><span class="line">CREATE</span><br></pre></td></tr></table></figure><p>1<br>2</p></li></ul></li></ul></li></ul><h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><blockquote><p>选择结构</p></blockquote><ul><li><p>IF函数</p><ul><li>功能：三目运算</li><li>语法：IF(逻辑表达式，表达式1，表达式2)</li></ul></li><li><p>IF结构</p><ul><li><p>功能：实现多路选择</p></li><li><p>注意：只能用在BEGIN END结构体中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">IF 逻辑表达式 THEN 语句1;</span><br><span class="line">ELSEIF 逻辑表达式2 THEN 语句2;</span><br><span class="line">...</span><br><span class="line">ELSE 语句n;</span><br><span class="line">END IF;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CASE结构</p><ul><li>等值选择</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE 字段|变量|表达式</span><br><span class="line">WHEN 值 THEN 值|语句</span><br><span class="line">WHEN 值 THEN 值</span><br><span class="line">...</span><br><span class="line">ELSE 值</span><br><span class="line">END</span><br></pre></td></tr></table></figure><ul><li>不等值选择</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">WHEN 逻辑表达式 THEN 语句1</span><br><span class="line">...</span><br><span class="line">ELSE 语句n</span><br><span class="line">END</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>循环结构</p></blockquote><ul><li><p>WHILE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">WHILE 逻辑表达式 DO</span><br><span class="line">循环体</span><br><span class="line">END WHILE;</span><br><span class="line">*/</span><br><span class="line">#需求：创建存储过程，输入一个值，返回1到该值的和</span><br><span class="line">#分析：一个输入参数，一个返回值，在结构体中，从1循环到输入的值，求和</span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE pro_sum(IN input INT,OUT total INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">DECLARE sum_ INT DEFAULT 0;</span><br><span class="line">WHILE i&lt;=input do</span><br><span class="line">SET sum_=sum_+i;</span><br><span class="line">SET i=i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">SET totle:=sum_;</span><br><span class="line">END;//</span><br><span class="line"></span><br><span class="line">SET @result=0;</span><br><span class="line">CALL por_sun(10,@result);</span><br><span class="line">SELECT @result;</span><br></pre></td></tr></table></figure></li><li><p>LOOP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#Loopnaem是定义的循环名称，为了跳出循环时指定跳出的循环</span><br><span class="line">loopname:LOOP;</span><br><span class="line">IF 逻辑表达式 THEN</span><br><span class="line">LEAVE loopname; -- 跳出当前指定的循环，类似于java中的break</span><br><span class="line">END IF;</span><br><span class="line">END LOOP;</span><br><span class="line"></span><br><span class="line">DElIMITER //</span><br><span class="line">CREATE PROCEDURE pro_sum_loop(IN input INT,OUT total INT)</span><br><span class="line">BEGIN </span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">DECLARE sum_ INT DEFAULT 0;</span><br><span class="line">a:LOOP;</span><br><span class="line">SET sum_:=sum_+i;</span><br><span class="line">SET i:=i+1;</span><br><span class="line">IF i&gt;input THEN</span><br><span class="line">LEAVE a;</span><br><span class="line">END IF;</span><br><span class="line">END LOOP;</span><br><span class="line">SET total:=sum_;</span><br><span class="line">END;//</span><br><span class="line"></span><br><span class="line">SET @result=0;</span><br><span class="line">CALL por_sum_loop(10,@result);</span><br><span class="line">SELECT @result;</span><br></pre></td></tr></table></figure></li><li><p>REPEAT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">循环体</span><br><span class="line">UNTIL 逻辑表达式 -- 当满足逻辑表达式，跳出循环</span><br><span class="line">END REPEAT;</span><br><span class="line"></span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE pro_sum_loop(IN input INT,OUT total INT)</span><br><span class="line">BEGIN </span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">DECLARE sum_ INT DEFAULT 0;</span><br><span class="line">REPEAT</span><br><span class="line">SET sum_:=sum_+i;</span><br><span class="line">SET i:=i+1</span><br><span class="line">UNTIL i&gt;input</span><br><span class="line">END REPEAT;</span><br><span class="line">SET total:=sum_;</span><br><span class="line">END;//</span><br><span class="line"></span><br><span class="line">SET @result=0;</span><br><span class="line">CALL por_sum_loop(10,@result);</span><br><span class="line">SELECT @result;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>函数也是一组预先编译好的sql的集合，基本和存储过程相似</p><p><strong>函数和存储过程的区别</strong></p><ol><li>存储过程可以有0个，1个或多个返回值，适用于insert、update、delete操作</li><li>函数只能有一个返回值，适用于在处理数据以后，返回一个已知的结果</li></ol><h4 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION 函数名称(参数列表) RETURNS 返回类型 BINLOG参数</span><br><span class="line">BEGIN</span><br><span class="line">函数体</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>参数列表</strong>：参数名称 参数类型</p><p><strong>BINLOG参数</strong></p><ul><li>NO SQL：函数体中没有sql语句， 也不会改参数</li><li>READS SQL DATE：函数体中存在sql语句，但是整个数据是只读的，不会修改数据</li><li>MODIFIES SQL DATE ：函数体中存在SQL语句，并且会修改数据</li><li>CONTAINS SQL：函数体中包含有SQL语句</li></ul><p><strong>函数体</strong>：在函数体汇总必须包含return语句，将return放在函数体最后一行执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#写一个函数，用于求两数之和</span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE FUNCTION sum_(input1 INT,input2 INT) RETURNS INT NO SQL</span><br><span class="line">BEGIN</span><br><span class="line">return input1+input2;</span><br><span class="line">END;//</span><br></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6</p><h4 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 函数名(参数列表);</span><br></pre></td></tr></table></figure><p>1</p><h4 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE FUNCTION 函数名;</span><br></pre></td></tr></table></figure><h4 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP FUNCTION 函数名;</span><br></pre></td></tr></table></figure><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><h4 id="查看定时策略是否开启"><a href="#查看定时策略是否开启" class="headerlink" title="查看定时策略是否开启"></a>查看定时策略是否开启</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%event_sche%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>开启定时策略：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> event_scheduler<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="创建定时任务创建定时任务"><a href="#创建定时任务创建定时任务" class="headerlink" title="创建定时任务创建定时任务"></a>创建定时任务创建定时任务</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> event run_event</span><br><span class="line"><span class="keyword">on</span> schedule <span class="keyword">every</span> <span class="number">1</span> <span class="keyword">minute</span></span><br><span class="line"><span class="keyword">on</span> completion preserve disable</span><br><span class="line">do <span class="keyword">call</span> test_procedure ();</span><br></pre></td></tr></table></figure><p>1、create event day_event：是创建名为run_event的事件 2、创建周期定时的规则，意思是每分钟执行一次 3、on completion preserve disable是表示创建后并不开始生效。 4、do call test_procedure ()是该event(事件)的操作内容</p><h4 id="定时任务操作"><a href="#定时任务操作" class="headerlink" title="定时任务操作"></a>定时任务操作</h4><p>1、查看定期任务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> event_name,event_definition,interval_value,interval_field,status </span><br><span class="line"><span class="keyword">FROM</span> information_schema.EVENTS;</span><br></pre></td></tr></table></figure><p>2、开启或关闭定时任务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> event run_event <span class="keyword">on</span> completion preserve enable;<span class="operator">/</span><span class="operator">/</span>开启定时任务</span><br><span class="line"><span class="keyword">alter</span> event run_event <span class="keyword">on</span> completion preserve disable;<span class="operator">/</span><span class="operator">/</span>关闭定时任务</span><br></pre></td></tr></table></figure><h4 id="定时规则"><a href="#定时规则" class="headerlink" title="定时规则"></a>定时规则</h4><p>1、周期执行–关键字 EVERY 单位有：second、minute、hour、day、week(周)、quarter(季度)、month、year</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> schedule <span class="keyword">every</span> <span class="number">1</span> week <span class="operator">/</span><span class="operator">/</span>每周执行<span class="number">1</span>次</span><br></pre></td></tr></table></figure><p>2、在具体某个时间执行–关键字 AT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> schedule <span class="keyword">at</span> <span class="built_in">current_timestamp</span>()<span class="operator">+</span><span class="type">interval</span> <span class="number">5</span> <span class="keyword">day</span> <span class="operator">/</span><span class="operator">/</span><span class="number">5</span>天后执行</span><br><span class="line"><span class="keyword">on</span> schedule <span class="keyword">at</span> <span class="string">&#x27;2019-01-01 00:00:00&#x27;</span> <span class="operator">/</span><span class="operator">/</span>在<span class="number">2019</span>年<span class="number">1</span>月<span class="number">1</span>日，<span class="number">0</span>点整执行</span><br></pre></td></tr></table></figure><p>3、在某个时间段执行–关键字STARTS ENDS</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> schedule <span class="keyword">every</span> <span class="number">1</span> <span class="keyword">day</span> starts <span class="built_in">current_timestamp</span>()<span class="operator">+</span><span class="type">interval</span> <span class="number">5</span> <span class="keyword">day</span> ends <span class="built_in">current_timestamp</span>()<span class="operator">+</span><span class="type">interval</span> <span class="number">1</span> <span class="keyword">month</span> <span class="operator">/</span><span class="operator">/</span><span class="number">5</span>天后开始每天都执行执行到下个月底</span><br><span class="line"><span class="keyword">on</span> schedule <span class="keyword">every</span> <span class="number">1</span> <span class="keyword">day</span> ends <span class="built_in">current_timestamp</span>()<span class="operator">+</span><span class="type">interval</span> <span class="number">5</span> <span class="keyword">day</span> <span class="operator">/</span><span class="operator">/</span>从现在起每天执行，执行<span class="number">5</span>天</span><br></pre></td></tr></table></figure><h2 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h2><p>注：设计只是一种思想一种理念，我们按照规范的设计方式设计数据库对我们来说有好处，但绝对不是说一定要严格遵守，<code>三范式能极大的**减少数据冗余</code>，但是相对编写sql而言是增加了难度的，所以所有好的设计都是要权衡利弊的，要对编码难度，存储大小，执行效率等多方面进行综合考量，但是在学习初期最好紧紧的遵循三范式，在后续的编码中体会和总结自己的经验。</p><p>设计数据库表的时候所依据的规范，共三个规范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一范式：要求有主键，并且要求每一个字段原子性不可再分</span><br><span class="line">第二范式：要求所有非主键字段完全依赖主键，不能产生部分依赖</span><br><span class="line">第三范式：所有非主键字段和主键字段之间不能产生传递依赖</span><br></pre></td></tr></table></figure><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>数据库表中不能出现重复记录，每个字段是原子性的不能再分</p><p>不符合第一范式的实例：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>联系方式</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td><a href="mailto:&#98;&#x6a;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#98;&#x6a;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>,18565987896</td></tr><tr><td>1002</td><td>杨春旺</td><td><a href="mailto:&#121;&#99;&#119;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#121;&#99;&#119;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a>,13659874598</td></tr><tr><td>1003</td><td>张志伟</td><td><a href="mailto:&#122;&#122;&#119;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;">&#122;&#122;&#119;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;</a>,12598745698</td></tr></tbody></table><p>解决方案</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>邮箱地址</th><th>联系电话</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td><a href="mailto:&#x62;&#106;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#109;">&#x62;&#106;&#64;&#113;&#113;&#x2e;&#99;&#x6f;&#109;</a></td><td>18565987896</td></tr><tr><td>1002</td><td>杨春旺</td><td><a href="mailto:&#x79;&#x63;&#119;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;">&#x79;&#x63;&#119;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;</a></td><td>13659874598</td></tr><tr><td>1003</td><td>张志伟</td><td><a href="mailto:&#122;&#x7a;&#119;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;">&#122;&#x7a;&#119;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a></td><td>12598745698</td></tr></tbody></table><p>不符合第一范式的实例，不是说他错哈：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>联系地址</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>太原市尖草坪区恒山路108号</td></tr><tr><td>1002</td><td>杨春旺</td><td>太原市迎泽区迎泽大家100号</td></tr><tr><td>1003</td><td>张志伟</td><td>太原市杏花岭区北大街152号</td></tr></tbody></table><p>解决方案：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>市</th><th>区</th><th>详细地址</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>太原市</td><td>尖草坪区</td><td>恒山路108号</td></tr><tr><td>1002</td><td>杨春旺</td><td>太原市</td><td>迎泽区</td><td>迎泽大街100号</td></tr><tr><td>1003</td><td>张志伟</td><td>太原市</td><td>杏花岭区</td><td>北大街152号</td></tr></tbody></table><p><strong>必须有主键</strong>，这是数据库设计的最基本要求，主要采用数值型或定长字符串表示，<strong>关于列不可再分，应该根据具体的情况来决定</strong>。如联系方式，为了开发上的便利可能就采用一个字段。</p><p>关于第一范式，每一行必须唯一，也就是每个表必须有主键，这是数据库设计的最基本要求，主要采用数值型或定长字符串表示，<strong>关于列不可再分，应该根据具体的情况来决定</strong>。如联系方式，为了开发上的便利可能就采用一个字段。</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>第二范式是建立在第一范式基础上的，另外要求所有非主键字段完全依赖主键，不能产生<strong>部分依赖</strong></p><p>不符合第二范式的案例：</p><p>其中学生编号和课程编号为联合主键</p><table><thead><tr><th>学生编号</th><th>性别</th><th>学生姓名</th><th>课程编号</th><th>课程名称</th><th>教室</th><th>成绩</th></tr></thead><tbody><tr><td>1001</td><td>男</td><td>白杰</td><td>2001</td><td>java</td><td>3004</td><td>89</td></tr><tr><td>1002</td><td>男</td><td>杨春旺</td><td>2002</td><td>mysql</td><td>3003</td><td>88</td></tr><tr><td>1003</td><td>女</td><td>刘慧慧</td><td>2003</td><td>html</td><td>3005</td><td>90</td></tr><tr><td>1001</td><td>男</td><td>白杰</td><td>2002</td><td>mysql</td><td>3003</td><td>77</td></tr><tr><td>1001</td><td>男</td><td>白杰</td><td>2003</td><td>html</td><td>3005</td><td>89</td></tr><tr><td>1003</td><td>女</td><td>刘慧慧</td><td>2001</td><td>java</td><td>3004</td><td>90</td></tr></tbody></table><p>以上虽然确定了主键，但此表会出现大量的数据冗余，出现冗余的原因在于，学生信息部分依赖了主键的一个字段学生编号，和课程id没有毛线关系。同时课程的信息只是依赖课程id，和学生id没有毛线关系。只有成绩一个字段完全依赖主键的两个部分，这就是第二范式<strong>部分依赖</strong>。</p><p><strong>解决方案：</strong></p><p>学生表：学生编号为主键</p><table><thead><tr><th>学生编号</th><th>性别</th><th>学生姓名</th></tr></thead><tbody><tr><td>1001</td><td>男</td><td>白杰</td></tr><tr><td>1002</td><td>男</td><td>杨春旺</td></tr><tr><td>1003</td><td>女</td><td>刘慧慧</td></tr></tbody></table><p>课程表：课程编号为主键</p><table><thead><tr><th>课程编号</th><th>课程名称</th><th>教室</th></tr></thead><tbody><tr><td>2001</td><td>java</td><td>3003</td></tr><tr><td>2002</td><td>mysql</td><td>3003</td></tr><tr><td>2003</td><td>html</td><td>3005</td></tr></tbody></table><p>成绩表：学生编号和课程编号为联合主键</p><table><thead><tr><th>学生编号</th><th>课程编号</th><th>成绩</th></tr></thead><tbody><tr><td>1001</td><td>2001</td><td>89</td></tr><tr><td>1002</td><td>2002</td><td>88</td></tr><tr><td>1003</td><td>2003</td><td>90</td></tr><tr><td>1001</td><td>2002</td><td>77</td></tr><tr><td>1001</td><td>2003</td><td>89</td></tr><tr><td>1003</td><td>2001</td><td>90</td></tr></tbody></table><p>如果一个表是单一主键，那么它就是复合第二范式，部分依赖和主键有关系</p><p>以上是典型的“多对多”设计</p><h4 id="第三范式第三范式"><a href="#第三范式第三范式" class="headerlink" title="第三范式第三范式"></a>第三范式第三范式</h4><p>建立在第二范式基础上的，非主键字段不能传递依赖于主键字段（不要产生传递依赖）</p><p>不满足第三范式的例子：</p><p>其中学生编号是主键</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>专业编号</th><th>专业名称</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>2001</td><td>计算机</td></tr><tr><td>1002</td><td>杨春旺</td><td>2002</td><td>自动化</td></tr><tr><td>1003</td><td>张志伟</td><td>2001</td><td>计算机</td></tr></tbody></table><p>何为传递依赖？</p><p>专业编号依赖学生编号，因为该学生学的就是这个专业啊。但是专业名称和学生其实没多大关系，专业名称依赖于专业编号。这就叫传递依赖，就是某一个字段不直接依赖主键，而是依赖 依赖主键的另一个字段。</p><p>解决方法：</p><p>学生表，学生编号为主键：</p><p>学生编号为主键：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>专业编号</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>2001</td></tr><tr><td>1002</td><td>杨春旺</td><td>2002</td></tr><tr><td>1003</td><td>张志伟</td><td>2001</td></tr></tbody></table><p>专业表，专业编号为主键：</p><table><thead><tr><th>专业编号</th><th>专业名称</th></tr></thead><tbody><tr><td>2001</td><td>计算机</td></tr><tr><td>2002</td><td>自动化</td></tr></tbody></table><p>以上设计是典型的一对多的设计，一存储在一张表中，多存储在一张表中，<strong>在多的那张表中添加外键指向一的一方</strong>。</p><h3 id="常见表关系"><a href="#常见表关系" class="headerlink" title="常见表关系"></a>常见表关系</h3><h4 id="一对一-用的不多"><a href="#一对一-用的不多" class="headerlink" title="一对一 用的不多"></a>一对一 用的不多</h4><p>一个表和另一张表存在的关系是一对一，此种设计不常用，因为此种关系经常会将多张表合并为一张表。</p><p>举例：</p><p>学生信息表可以分为基本信息表和详细信息表。</p><p>可能有这种需求，需要给个某个账户对学生表的操作，但是有些私密信息又不能暴露，就可以拆分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一种方案：分两张表存储，共享主键</span><br><span class="line">第二种方案：分两张表存储，外键唯一</span><br></pre></td></tr></table></figure><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>第三范式的例子</p><p>两张表 外键建在多的一方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">分两张表存储，在多的一方添加外键，</span><br><span class="line">这个外键字段引用一的一方中的主键字段</span><br></pre></td></tr></table></figure><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>第二范式的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">分三张表存储，在学生表中存储学生信息，在课程表中存储课程信息，</span><br><span class="line">在成绩表中存储学生和课程的关系信息</span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li>事务四大提醒ACID<ul><li>原子性： 要么都成功要么都失败</li><li>一致性： 执行前后状态必须是一致的，比如转账</li><li>隔离性： 事务之间不会相互影响。由锁机制和MVCC机制来实现</li><li>持久性： 事务成功必须写入磁盘</li></ul></li><li>4个特性与WAL 有关系</li></ol><p>​<a href="https://www.cnblogs.com/xuwc/p/14037750.html">预写日志(WAL)介绍 - xuwc - 博客园 (cnblogs.com)</a></p><p>​WAL(Write Ahead Log)预写日志</p><ul><li>原子性: 事务的原子性是通过Redo Log和Undo Log保证的。<ul><li>每一个写事务，都会修改BufferPool，从而产生相应的Redo&#x2F;Undo日志，这些日志信息会被记录<br>到日志文件中。在 MySOL 中，任何 Buffer Pool中的页被刷到磁盘之前，都会先写入到日志文件中,<br>如果Buffer Pool 中的数据提交(commit)，此时数据库挂了，那在数据库再次启动之后，可以通<br>Redo志将其恢复出来，以保证脏页写的数据不会丢失。如果数据没有提交（没有commit)，此时数<br>据库挂了,就需要通过Undo来实现了。</li></ul></li><li>持久性：如何实现<ul><li>通过Redo Log 和WAL实现的。</li></ul></li></ul><h3 id="等值连接-与-非等值连接"><a href="#等值连接-与-非等值连接" class="headerlink" title="等值连接 与 非等值连接"></a>等值连接 与 非等值连接</h3><p><img src="/2022/09/01/mysql/image-20220321202239838.png" alt="image-20220321202239838"></p><h2 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h2><h2 id="InnoDB数据存储结构"><a href="#InnoDB数据存储结构" class="headerlink" title="InnoDB数据存储结构"></a>InnoDB数据存储结构</h2><h2 id="索引的创建与设计原则"><a href="#索引的创建与设计原则" class="headerlink" title="索引的创建与设计原则"></a>索引的创建与设计原则</h2><h2 id="性能分析工具的使用"><a href="#性能分析工具的使用" class="headerlink" title="性能分析工具的使用"></a>性能分析工具的使用</h2><h2 id="索引优化与查询优化"><a href="#索引优化与查询优化" class="headerlink" title="索引优化与查询优化"></a>索引优化与查询优化</h2><h2 id="数据库的设计闺房"><a href="#数据库的设计闺房" class="headerlink" title="数据库的设计闺房"></a>数据库的设计闺房</h2><h2 id="数据库的其它调优测率"><a href="#数据库的其它调优测率" class="headerlink" title="数据库的其它调优测率"></a>数据库的其它调优测率</h2><h2 id="事务基础知识"><a href="#事务基础知识" class="headerlink" title="事务基础知识"></a>事务基础知识</h2><h2 id="Mysql事务日志"><a href="#Mysql事务日志" class="headerlink" title="Mysql事务日志"></a>Mysql事务日志</h2><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h2 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h2><h2 id="其它数据库日志"><a href="#其它数据库日志" class="headerlink" title="其它数据库日志"></a>其它数据库日志</h2><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo</title>
      <link href="/2022/08/30/Dubbo/"/>
      <url>/2022/08/30/Dubbo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><ul><li>基于SOA思想<ul><li>将传统单一应用拆分为web(消费者)模块和service(提供者)模块基于Dubbo通信 两个服务运行在不同的web服务器</li></ul></li><li>辅助SpringCloud<ul><li>Dubbo基于TCP协议,效率更高,可以替换Feign提升并发压力</li></ul></li></ul><p><img src="/2022/08/30/Dubbo/image-20220830235122991.png" alt="image-20220830235122991"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>服务消费者获取服务提供者地址</li><li>服务提供者发生变化时快速切换</li><li>监控服务</li></ul><p><img src="/2022/08/30/Dubbo/image-20220830235358368.png" alt="image-20220830235358368"></p><ul><li>服务提供者在启动时,向注册中心注册自己提供的服务</li><li>服务消费者在启动时,向注册中心订阅自己所需的服务</li><li>注册中心返回服务提供者地址列表给消费者,如果有变更,注册中心将基于长连接推送变更数据给消费者</li><li>服务消费者从提供者地址列表基于负载均衡算法,选择提供者进行调用</li><li>服务消费者和提供者,在内存中累计调用次数和调用时间,定时每分钟发送一次统计数据到监控中心</li></ul><p>根据Dubbo构建分布式架构 完成查询用户</p><p><img src="/2022/08/30/Dubbo/image-20220831002803080.png" alt="image-20220831002803080"></p><h3 id="1-创建user-provider"><a href="#1-创建user-provider" class="headerlink" title="1.创建user-provider"></a>1.创建user-provider</h3><ol><li><p>创建提供者模块引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo的起步依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-registry-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将service,mapper,domain导入到提供者模块</p></li><li><p>编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.zjj.user.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProviderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将UserService暴露为dubbo服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DubboService</span></span><br></pre></td></tr></table></figure></li><li><p>编写application</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/dubbo-demo?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">979508.</span><span class="string">a</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-provider</span></span><br><span class="line">  <span class="comment">#配置dubbo</span></span><br><span class="line">  <span class="comment">#访问协议访问端口</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20881</span></span><br><span class="line">  <span class="comment">#注册中心</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">cn.zjj.user.service</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2022/08/30/RabbitMQ/"/>
      <url>/2022/08/30/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="同步异步通讯"><a href="#同步异步通讯" class="headerlink" title="同步异步通讯"></a>同步异步通讯</h2><p><strong>微服务间通讯有同步和异步两种方式</strong></p><p>同步通讯：就像打电话，需要实时响应。</p><p>异步通讯：就像发邮件，不需要马上回复。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904133345.png"><img src="/2022/08/30/RabbitMQ/20210904133345.png" alt="img"></a></p><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p><p>我们之前学习的 <strong>Feign 调用</strong>就属于<strong>同步方式</strong>，虽然调用可以实时得到结果，但存在下面的问题：</p><p><a href="https://cdn.xn2001.com/img/2021/20210904133517.png"><img src="/2022/08/30/RabbitMQ/20210904133517.png" alt="img"></a></p><p><strong>同步调用的优点</strong>：</p><ul><li>时效性较强，可以立即得到结果</li></ul><p><strong>同步调用的缺点</strong>：</p><ul><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><p>异步调用则可以避免上述问题，我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p><p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904144714.png"><img src="/2022/08/30/RabbitMQ/20210904144714.png" alt="img"></a></p><p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904145001.png"><img src="/2022/08/30/RabbitMQ/20210904145001.png" alt="img"></a></p><p><strong>异步调用好处</strong>：</p><ul><li>吞吐量提升：无需等待订阅者处理完成，响应更快速</li><li>故障隔离：服务没有直接调用，不存在级联失败问题</li><li>调用间没有阻塞，不会造成无效的资源占用</li><li>耦合度极低，每个服务都可以灵活插拔，可替换</li><li>流量削峰：不管发布事件的流量波动多大，都由 Broker 接收，订阅者可以按照自己的速度去处理事件</li></ul><p><strong>异步调用缺点</strong>：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于 Broker 的可靠、安全、性能</li></ul><h2 id="MQ消息队列"><a href="#MQ消息队列" class="headerlink" title="MQ消息队列"></a>MQ消息队列</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列，也就是事件驱动架构中的 Broker</p><p>比较常见的 MQ 实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th align="left"></th><th align="left"><strong>RabbitMQ</strong></th><th align="left"><strong>ActiveMQ</strong></th><th align="left"><strong>RocketMQ</strong></th><th align="left"><strong>Kafka</strong></th></tr></thead><tbody><tr><td align="left">公司&#x2F;社区</td><td align="left">Rabbit</td><td align="left">Apache</td><td align="left">阿里</td><td align="left">Apache</td></tr><tr><td align="left">开发语言</td><td align="left">Erlang</td><td align="left">Java</td><td align="left">Java</td><td align="left">Scala&amp;Java</td></tr><tr><td align="left">协议支持</td><td align="left">AMQP、XMPP、SMTP、STOMP</td><td align="left">OpenWire、STOMP、REST、XMPP、AMQP</td><td align="left">自定义协议</td><td align="left">自定义协议</td></tr><tr><td align="left">可用性</td><td align="left">高</td><td align="left">一般</td><td align="left">高</td><td align="left">高</td></tr><tr><td align="left">单机吞吐量</td><td align="left">一般</td><td align="left">差</td><td align="left">高</td><td align="left">非常高</td></tr><tr><td align="left">消息延迟</td><td align="left">微秒级</td><td align="left">毫秒级</td><td align="left">毫秒级</td><td align="left">毫秒以内</td></tr><tr><td align="left">消息可靠性</td><td align="left">高</td><td align="left">一般</td><td align="left">高</td><td align="left">一般</td></tr></tbody></table><p>以 RabbitMQ 为例，我们在 Centos7 虚拟机中使用 Docker 来安装</p><h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><blockquote><p>docker pull rabbitmq:3-management</p></blockquote><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure><p><strong>MQ 的基本结构</strong></p><p><a href="https://cdn.xn2001.com/img/2021/20210904172912.png"><img src="/2022/08/30/RabbitMQ/20210904172912.png" alt="img"></a></p><p>概念:</p><ul><li>channle 操作mq的工具</li><li>exchange 路由消息到队列</li><li>queue 缓存消息</li><li>virtual host 虚拟主机 对queue exchange等逻辑分组</li></ul><h2 id="常见消息模型"><a href="#常见消息模型" class="headerlink" title="常见消息模型"></a>常见消息模型</h2><p><img src="/2022/08/30/RabbitMQ/20210904173739.png" alt="img"></p><p>Hello World 模型</p><p><a href="https://cdn.xn2001.com/img/2021/20210904200637.png"><img src="/2022/08/30/RabbitMQ/20210904200637.png" alt="img"></a></p><p>官方的 HelloWorld 是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><h3 id="publisher实现"><a href="#publisher实现" class="headerlink" title="publisher实现"></a>publisher实现</h3><ul><li>建立连接</li><li>创建 channel</li><li>声明队列</li><li>发送消息</li><li>关闭连接和 channel</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.211.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello RabbitMQ！&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：[&quot;</span> + message + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="consumer实现"><a href="#consumer实现" class="headerlink" title="consumer实现"></a>consumer实现</h3><ul><li>建立连接</li><li>创建 channel</li><li>声明队列</li><li>订阅消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.211.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：[&quot;</span> + message + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><p>SpringAMQP 是基于 RabbitMQ 封装的一套模板，并且还利用 SpringBoot 对其实现了自动装配，使用起来非常方便。</p><p>SpringAMQP 的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><a href="https://cdn.xn2001.com/img/2021/20210904202046.png"><img src="/2022/08/30/RabbitMQ/20210904202046.png" alt="img"></a></p><p><a href="https://cdn.xn2001.com/img/2021/20210904202056.png"><img src="/2022/08/30/RabbitMQ/20210904202056.png" alt="img"></a></p><p>SpringAMQP 提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了 RabbitTemplate 工具，用于发送消息</li></ul><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h3 id="simple-queue"><a href="#simple-queue" class="headerlink" title="simple queue"></a>simple queue</h3><ol><li><p>父工程引入sping-amqp的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在pulish服务中使用RabbitTemplate发送simple queue队列</p><ol><li><p>在publisher服务中编写application.yml,添加mq连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.41</span><span class="number">.39</span><span class="number">.152</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">zjj</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li><li><p>编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        String queueName=<span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        String message=<span class="string">&quot;hello zjj&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在consumer服务中编写消费逻辑,绑定simple.queue队列</p><ol><li><p>在publisher服务中编写application.yml,添加mq连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.41</span><span class="number">.39</span><span class="number">.152</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">zjj</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li><li><p>在consumer服务新建一个类,编写消费逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="Work-Queue"><a href="#Work-Queue" class="headerlink" title="Work Queue"></a>Work Queue</h3><p>消费者</p><pre><code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message+ LocalDateTime.now());</span><br><span class="line">     Thread.sleep(<span class="number">20</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.err.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message);</span><br><span class="line">     Thread.sleep(<span class="number">200</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message+ LocalDateTime.now());</span><br><span class="line">     Thread.sleep(<span class="number">20</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.err.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message);</span><br><span class="line">     Thread.sleep(<span class="number">200</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费预取限制</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.41</span><span class="number">.39</span><span class="number">.152</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Publish发布-Subscribe订阅"><a href="#Publish发布-Subscribe订阅" class="headerlink" title="Publish发布,Subscribe订阅"></a>Publish发布,Subscribe订阅</h3><blockquote><p>发布订阅模式与之前案例的区别就是允许将同一条消息发送给多个消费者,实现方式加入了exchange(交换机)</p></blockquote><p><a href="https://cdn.xn2001.com/img/2021/20210904213455.png"><img src="/2022/08/30/RabbitMQ/20210904213455.png" alt="img"></a></p><p>图中可以看到，在订阅模型中，多了一个 exchange 角色，而且过程略有变化</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，<strong>而是发给 exchange（交换机）</strong></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息</li><li>Exchange：交换机，一方面，接收生产者发送的消息；另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于 Exchange 的类型。Exchange 有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定 routing key 的队列</li><li>Topic：通配符，把消息交给符合 routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与 Exchange 绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h4 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h4><p>Fanout，英文翻译是扇出，在 MQ 中我们也可以称为广播。会把接收的消息路由到每一个跟其绑定的queue</p><p><a href="https://cdn.xn2001.com/img/2021/20210912160350.png"><img src="/2022/08/30/RabbitMQ/20210912160350.png" alt="img"></a></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>可以有多个队列</li><li>每个队列都要绑定到 Exchange（交换机）</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>交换机把消息发送给绑定过的所有队列</li><li>订阅队列的消费者都能拿到消息</li></ul><p>接下里我们用 SpringAMQP 来简单实现 FanoutExchange</p><ol><li>在 consumer 服务中，利用代码声明队列、交换机，并将两者绑定</li><li>在 consumer 服务中，编写两个消费者方法，分别监听 fanout.queue1 和 fanout.queue2</li><li>在 publisher 中编写测试方法，向 fanout发送消息</li></ol><p><strong>声明队列和交换机</strong></p><p>Spring 提供了一个接口 Exchange，来表示所有不同类型的交换机。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904213809.png"><img src="/2022/08/30/RabbitMQ/20210904213809.png" alt="img"></a></p><p>消费者处声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明FanoutExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;zjj.fannout&quot;</span>);</span><br><span class="line">        <span class="comment">//交换机名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明第一个队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;zjj.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue1,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="comment">//绑定队列1和交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明第二个队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;zjj.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue2,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="comment">//绑定队列2和交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//交换机名称</span></span><br><span class="line">       String exchange=<span class="string">&quot;zjj.fannout&quot;</span>;</span><br><span class="line">       <span class="comment">//消息</span></span><br><span class="line">       String message=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">       rabbitTemplate.convertAndSend(exchange,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Direct-路由"><a href="#Direct-路由" class="headerlink" title="Direct:路由"></a>Direct:路由</h4><p>在 Fanout 模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到 DirectExchange</p><p><a href="https://cdn.xn2001.com/img/2021/20210912182822.png"><img src="/2022/08/30/RabbitMQ/20210912182822.png" alt="img"></a></p><p>在 Direct 模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code> 与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p>在 consumer 的 SpringRabbitListener 中添加两个消费者，同时基于注解来声明队列和交换机</p><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">         value = @Queue(value = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">         exchange = @Exchange(value = &quot;xn2001.direct&quot;),</span></span><br><span class="line"><span class="meta">         key = &#123;&quot;a&quot;,&quot;b&quot;&#125;</span></span><br><span class="line"><span class="meta"> ))</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">         value = @Queue(value = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">         exchange = @Exchange(value = &quot;xn2001.direct&quot;),</span></span><br><span class="line"><span class="meta">         key = &#123;&quot;a&quot;,&quot;c&quot;&#125;</span></span><br><span class="line"><span class="meta"> ))</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchangeToA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xn2001.direct&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, i am direct to a!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;a&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * direct</span></span><br><span class="line"><span class="comment">     * 向交换机发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchangeToB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xn2001.direct&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, i am direct to b!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;b&quot;</span>, message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Topic-话题"><a href="#Topic-话题" class="headerlink" title="Topic:话题"></a>Topic:话题</h4><p><code>Topic </code> 与 <code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic </code>类型可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p>通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：只能匹配一个词</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item.#`：能够匹配`item.spu.insert` 或者 `item.spu</span><br><span class="line">item.*`：只能匹配`item.spu</span><br></pre></td></tr></table></figure><p><a href="https://cdn.xn2001.com/img/2021/20210912194016.png"><img src="/2022/08/30/RabbitMQ/20210912194016.png" alt="img"></a></p><ul><li>Queue1：绑定的是 <code>china.#</code> ，因此凡是以 <code>china.</code> 开头的 <code>routing key</code> 都会被匹配到。包括 china.news 和 china.weather</li><li>Queue2：绑定的是 <code>#.news</code> ，因此凡是以 <code>.news </code> 结尾的 <code>routing key</code> 都会被匹配。包括 china.news 和 japan.news</li></ul><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;xn2001.topic&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;china.#&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;xn2001.topic&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;china.*&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xn2001.topic&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message1</span> <span class="operator">=</span> <span class="string">&quot;hello, i am topic form china.news&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message2</span> <span class="operator">=</span> <span class="string">&quot;hello, i am topic form china.news.2&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message1);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news.2&quot;</span>, message2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h4><p>Spring 会把你发送的消息序列化为字节发送给 MQ，接收消息的时候，还会把字节反序列化为 Java 对象。</p><p><strong>默认情况下 Spring 采用的序列化方式是 JDK 序列化。</strong></p><p>我们可以去试一下效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;object.queue&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueue</span><span class="params">(Map&lt;String,Object&gt; msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;object接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cdn.xn2001.com/img/2021/20210912204117.png"><img src="/2022/08/30/RabbitMQ/20210912204117.png" alt="img"></a></p><p>众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们推荐可以使用 JSON 来序列化</p><p>在 publisher 和 consumer 两个服务中都引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在各自的启动类中添加一个 Bean 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cdn.xn2001.com/img/2021/20210912204512.png"><img src="/2022/08/30/RabbitMQ/20210912204512.png" alt="img"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829111201641.png" alt="image-20220829111201641"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829111612160.png" alt="image-20220829111612160"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829111715201.png" alt="image-20220829111715201"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829112038807.png" alt="image-20220829112038807"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829112134790.png" alt="image-20220829112134790"></p><h1 id="服务拆分注意事项"><a href="#服务拆分注意事项" class="headerlink" title="服务拆分注意事项"></a>服务拆分注意事项</h1><ol><li>不同微服务.不重复开发相同业务</li><li>微服务数据独立,不访问其它微服务数据库</li><li>微服务可以将自己的业务接口暴露,供其它微服务调用</li></ol><h1 id="远程服务调用"><a href="#远程服务调用" class="headerlink" title="远程服务调用"></a>远程服务调用</h1><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829114656193.png" alt="image-20220829114656193"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829114733009.png" alt="image-20220829114733009"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">order-service启动类</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">order-service</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"><span class="comment">//注入restTemplate</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">//2.利用restTemplate发送请求,查询用户</span></span><br><span class="line">        <span class="comment">//2.1 url</span></span><br><span class="line">        String url=<span class="string">&quot;http://localhost:8889/user/&quot;</span>+order.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">//3. 将user封装到order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h1><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829132042359.png" alt="image-20220829132042359"></p><h2 id="eureka作用"><a href="#eureka作用" class="headerlink" title="eureka作用"></a>eureka作用</h2><ul><li>消费者该如何获取服务提供者具体信息<ol><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者提供服务名称向eureka拉取提供者信息</li></ol></li><li>如果有多个服务提供者,消费者该如何选择<ol><li>服务消费者利用负载均衡算法,从服务列表挑选一个</li></ol></li><li>消费者如何感知服务提供者健康状态<ol><li>服务提供者会每隔30s向EurekaServer发送心跳请求,报告健康状态</li><li>eureka会更新记录服务列表信息,心跳不正常会被剔除</li><li>消费者可以拉取到最新的信息</li></ol></li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829132510073.png" alt="image-20220829132510073"></p><h2 id="eureka搭建"><a href="#eureka搭建" class="headerlink" title="eureka搭建"></a>eureka搭建</h2><ol><li><p>创建项目导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写启动类,添加@EnableEurekaServe注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加application.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaServer</span> <span class="comment">#名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="注册service"><a href="#注册service" class="headerlink" title="注册service"></a>注册service</h2><ol><li><p>在user-service项目引入导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在application.yml编写配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userService</span></span><br></pre></td></tr></table></figure><p>order同上</p></li></ol><h4 id="服务拉取"><a href="#服务拉取" class="headerlink" title="服务拉取"></a>服务拉取</h4><ol><li><p>修改OrderService代码,修改url路径,用服务器名代替ip,端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">//2.利用restTemplate发送请求,查询用户</span></span><br><span class="line">        <span class="comment">//2.1 url</span></span><br><span class="line">        String url=<span class="string">&quot;http://userService/user/&quot;</span>+order.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">//3. 将user封装到order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在order-service项目的启动类的RestTemplate添加负载均衡注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//负载均衡注解</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><h4 id="负载均衡流程"><a href="#负载均衡流程" class="headerlink" title="负载均衡流程"></a>负载均衡流程</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829142849287.png" alt="image-20220829142849287"></p><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829142928747.png" alt="image-20220829142928747"></p><table><thead><tr><th align="left"><strong>内置负载均衡规则类</strong></th><th align="left"><strong>规则描述</strong></th></tr></thead><tbody><tr><td align="left">RoundRobinRule</td><td align="left">简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td align="left">AvailabilityFilteringRule</td><td align="left">对以下两种服务器进行忽略：（1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule 规则的客户端也会将其忽略。并发连接数的上限，可以由客户端设置。</td></tr><tr><td align="left">WeightedResponseTimeRule</td><td align="left">为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td align="left"><strong>ZoneAvoidanceRule</strong></td><td align="left">以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td align="left">BestAvailableRule</td><td align="left">忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td align="left">RandomRule</td><td align="left">随机选择一个可用的服务器。</td></tr><tr><td align="left">RetryRule</td><td align="left">重试机制的选择逻辑</td></tr></tbody></table><h4 id="自定义策略"><a href="#自定义策略" class="headerlink" title="自定义策略"></a>自定义策略</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829143211309.png" alt="image-20220829143211309"></p><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><blockquote><p>Ribbon 默认是采用懒加载，即第一次访问时才会去创建 LoadBalanceClient，拉取集群地址，所以请求时间会很长</p></blockquote><p>而饥饿加载则会在项目启动时创建 LoadBalanceClient，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829143527391.png" alt="image-20220829143527391"></p><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><blockquote><p>Nacos为阿里巴巴的产品,现在为springCloud组件,相比Eureka功能更加丰富</p></blockquote><p>安装启动:进去nacos&#x2F;bin文件夹 使用startup.cmd -m standalone运行</p><p>默认用户名密码nacos</p><h3 id="服务注册Nacos"><a href="#服务注册Nacos" class="headerlink" title="服务注册Nacos"></a>服务注册Nacos</h3><ol><li><p>在父工程引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注释掉order-service和user-service的eureka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件 在spring下属编写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Nacos服务分级存储模型"><a href="#Nacos服务分级存储模型" class="headerlink" title="Nacos服务分级存储模型"></a>Nacos服务分级存储模型</h3><h4 id="分级存储模型"><a href="#分级存储模型" class="headerlink" title="分级存储模型"></a>分级存储模型</h4><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>,例如user-service,可以有</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假设这些实例分布于各地的不同机房</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos将同一个机房内的实例称为一个<strong>集群</strong></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829152950875.png" alt="image-20220829152950875"></p><h3 id="服务集群属性"><a href="#服务集群属性" class="headerlink" title="服务集群属性"></a>服务集群属性</h3><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。<strong>当本集群内不可用时，才访问其它集群。</strong>例如：杭州机房内的 order-service 应该优先访问同机房的 user-service   </p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829153105922.png" alt="image-20220829153105922"></p><ol><li><p>修改application.yml属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment">#集群名</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="NacosRule"><a href="#NacosRule" class="headerlink" title="NacosRule"></a>NacosRule</h3><p>Ribbon的默认实现 <code>ZoneAvoidanceRule</code> 并不能实现根据同集群优先来实现负载均衡，我们把规则改成 <strong>NacosRule</strong> 即可。我们是用 orderservice 调用 userservice，所以在 orderservice 配置规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">iRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//默认为轮询规则，这里自定义为随机规则</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NacosRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">#负载均衡规则 </span></span><br></pre></td></tr></table></figure><h3 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos 提供了<strong>权重配置来控制访问频率</strong>，0~1 之间，权重越大则访问频率越高，权重修改为 0，则该实例永远不会被访问。</p><p>在 Nacos 控制台，找到 user-service 的实例列表，点击编辑，即可修改权重。</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092020.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092020.png" alt="img"></a></p><p>在弹出的编辑窗口，修改权重</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092026.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092026.png" alt="img"></a></p><p>另外，在服务升级的时候，有一种较好的方案：我们也可以通过调整权重来进行平滑升级，例如：先把 userservice 权重调节为 0，让用户先流向 userservice2、userservice3，升级 userservice后，再把权重从 0 调到 0.1，让一部分用户先体验，用户体验稳定后就可以往上调权重啦</p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>Nacos 提供了 namespace 来实现环境隔离功能。</p><ul><li>Nacos 中可以有多个 namespace</li><li>namespace 下可以有 group、service 等</li><li>不同 namespace 之间<strong>相互隔离</strong>，例如不同 namespace 的服务互相不可见</li></ul><p><a href="https://cdn.xn2001.com/img/2021/20210901092032.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092032.png" alt="img"></a></p><h4 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h4><p>默认情况下，所有 service、data、group 都在同一个 namespace，名为 public(保留空间)：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092038.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092038.png" alt="img"></a></p><p>我们可以点击页面新增按钮，添加一个 namespace：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092050.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092050.png" alt="img"></a></p><p>然后，填写表单：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092059.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092059.png" alt="img"></a></p><p>就能在页面看到一个新的 namespace：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092114.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092114.png" alt="img"></a></p><h4 id="配置namespace"><a href="#配置namespace" class="headerlink" title="配置namespace"></a>配置namespace</h4><p>给微服务配置 namespace 只能通过修改配置来实现。</p><p>例如，修改 order-service 的 application.yml 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间ID</span></span><br></pre></td></tr></table></figure><p>重启 order-service 后，访问控制台。</p><p><strong>public</strong></p><p><a href="https://cdn.xn2001.com/img/2021/20210901092143.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092143.png" alt="img"></a></p><p><strong>dev</strong></p><p><a href="https://cdn.xn2001.com/img/2021/20210901092130.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092130.png" alt="img"></a></p><p>此时访问 order-service，因为 namespace 不同，会导致找不到 userservice，控制台会报错：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092138.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092138.png" alt="img"></a></p><h4 id="临时实例"><a href="#临时实例" class="headerlink" title="临时实例"></a>临时实例</h4><p>Nacos 的服务实例分为两种类型：</p><ul><li><strong>临时实例</strong>：如果实例宕机超过一定时间，会从服务列表剔除，<strong>默认的类型</strong>。</li><li>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>另外，Nacos 集群**默认采用AP方式(可用性)<strong>，当集群中存在非临时实例时，</strong>采用CP模式(一致性)**；而 Eureka 采用AP方式，不可切换。（这里说的是 CAP 原理，后面会写到）</p><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><ul><li>配置更新热更新</li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829160219067.png" alt="image-20220829160219067"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829161113192.png" alt="image-20220829161113192"></p><ol><li><p>引入依赖 user-service</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写bootstrap.yml文件 优先级高于application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userService</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件后缀名</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"> <span class="string">注释application重复配置</span></span><br></pre></td></tr></table></figure></li><li><p>使用value注解读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><ul><li><p>方法1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在value注解所在类上添加refreshscope注解</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">添加配置类</span><br><span class="line">    <span class="keyword">package</span> cn.itcast.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:PatternProperties</span></span><br><span class="line"><span class="comment"> * Package:cn.itcast.order.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/29 16:32</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br><span class="line">在controller自动转配</span><br></pre></td></tr></table></figure></li></ul><h4 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h4><p>其实在服务启动时，nacos 会读取多个配置文件，例如：</p><ul><li><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</li><li><code>[spring.application.name].yaml</code>，例如：userservice.yaml</li></ul><p>这里的 <code>[spring.application.name].yaml</code> 不包含环境，<strong>因此可以被多个环境共享</strong>。</p><p><strong>添加一个环境共享配置</strong></p><p>我们在 nacos 中添加一个 userservice.yaml 文件：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092323.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092323.png" alt="img"></a></p><p><strong>在 user-service 中读取共享配置</strong></p><p>在 user-service 服务中，修改 PatternProperties 类，读取新添加的属性：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092314.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092314.png" alt="img"></a></p><p>在 user-service 服务中，修改 UserController，添加一个方法：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092331.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092331.png" alt="img"></a></p><p><strong>运行两个 UserApplication，使用不同的profile</strong></p><p>修改 UserApplication2 这个启动项，改变其profile值：</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092345.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092345.png" alt="img"></a></p><p><a href="https://cdn.xn2001.com/img/2021/20210901092338.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092338.png" alt="img"></a></p><p>这样，UserApplication(8081) 使用的 profile 是 dev，UserApplication2(8082) 使用的 profile 是test</p><p>启动 UserApplication 和 UserApplication2</p><p>访问地址：<a href="http://localhost:8081/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8081/user/prop，结果：</a></p><p><a href="https://cdn.xn2001.com/img/2021/20210901092400.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092400.png" alt="img"></a></p><p>访问地址：<a href="http://localhost:8082/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8082/user/prop，结果：</a></p><p><a href="https://cdn.xn2001.com/img/2021/20210901092419.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092419.png" alt="img"></a></p><p>可以看出来，不管是 dev，还是 test 环境，都读取到了 envSharedValue 这个属性的值。</p><p>上面的都是同一个微服务下，<strong>那么不同微服务之间可以环境共享吗？</strong></p><p>通过下面的两种方式来指定：</p><ul><li>extension-configs</li><li>shared-configs</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">extends-configs:</span> <span class="comment"># 多微服务间共享的配置列表</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">common.yaml</span> <span class="comment"># 要共享的配置文件id</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment"># 多微服务间共享的配置列表</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">common.yaml</span> <span class="comment"># 要共享的配置文件id</span></span><br></pre></td></tr></table></figure><h4 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h4><p>当 nacos、服务本地同时<strong>出现相同属性时</strong>，优先级有高低之分。</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092501.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092501.png" alt="img"></a></p><p>更细致的配置</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092520.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092520.png" alt="img"></a></p><h3 id="Nacos集群"><a href="#Nacos集群" class="headerlink" title="Nacos集群"></a>Nacos集群</h3><h4 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h4><p><a href="https://cdn.xn2001.com/img/2021/202108181959897.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108181959897.png" alt="img"></a></p><p>其中包含 3 个Nacos 节点，然后一个负载均衡器 Nginx 代理 3 个 Nacos，我们计划的 Nacos 集群如下图，MySQL 的主从复制后续再添加。</p><p><a href="https://cdn.xn2001.com/img/2021/202108182000220.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108182000220.png" alt="img"></a></p><p>三个 Nacos 节点的地址</p><table><thead><tr><th align="left">节点</th><th align="left">ip</th><th align="left">port</th></tr></thead><tbody><tr><td align="left">nacos1</td><td align="left">192.168.150.1</td><td align="left">8845</td></tr><tr><td align="left">nacos2</td><td align="left">192.168.150.1</td><td align="left">8846</td></tr><tr><td align="left">nacos3</td><td align="left">192.168.150.1</td><td align="left">8847</td></tr></tbody></table><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><p>Nacos 默认数据存储在内嵌数据库 Derby 中，不属于生产可用的数据库。官方推荐的最佳实践是使用带有主从的高可用数据库集群，主从模式的高可用数据库。这里我们以单点的数据库为例。</p><p>首先新建一个数据库，命名为 nacos，而后导入下面的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="配置Nacos"><a href="#配置Nacos" class="headerlink" title="配置Nacos"></a>配置Nacos</h4><p>进入 nacos 的 conf 目录，修改配置文件 cluster.conf.example，重命名为 cluster.conf</p><p><a href="https://cdn.xn2001.com/img/2021/202108182004564.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108182004564.png" alt="img"></a></p><p>添加内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure><p>然后修改 application.properties 文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>将 nacos 文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p><a href="https://cdn.xn2001.com/img/2021/202108182004103.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108182004103.png" alt="img"></a></p><p>然后分别修改三个文件夹中的 application.properties，</p><p>nacos1</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><p>nacos2</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure><p>nacos3</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure><p>然后分别启动三个 nacos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd</span><br></pre></td></tr></table></figure><h4 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h4><p>修改 nginx 文件夹下的 conf&#x2F;nginx.conf 文件，配置如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 nginx，在浏览器访问：<a href="http://localhost/nacos">http://localhost/nacos</a></p><p>在代码中的 application.yml 文件配置改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment"># Nacos地址</span></span><br></pre></td></tr></table></figure><p>实际部署时，需要给做反向代理的 Nginx 服务器设置一个域名，这样后续如果有服务器迁移 Nacos 的客户端也无需更改配置。Nacos 的各个节点应该部署到多个不同服务器，做好容灾和隔离工作。</p><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><ol><li><p>我们在 order-service 引入 feign 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 order-service 启动类添加注解开启 Feign</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure></li><li><p>在 order-service 中新建一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@FeignClient(&quot;userservice&quot;)</code>：其中参数填写的是微服务名</p><p><code>@GetMapping(&quot;/user/&#123;id&#125;&quot;)</code>：其中参数填写的是请求路径</p><p>这个客户端主要是基于 SpringMVC 的注解 <code>@GetMapping</code> 来声明远程调用的信息</p><p>Feign 可以帮助我们发送 http 请求，无需自己使用 RestTemplate 来发送了</p></li><li><p>直接在service使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(orderId);</span><br></pre></td></tr></table></figure></li></ol><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>Feign 可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th align="left">类型</th><th align="left">作用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>feign.Logger.Level</strong></td><td align="left">修改日志级别</td><td align="left">包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td align="left">feign.codec.Decoder</td><td align="left">响应结果的解析器</td><td align="left">http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td align="left">feign.codec.Encoder</td><td align="left">请求参数编码</td><td align="left">将请求参数编码，便于通过http请求发送</td></tr><tr><td align="left">feign.Contract</td><td align="left">支持的注解格式</td><td align="left">默认是SpringMVC的注解</td></tr><tr><td align="left">feign.Retryer</td><td align="left">失败重试机制</td><td align="left">请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的 @Bean 覆盖默认 Bean 即可。下面以日志为例来演示如何自定义配置。</p><p>基于配置文件修改 feign 的日志级别可以针对单个服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure><p><strong>也可以针对所有服务</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure><p>而日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据</li></ul><p>也可以基于 <strong>Java 代码</strong>来修改日志级别，先声明一个类，然后声明一个 Logger.Level 的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要<strong>全局生效</strong>，将其放到启动类的 <code>@EnableFeignClients</code> 这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure><p>如果是<strong>局部生效</strong>，则把它放到对应的 <code>@FeignClient</code> 这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>Feign 底层发起 http 请求，依赖于其它的框架。其底层客户端实现有：</p><ul><li><strong>URLConnection</strong>：默认实现，不支持连接池</li><li><strong>Apache HttpClient</strong> ：支持连接池</li><li><strong>OKHttp</strong>：支持连接池</li></ul><p>因此提高 Feign 性能的主要手段就是使用<strong>连接池</strong>代替默认的 URLConnection</p><p>另外，日志级别应该尽量用 basic&#x2F;none，可以有效提高性能。</p><p><strong>这里我们用 Apache 的HttpClient来演示连接池。</strong></p><p>在 order-service 的 pom 文件中引入 HttpClient 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置连接池</strong></p><p>在 order-service 的 application.yml 中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><p>在 FeignClientFactoryBean 中的 loadBalance 方法中打断点</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092729.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092729.png" alt="img"></a></p><p>Debug 方式启动 order-service 服务，可以看到这里的 client，底层就是 HttpClient</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092737.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092737.png" alt="img"></a></p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><p>一样的代码可以通过继承来共享：</p><p>1）定义一个 API 接口，利用定义方法，并基于 SpringMVC 注解做声明</p><p>2）Feign 客户端、Controller 都集成该接口</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092803.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092803.png" alt="img"></a></p><p>优点</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点</p><ul><li>服务提供方、服务消费方紧耦合</li><li>参数列表中的注解映射并不会继承，因此 Controller 中必须再次声明方法、参数列表、注解</li></ul><h4 id="抽取方式"><a href="#抽取方式" class="headerlink" title="抽取方式"></a>抽取方式</h4><p>将 FeignClient 抽取为独立模块，并且把接口有关的 pojo、默认的 Feign 配置都放到这个模块中，提供给所有消费者使用。</p><p>例如：将 UserClient、User、Feign 的默认配置都抽取到一个 feign-api 包中，所有微服务引用该依赖包，即可直接使用。</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092811.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092811.png" alt="img"></a></p><p>接下来我们就用该方法在代码中实现</p><p><strong>首先创建一个 module，命名为 feign-api</strong></p><p><a href="https://cdn.xn2001.com/img/2021/20210901092835.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092835.png" alt="img"></a></p><p>在 feign-api 中然后引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>order-service中 的 UserClient、User 都复制到 feign-api 项目中</p><p><a href="https://cdn.xn2001.com/img/2021/20210901092848.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210901092848.png" alt="img"></a></p><p>接下来在 order-service 中使用 feign-api</p><p>由于我们已经将 UserClient、User 放在 fegin-api 中共享了 ，所以可以删除 order-service 中的 UserClient、User，然后在 order-service 中引入 feign-api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xn2001.feign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改注解</strong></p><p>当定义的 FeignClient 不在 SpringBootApplication 的扫描包范围下时，这些 FeignClient 就不能使用。</p><p>修改 order-service 启动类上的 <code>@EnableFeignClients</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.xn2001.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure><h1 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>Gateway 网关是我们服务的守门神，<strong>所有微服务的统一入口。</strong></p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220829224944022.png" alt="image-20220829224944022"></p><p>在 SpringCloud 中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul 是基于 Servlet 实现，属于阻塞式编程。而 Spring Cloud Gateway 则是基于 Spring5 中提供的WebFlux，属于响应式编程的实现，具备更好的性能</p><h3 id="创建网关"><a href="#创建网关" class="headerlink" title="创建网关"></a>创建网关</h3><ol><li><p>创建module,引入springCloudGeteway依赖和nacos的服务发现依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写路由配置及nacos地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">#路由id 唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userService</span> <span class="comment">#目标地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderService</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="路由断言工厂"><a href="#路由断言工厂" class="headerlink" title="路由断言工厂"></a>路由断言工厂</h3><p>网关路由可以配置的内容包括:</p><ul><li>路由id:路由唯一标识</li><li>uri: 路由目的地,支持lb和http两种</li><li>predicates:路由断言,判断请求是否符合要求,否则转发到路由目的地</li><li>filters:路由过滤器,处理请求或响应</li></ul><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被 Predicate Factory 读取并处理，转变为路由判断的条件。</p><p>例如 <code>Path=/user/**</code> 是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code> 类来处理的，像这样的断言工厂在 Spring Cloud Gateway 还有十几个</p><table><thead><tr><th align="left">名称</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">After</td><td align="left">是某个时间点后的请求</td><td align="left">- After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td align="left">Before</td><td align="left">是某个时间点之前的请求</td><td align="left">- Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td align="left">Between</td><td align="left">是某两个时间点之前的请求</td><td align="left">- Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver], 2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td align="left">Cookie</td><td align="left">请求必须包含某些cookie</td><td align="left">- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td align="left">Header</td><td align="left">请求必须包含某些header</td><td align="left">- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td align="left">Host</td><td align="left">请求必须是访问某个host（域名）</td><td align="left">- Host&#x3D;<code>**.somehost.org</code>, <code>**.anotherhost.org</code></td></tr><tr><td align="left">Method</td><td align="left">请求方式必须是指定方式</td><td align="left">- Method&#x3D;GET,POST</td></tr><tr><td align="left">Path</td><td align="left">请求路径必须符合指定规则</td><td align="left">- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td align="left">Query</td><td align="left">请求参数必须包含指定参数</td><td align="left">- Query&#x3D;name, Jack或者- Query&#x3D;name</td></tr><tr><td align="left">RemoteAddr</td><td align="left">请求者的ip必须是指定范围</td><td align="left">- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td align="left">Weight</td><td align="left">权重处理</td><td align="left"></td></tr></tbody></table><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</a> 官方文档</p><h3 id="过滤器工厂"><a href="#过滤器工厂" class="headerlink" title="过滤器工厂"></a>过滤器工厂</h3><p>GatewayFilter 是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理。</p><p><a href="https://cdn.xn2001.com/img/2021/202108220133487.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108220133487.png" alt="img"></a></p><p>Spring提供了31种不同的路由过滤器工厂。</p><blockquote><p>官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories</a></p></blockquote><table><thead><tr><th align="left"><strong>名称</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">AddRequestHeader</td><td align="left">给当前请求添加一个请求头</td></tr><tr><td align="left">RemoveRequestHeader</td><td align="left">移除请求中的一个请求头</td></tr><tr><td align="left">AddResponseHeader</td><td align="left">给响应结果中添加一个响应头</td></tr><tr><td align="left">RemoveResponseHeader</td><td align="left">从响应结果中移除有一个响应头</td></tr><tr><td align="left">RequestRateLimiter</td><td align="left">限制请求的流量</td></tr></tbody></table><p>下面我们以 AddRequestHeader 为例：</p><p><a href="https://cdn.xn2001.com/img/2021/202108220139913.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108220139913.png" alt="img"></a></p><p><strong>需求</strong>：给所有进入 userservice 的请求添加一个请求头：<code>sign=xn2001.com is eternal</code></p><p>只需要修改 gateway 服务的 application.yml文件，添加路由过滤即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=sign,</span> <span class="string">xn2001.com</span> <span class="string">is</span> <span class="string">eternal</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure><p>如何验证，我们修改 userservice 中的一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="meta">@RequestHeader(value = &quot;sign&quot;, required = false)</span> String sign)</span> &#123;</span><br><span class="line">    log.warn(sign);</span><br><span class="line">    <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启两个服务，访问：<a href="http://localhost:10010/user/1">http://localhost:10010/user/1</a></p><p>可以看到控制台打印出了这个请求头</p><p><a href="https://cdn.xn2001.com/img/2021/202108220145565.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108220145565.png" alt="img"></a></p><p>当然，Gateway 也是有<strong>全局过滤器</strong>的，如果要<strong>对所有的路由都生效</strong>，则可以将过滤器工厂写到 default-filters 下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=sign,</span> <span class="string">xn2001.com</span> <span class="string">is</span> <span class="string">eternal</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>上面介绍的过滤器工厂，网关提供了 31 种，但每一种过滤器的作用都是固定的。<strong>如果我们希望拦截请求，做自己的业务逻辑则没办法实现</strong>。</p><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，<strong>与 GatewayFilter 的作用一样</strong>。区别在于 GlobalFilter 的逻辑可以<strong>写代码来自定义规则</strong>；而 GatewayFilter 通过配置定义，处理逻辑是固定的。</p><p><strong>需求</strong>：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件</p><ul><li>参数中是否有 authorization</li><li>authorization 参数值是否为 admin</li></ul><p>如果同时满足则放行，否则拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试：http://localhost:10010/order/101?authorization=admin</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取第一个 authorization 参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(authorization))&#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置拦截状态码信息</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 设置拦截</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置过滤器优先级，值越低优先级越高</span></span><br><span class="line">    <span class="comment">// 也可以使用 @Order 注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器顺序"><a href="#过滤器顺序" class="headerlink" title="过滤器顺序"></a>过滤器顺序</h3><p>请求进入网关会碰到三类过滤器：DefaultFilter、当前路由的过滤器、GlobalFilter；</p><p>请求路由后，会将三者合并到一个过滤器链（集合）中，排序后依次执行每个过滤器.</p><p><a href="https://cdn.xn2001.com/img/2021/202108230002747.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/202108230002747.png" alt="img"></a></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个 int 类型的 order 值，<strong>order 值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter 通过实现 Ordered 接口，或者使用 @Order 注解来指定 order 值，由我们自己指定。</li><li>路由过滤器和 defaultFilter 的 order 由 Spring 指定，默认是按照声明顺序从1递增。</li><li>当过滤器的 order 值一样时，<strong>会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter 的顺序执行。</strong></li></ul><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>不了解跨域问题的同学可以百度了解一下；在 Gateway 网关中解决跨域问题还是比较方便的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 allowedOrigins: “*” 允许所有网站</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker #启动</span><br><span class="line">systemctl stop docker  # 停止</span><br><span class="line">systemctl restart docker #重启</span><br><span class="line">docker -v 查看版本</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>镜像名称分为两部分:[repo]:[tag]</li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220830180042842.png" alt="image-20220830180042842"></p><p>docker –help查看帮助文档</p><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220830184732105.png" alt="image-20220830184732105"></p><blockquote><p>docker exex 进入容器执行命令</p><p>docker logs 查看容器日志</p><p>docker ps 查看所有运行的容器和状态</p><p>docker rm 删除指定容器</p></blockquote><p>查看当前系统的内核版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>卸载旧版本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>更新yum软件包索引</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>安装相关插件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">device-mapper-persistent-data \</span><br><span class="line">lvm2</span><br></pre></td></tr></table></figure><p>设置Docker的镜像仓库-使用阿里源</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用阿里源</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"># 清华大学源</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>进行安装</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装最新版本的 Docker CE</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br><span class="line">#安装中出现下面提示, 输入 y 然后回车</span><br><span class="line"></span><br><span class="line">#安装docker相关的 docker-ce 社区版 而ee是企业版</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>启动与停止Docker服务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">启动docker： systemctl start docker </span><br><span class="line">停止docker： systemctl stop docker </span><br><span class="line">重启docker： systemctl restart docker </span><br><span class="line">查看docker状态：systemctl status docker </span><br><span class="line">开机自动启动docker：systemctl enable docker</span><br><span class="line">Docker帮助命令：docker --help</span><br></pre></td></tr></table></figure><p>卸载Docker服务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">卸载依赖  yum remove docker-ce docker-ce-cli containerd.io </span><br><span class="line">删除资源  rm -rf /var/lib/docker </span><br><span class="line">/var/lib/docker 是docker的默认工作路径！</span><br></pre></td></tr></table></figure><h3 id="配置国内镜像加速器"><a href="#配置国内镜像加速器" class="headerlink" title="配置国内镜像加速器"></a><strong>配置国内镜像加速器</strong></h3><p>1、登录阿里云找到容器服务，搜索镜像服务，找到镜像加速器</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/v2-0bffbc373101b53b8b30a67154c3d40a_720w.jpg" alt="img"></p><p>通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器,如果不存在则手动创建，文件加入上面的地址内容。然后重启docker服务，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#重载此配置文件 systemctl daemon-reload </span><br><span class="line">#重启 docker systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a><strong>镜像命令</strong></h3><p>docker官网镜像搜索 : <a href="https://hub.docker.com/">https://hub.docker.com</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#查看所有本地主机上的镜像</span><br><span class="line">docker images </span><br><span class="line"></span><br><span class="line">#搜索镜像</span><br><span class="line">docker search </span><br><span class="line">#搜索出来的镜像就是STARS大于3000的mysql镜像</span><br><span class="line">docker search mysql --filter=STARS=3000</span><br><span class="line"></span><br><span class="line">#拉取镜像 (如果不写标签名，默认就是latest)</span><br><span class="line">docker pull 镜像名:标签名</span><br><span class="line"></span><br><span class="line">#删除镜像</span><br><span class="line">docker rmi -f 镜像id 镜像id 镜像id 镜像id</span><br><span class="line">#删除全部镜像</span><br><span class="line">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure><h3 id="容器命令-1"><a href="#容器命令-1" class="headerlink" title="容器命令"></a><strong>容器命令</strong></h3><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a><strong>查看容器</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看全部容器</span><br><span class="line">docker ps -a</span><br><span class="line">#查看正在运行容器：</span><br><span class="line">docker ps</span><br><span class="line">#查看停止的容器</span><br><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure><h3 id="启动-x2F-停止-x2F-删除容器"><a href="#启动-x2F-停止-x2F-删除容器" class="headerlink" title="启动&#x2F;停止&#x2F;删除容器"></a><strong>启动&#x2F;停止&#x2F;删除容器</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">#重启容器</span><br><span class="line">docker restart 容器id </span><br><span class="line">#停止当前正在运行的容器</span><br><span class="line">docker stop 容器id </span><br><span class="line">#强制停止当前容器</span><br><span class="line">docker kill 容器id</span><br><span class="line">#删除指定容器</span><br><span class="line">docker rm 容器id </span><br></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a><strong>退出容器</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #容器直接退出</span><br><span class="line">ctrl +P +Q #容器不停止退出</span><br></pre></td></tr></table></figure><h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a><strong>新建容器并启动</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 语法：docker run [OPTIONS] 镜像名:标签名</span><br><span class="line"># 创建容器后，马上会启动容器，并进入容器</span><br><span class="line">例子：docker run -it --name=容器名 镜像名:标签名 /bin/bash</span><br><span class="line"></span><br><span class="line"># 数据目录挂载</span><br><span class="line">docker run -id -v /宿主机绝对路径目录:/容器内目录 --name=容器名 镜像名</span><br><span class="line"># 目录挂载只读（Read-only）权限</span><br><span class="line">docker run -id -v /宿主机绝对路径目录:/容器内目录:ro --name=容器名 镜像名</span><br></pre></td></tr></table></figure><h3 id="创建守护式容器"><a href="#创建守护式容器" class="headerlink" title="创建守护式容器"></a><strong>创建守护式容器</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个守护式容器（后台运行的容器）</span><br><span class="line">docker run -id --name=容器名 镜像名:标签名</span><br></pre></td></tr></table></figure><h3 id="登录容器"><a href="#登录容器" class="headerlink" title="登录容器"></a><strong>登录容器</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 登录已经启动的容器方式</span><br><span class="line">方式1 docker exec -it 容器id bashshell</span><br><span class="line">方式2 docker exec -it 容器名称|容器id /bin/bash</span><br></pre></td></tr></table></figure><h3 id="拷贝宿主机与容器中的文件"><a href="#拷贝宿主机与容器中的文件" class="headerlink" title="拷贝宿主机与容器中的文件"></a><strong>拷贝宿主机与容器中的文件</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将宿主机文件拷贝到容器内</span><br><span class="line">docker cp 要拷贝的宿主机文件或目录 容器名称:容器文件或目录</span><br><span class="line"># 从容器内文件拷贝到宿主机</span><br><span class="line">docker cp 容器名称:要拷贝的容器文件或目录 宿主机文件或目录</span><br><span class="line">注意：文件拷贝 docker cp 命令 均在宿主机中操作</span><br></pre></td></tr></table></figure><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a><strong>常用其他命令</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看容器中进程信息 ps</span><br><span class="line">docker top 容器id</span><br><span class="line"># 查看日志</span><br><span class="line">docker logs -t --tail n 容器id #查看n行日志</span><br><span class="line">docker logs -ft 容器id #跟着日志</span><br><span class="line"># 查看镜像的元数据</span><br><span class="line">docker inspect 容器id</span><br><span class="line"># 查看容器IP地址</span><br><span class="line">docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; 容器名</span><br><span class="line"># 查看当前docker运行状态  （查看CPU状态）</span><br><span class="line">docker stats</span><br></pre></td></tr></table></figure><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a><strong>部署应用</strong></h3><h4 id="部署-MySQL"><a href="#部署-MySQL" class="headerlink" title="部署 MySQL"></a><strong>部署 MySQL</strong></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 拉取MySQL镜像</span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"># 创建 MySQL 容器</span><br><span class="line">docker run -id --name=my_mysql -p 33306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=密码 mysql:5.7</span><br><span class="line"># -d 后台启动 -p 端口映射 -v 卷挂载 -e 环境变量 -name 容器名字</span><br><span class="line"></span><br><span class="line"># 进入MySQL容器, 登陆MySQL</span><br><span class="line">docker exec -it mxg_mysql /bin/bash</span><br><span class="line"></span><br><span class="line"># docker exec -it mxg_mysql /bin/bash</span><br><span class="line"></span><br><span class="line"># 登录Mysql</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h4 id="部署-Nginx"><a href="#部署-Nginx" class="headerlink" title="部署 Nginx"></a><strong>部署 Nginx</strong></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 拉取镜像</span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"># 创建容器</span><br><span class="line">docker run -d --name=nginx01 -p 3344:80 nginx</span><br><span class="line"></span><br><span class="line"># 查看本机的状况</span><br><span class="line">curl localhost:3344</span><br><span class="line"></span><br><span class="line"># 进入容器，查看容器配置文件</span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><h4 id="部署-Redis"><a href="#部署-Redis" class="headerlink" title="部署 Redis"></a><strong>部署 Redis</strong></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">docker run -id --name=mxg_redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h4 id="部署-tomcat"><a href="#部署-tomcat" class="headerlink" title="部署 tomcat"></a><strong>部署 tomcat</strong></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line"># 创建容器</span><br><span class="line">docker run -id --name=tomcat01 -p 9095:8080 -v /usr/project:/usr/local/tomcat/webapps --</span><br><span class="line">privileged=true tomcat</span><br><span class="line">步骤：--privileged=true 如果映射的是多级目录，防止有可能会出现没有权限的问题，</span><br><span class="line">-v 映射目录：宿主机目录:容器映射目录</span><br></pre></td></tr></table></figure><h4 id="部署-es-kibana"><a href="#部署-es-kibana" class="headerlink" title="部署 es+kibana"></a><strong>部署 es+kibana</strong></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch</span><br><span class="line"></span><br><span class="line"># 创建容器</span><br><span class="line">docker run -id --name=elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br><span class="line">步骤：-e ES_JAVA_OPTS 增加内存限制64兆，最大是512兆</span><br><span class="line"></span><br><span class="line"># 查看本机的状况</span><br><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a><strong>镜像操作</strong></h3><p>提交一个镜像：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提交容器成为镜像</span><br><span class="line">docker commit -m=“描述信息” -a=&quot;作者名字&quot; 容器id 目标镜像名:[版本号]</span><br><span class="line">例子：</span><br><span class="line">docker commit -m=“描述” -a=&quot;yan&quot; 7..容器ID tomcatNew:1.0</span><br></pre></td></tr></table></figure><p>使用数据卷：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># -v  两个目录进行关联挂载</span><br><span class="line">docker run -it -v 主机目录:容器内的目录</span><br><span class="line"></span><br><span class="line"># 多个容器实现数据共享 ，创建第2个容器，引用之前创建好的容器名。</span><br><span class="line">docker run --.... --volumes-form 其他容器名</span><br></pre></td></tr></table></figure><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><strong>Dockerfile</strong></h4><p>dockerfile 是用来构建docker镜像文件</p><p>步骤：</p><ol><li>编写dockerfile 文件</li><li>docker build 构建镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像</li></ol><h4 id="体系结构："><a href="#体系结构：" class="headerlink" title="体系结构："></a><strong>体系结构：</strong></h4><ul><li>FROM：基础镜像</li><li>MAINTAINER：镜像作者、邮箱</li><li>RUN：容器构建时需要运行的命令</li><li>WORKDIR：设置工作目录</li><li>ENV：设置环境变量 (可以写多条)</li><li>ADD：将宿主机的文件复制到容器内，如果是一个压缩文件， 将会在复制 后自动解压</li><li>COPY：和ADD相似，但是如果有压缩文件并不能解压</li><li>VOLUME：容器数据卷</li><li>CMD：可以有多个CMD，但只有最后一个会生效。在构建容器时，会被 docker run 后面指定的参数覆盖。</li><li>ENTRYPOINT：和CMD相似，但是并不会被docker run指定的参数覆盖，而是追加参数</li><li>ONBUILD：当创建一个被继承的Dockerfile，会被触发，触发器</li></ul><p>例子：构建JDK镜像</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 来自基础镜像</span><br><span class="line">FROM centos:7</span><br><span class="line"># 指定镜像创建者信息</span><br><span class="line">MAINTAINER goodyan&lt;good.qq.com&gt;</span><br><span class="line"># 切换工作目录 /usr/local</span><br><span class="line">WORKDIR /usr/local</span><br><span class="line"># 创建一个存放jdk的路径</span><br><span class="line">RUN mkdir /usr/local/java</span><br><span class="line"># 安装vim插件</span><br><span class="line">RUN yum -y install vim</span><br><span class="line"># 将jdk压缩包复制并解压到容器中/usr/local/java</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/java</span><br><span class="line"># 配置java环境变量</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure><h4 id="构建镜像语法："><a href="#构建镜像语法：" class="headerlink" title="构建镜像语法："></a><strong>构建镜像语法：</strong></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -f / dockerfiel文件位置) -t 要生成的镜像名:[版本号] .</span><br><span class="line">docker build -f /home/dockerdir/dockerfiel -t tomcatNew:1.0 .</span><br><span class="line"># 查看是否构建成功</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="本地镜像发布到阿里云仓库"><a href="#本地镜像发布到阿里云仓库" class="headerlink" title="本地镜像发布到阿里云仓库"></a><strong>本地镜像发布到阿里云仓库</strong></h4><ul><li>登录阿里云</li><li>找到容器镜像服务</li><li>创建命名空间</li></ul><p>将本地镜像推送到阿里云镜像仓库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.登录阿里云Docker Registry, 密码为开通服务时设置的密码</span><br><span class="line">docker login --username=用户名 registry.cn-xxx(每个人地址不一样)</span><br><span class="line"># 2.标记此镜像为阿里云仓库的镜像</span><br><span class="line">docker tag [镜像id] registry.cn-xxxx.xxx.com/xxx/jdk:[镜像版本号]</span><br><span class="line"># 3.提交 </span><br><span class="line">docker push 镜像名:[镜像版本号]</span><br></pre></td></tr></table></figure><h3 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a><strong>Docker部署</strong></h3><h4 id="微服务打包Docker镜像"><a href="#微服务打包Docker镜像" class="headerlink" title="微服务打包Docker镜像"></a><strong>微服务打包Docker镜像</strong></h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">步骤1. 准备SpringBoot项目，进行打包</span><br><span class="line">mvn package install</span><br><span class="line"></span><br><span class="line">步骤2. 启动命令，进行测试是否启动成功</span><br><span class="line">windows系统启动：java -jar xxx.jar</span><br><span class="line">Linux系统启动：nohup java -jar xxx.jar</span><br><span class="line"></span><br><span class="line">步骤3.创建dockerfiel文件，与jar包存在同一目录</span><br><span class="line">dockerfiel文件内容:</span><br><span class="line">FROM java:8</span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br><span class="line"></span><br><span class="line">步骤4.上传服务器，构建镜像</span><br><span class="line">docker build -f /home/xxx/dockerfiel文件地址（如果在当前目录可省略-f）-p 端口映射 -t 镜像名:1.0 .</span><br><span class="line"></span><br><span class="line">步骤5.查看镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">步骤6.运行启动镜像</span><br><span class="line">docker run -id --name=容器名 镜像名:标签名</span><br><span class="line">或 docker run -d --name 容器名 -p 端口外:端口内 镜像名:标签名</span><br></pre></td></tr></table></figure><h4 id="IDEA集成Docker实现打包"><a href="#IDEA集成Docker实现打包" class="headerlink" title="IDEA集成Docker实现打包"></a><strong>IDEA集成Docker实现打包</strong></h4><p>步骤1：修改docker服务配置文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 修改配置文件</span><br><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line"># 修改内容</span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class="line">(修改ExecStart那行，并开启2375端口，0.0.0.0代表任何ip都可以访问)</span><br><span class="line"></span><br><span class="line"># 重新加载配置文件</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"># 重启docker</span><br><span class="line">systemctl restart docker.service</span><br><span class="line"># 查看端口是否开启</span><br><span class="line">netstar -nlpt   # 如果没有这个命令，安装插件 yum install net-tools</span><br><span class="line"># 关闭防火墙 / 开发端口号的防火墙</span><br><span class="line">firewall-cmd --list-ports # 查看</span><br><span class="line">firewall-cmd --zone=public --add-port=2375/tcp --permanent # 设置</span><br><span class="line">firewall-cmd --reload     # 重启</span><br></pre></td></tr></table></figure><p>步骤2：IDEA工具配置连接Docker</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/v2-d92966be84c227f0ffd8857039917581_720w.jpg" alt="img"></p><p>步骤3：使用 docker-maven-plugin插件 ，实现自动化部署</p><p>修改pop.xml文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">          &lt;!--鏡像名字--&gt;</span><br><span class="line">          &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">          &lt;imageTags&gt;</span><br><span class="line">              &lt;imageTag&gt;latest&lt;/imageTag&gt;</span><br><span class="line">&lt;!--          &lt;imageTag&gt;$&#123;project.version&#125;&lt;/imageTag&gt;--&gt;</span><br><span class="line">          &lt;/imageTags&gt;</span><br><span class="line">          &lt;baseImage&gt;java&lt;/baseImage&gt;</span><br><span class="line">          &lt;maintainer&gt;821521880@qq.com&lt;/maintainer&gt;</span><br><span class="line">          &lt;workdir&gt;/ROOT&lt;/workdir&gt;</span><br><span class="line">          &lt;cmd&gt;[&quot;java&quot;, &quot;-version&quot;]&lt;/cmd&gt;</span><br><span class="line">          &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;]&lt;/entryPoint&gt;</span><br><span class="line">      &lt;!--连接Docker 输入对应的IP地址 --&gt;</span><br><span class="line">          &lt;dockerHost&gt;http://123.56.94.235:2375&lt;/dockerHost&gt;</span><br><span class="line">          &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;</span><br><span class="line">          &lt;resources&gt;</span><br><span class="line">              &lt;resource&gt;</span><br><span class="line">                &lt;targetPath&gt;/ROOT&lt;/targetPath&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">              &lt;/resource&gt;</span><br><span class="line">          &lt;/resources&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>然后我们执行打包命令，就在Docker服务生成镜像</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package docker:build</span><br></pre></td></tr></table></figure><p>步骤4：打包自动化，自动化部署</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 当执行打包命令，就自动执行 build语句 -在pop.xml文件里添加-&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">        &lt;id&gt;build-image&lt;/id&gt;</span><br><span class="line">        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">        &lt;goals&gt;</span><br><span class="line">           &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">        &lt;/goals&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line"> &lt;/executions&gt;</span><br></pre></td></tr></table></figure><h4 id="Docker认证命令配置"><a href="#Docker认证命令配置" class="headerlink" title="Docker认证命令配置"></a><strong>Docker认证命令配置</strong></h4><p>使用CA加密认证，访问Docker更加安全</p><ol><li>创建ca文件夹，存放CA私钥&#x2F;公钥</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/ca</span><br><span class="line">cd /usr/local/ca/</span><br></pre></td></tr></table></figure><ol><li>生成私钥&#x2F;公钥</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br><span class="line"></span><br><span class="line"># Enter pass phrase for ca-key.pem:</span><br><span class="line"># 执行后，需要输入2次密码，设置密码</span><br><span class="line"></span><br><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br><span class="line"># 执行完，需要输入刚才设置的密码。</span><br><span class="line"># 然后依次输入 1国家名字 cn 2省份名称 bj 3城市 bj 4组织名称 good ... 个人信息</span><br></pre></td></tr></table></figure><ol><li>生成server-key.pem文件</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server-key.pem 4096</span><br><span class="line"># 执行完，/usr/local/ca 目录下会有3个文件</span><br></pre></td></tr></table></figure><ol><li>CA来签署公钥</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj &quot;/CN=IP地址(或者域名www.goodysr.cn)&quot; -sha256 -new -key server-key.pem -out server.csr</span><br><span class="line"># 例子</span><br><span class="line">openssl req -subj &quot;/CN=121.40.176.56&quot; -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure><ol><li>配置白名单</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo subjectAltName=IP:IP地址,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br><span class="line"># 例子</span><br><span class="line">echo subjectAltName = IP:121.40.176.56,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure><ol><li>将Docker使用属性设置仅用于服务器身份验证</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure><ol><li>生成签名证书</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"># 执行完，要输入刚才设置的密码，输入密码</span><br></pre></td></tr></table></figure><ol><li>生成客户端的key.pem</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out key.pem 4096</span><br><span class="line"></span><br><span class="line">openssl req -subj &#x27;/CN=client&#x27; -new -key key.pem -out client.csr</span><br></pre></td></tr></table></figure><ol><li>使用密钥适合客户端身份验证</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br><span class="line"></span><br><span class="line"># echo extendedKeyUsage = clientAuth &gt;&gt; extfile-client.cnf</span><br></pre></td></tr></table></figure><ol><li>生成cert.pem签名证书</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out cert.pem -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"># 输入完，要设置密码</span><br></pre></td></tr></table></figure><ol><li>删除不需要的文件</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -v client.csr server.csr</span><br></pre></td></tr></table></figure><ol><li>修改权限，避免密钥损坏</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line">chmod -v 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure><ol><li>归集服务器证书</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp server-*.pem  /etc/docker/</span><br><span class="line">cp ca.pem /etc/docker/</span><br><span class="line"></span><br><span class="line"># 以上两步操作都在ca文件夹内，如果当前不在ca文件夹，需加上路径</span><br><span class="line"># 把证书复制到/etc/docker/目录下</span><br></pre></td></tr></table></figure><ol><li>修改Docker配置</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line"># 修改内容</span><br><span class="line">ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/ca.pem \</span><br><span class="line">          --tlscert=/etc/docker/server-cert.pem \</span><br><span class="line">          --tlskey=/etc/docker/server-key.pem \</span><br><span class="line">          -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class="line"></span><br><span class="line"># 重新加载配置文件</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"># 重启docker</span><br><span class="line">systemctl restart docker</span><br><span class="line"># 开放2375端口</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 2376 -j ACCEPT</span><br><span class="line"># 查看信息</span><br><span class="line">iptables-save</span><br><span class="line"># 重启Docker</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure><ol><li>将服务器生成的私钥密钥，保存到本地环境</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/ca 目录下的 ca.pem ca-key.pem cert.pem key.pem </span><br><span class="line">保存到本地的 ca 目录下</span><br></pre></td></tr></table></figure><h4 id="Portainer图形化管理工具"><a href="#Portainer图形化管理工具" class="headerlink" title="Portainer图形化管理工具"></a><strong>Portainer图形化管理工具</strong></h4><ol><li>下载portainer镜像</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search portainer</span><br><span class="line">docker pull portainer/portainer</span><br></pre></td></tr></table></figure><ol><li>启动镜像</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name portainerUI -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer</span><br></pre></td></tr></table></figure><ol><li>开放端口号</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br><span class="line">firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ol><li>访问9000地址</li></ol><p>第一次登录需要创建用户，选择第一个。</p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a><strong>Docker Compose</strong></h3><p>高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><ol><li>下载：<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 下载方式:</span><br><span class="line"># 1.下载适应版本的 Compose</span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class="line"># 肯能网络原因，如果下载失败就下载另一个地址</span><br><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname-m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># 2.手动下载</span><br><span class="line"># https://github.com/docker/compose/releases</span><br><span class="line"># 下载 docker-compose-Linux-X86_64 文件，上传服务器 /usr/local/bin/ 目录下</span><br><span class="line"># 重命名 docker-compose </span><br><span class="line">mv docker-compose-Linux-X86_64 docker-compose</span><br><span class="line"></span><br><span class="line"># 3.修改文件权限</span><br><span class="line">chmod 777 docker-compose</span><br><span class="line"></span><br><span class="line"># 4.把文件方法bin目录下，配置可执行文件的系统变量，可以在任何目录下执行docker-compose命令</span><br><span class="line">mv docker-compose /usr/local/bin/</span><br><span class="line"></span><br><span class="line"># 5.查看版本信息，看是否安装成功</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h4><p>创建容器</p><p>需要通过docker-compose.yml模板文件，定义一组相关的应用容器作为一个项目。</p><p>案例1管理一个tomcat、mysql：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;        # 表示该docker-compose.yml文件使用的是Version 2 file format</span><br><span class="line">services:           # 为project定义服务。</span><br><span class="line">  mysql:            # 定义服务名称，随便起名</span><br><span class="line">    restart: always # 只要docker启动，容器就启动</span><br><span class="line">    image: daocloud.io/library/mysql:5.7.6  # 指定镜像路径（默认官方镜像地址）</span><br><span class="line">    container_name: mysql-3306              # 指定容器名字 --name</span><br><span class="line">    ports:</span><br><span class="line">    - 3306:3306                             # 端口号映射</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: root             # Mysql Root的密码</span><br><span class="line">      TZ: Asiz/Shanghai                     # 指定时区</span><br><span class="line">    volumes:</span><br><span class="line">    - /opt/mysql/data:/var/lib/mysql        # 映射宿主机目录</span><br><span class="line">    - /opt/mysql/conf/mysql.cnf:/etc/mysql/mysql.cong.d/mysql.cnf</span><br><span class="line">  tomcat:</span><br><span class="line">    restart: always # 只要docker启动，容器就启动</span><br><span class="line">    image: daocloud.io/library/tomcat:8.5.15-jre8  # 指定镜像路径（默认官方镜像地址）</span><br><span class="line">    container_name: tomcat-8080              # 指定容器名字 --name</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080                            # 端口号映射</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asiz/Shanghai                      # 指定时区</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/tomcat/webapps:/usr/local/tomcat/webapps    # 映射宿主机目录</span><br><span class="line">      - /opt/tomcat/logs:/usr/local/tomcat/logs</span><br></pre></td></tr></table></figure><p>操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 启动（执行上面命令创建容器）</span><br><span class="line">docker-compose -f 文件名.后缀(如果当前文件不再当前目录需要指定，可省略) up -d</span><br><span class="line"></span><br><span class="line"># 登录到容器中</span><br><span class="line">docker-compose exec 容器名 bash</span><br><span class="line"></span><br><span class="line"># 停止所有容器</span><br><span class="line">docker stop $&#123;docker ps -qa&#125;</span><br><span class="line">docker-compose stop # 关闭所有容器</span><br><span class="line"></span><br><span class="line"># 删除docker-compose文件内所有容器</span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h1 id="同步异步通讯"><a href="#同步异步通讯" class="headerlink" title="同步异步通讯"></a>同步异步通讯</h1><p><strong>微服务间通讯有同步和异步两种方式</strong></p><p>同步通讯：就像打电话，需要实时响应。</p><p>异步通讯：就像发邮件，不需要马上回复。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904133345.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904133345.png" alt="img"></a></p><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p><p>我们之前学习的 <strong>Feign 调用</strong>就属于<strong>同步方式</strong>，虽然调用可以实时得到结果，但存在下面的问题：</p><p><a href="https://cdn.xn2001.com/img/2021/20210904133517.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904133517.png" alt="img"></a></p><p><strong>同步调用的优点</strong>：</p><ul><li>时效性较强，可以立即得到结果</li></ul><p><strong>同步调用的缺点</strong>：</p><ul><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><p>异步调用则可以避免上述问题，我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p><p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904144714.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904144714.png" alt="img"></a></p><p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904145001.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904145001.png" alt="img"></a></p><p><strong>异步调用好处</strong>：</p><ul><li>吞吐量提升：无需等待订阅者处理完成，响应更快速</li><li>故障隔离：服务没有直接调用，不存在级联失败问题</li><li>调用间没有阻塞，不会造成无效的资源占用</li><li>耦合度极低，每个服务都可以灵活插拔，可替换</li><li>流量削峰：不管发布事件的流量波动多大，都由 Broker 接收，订阅者可以按照自己的速度去处理事件</li></ul><p><strong>异步调用缺点</strong>：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于 Broker 的可靠、安全、性能</li></ul><h1 id="MQ消息队列"><a href="#MQ消息队列" class="headerlink" title="MQ消息队列"></a>MQ消息队列</h1><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列，也就是事件驱动架构中的 Broker</p><p>比较常见的 MQ 实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th align="left"></th><th align="left"><strong>RabbitMQ</strong></th><th align="left"><strong>ActiveMQ</strong></th><th align="left"><strong>RocketMQ</strong></th><th align="left"><strong>Kafka</strong></th></tr></thead><tbody><tr><td align="left">公司&#x2F;社区</td><td align="left">Rabbit</td><td align="left">Apache</td><td align="left">阿里</td><td align="left">Apache</td></tr><tr><td align="left">开发语言</td><td align="left">Erlang</td><td align="left">Java</td><td align="left">Java</td><td align="left">Scala&amp;Java</td></tr><tr><td align="left">协议支持</td><td align="left">AMQP、XMPP、SMTP、STOMP</td><td align="left">OpenWire、STOMP、REST、XMPP、AMQP</td><td align="left">自定义协议</td><td align="left">自定义协议</td></tr><tr><td align="left">可用性</td><td align="left">高</td><td align="left">一般</td><td align="left">高</td><td align="left">高</td></tr><tr><td align="left">单机吞吐量</td><td align="left">一般</td><td align="left">差</td><td align="left">高</td><td align="left">非常高</td></tr><tr><td align="left">消息延迟</td><td align="left">微秒级</td><td align="left">毫秒级</td><td align="left">毫秒级</td><td align="left">毫秒以内</td></tr><tr><td align="left">消息可靠性</td><td align="left">高</td><td align="left">一般</td><td align="left">高</td><td align="left">一般</td></tr></tbody></table><p>以 RabbitMQ 为例，我们在 Centos7 虚拟机中使用 Docker 来安装</p><h1 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h1><blockquote><p>docker pull rabbitmq:3-management</p></blockquote><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure><p><strong>MQ 的基本结构</strong></p><p><a href="https://cdn.xn2001.com/img/2021/20210904172912.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904172912.png" alt="img"></a></p><p>概念:</p><ul><li>channle 操作mq的工具</li><li>exchange 路由消息到队列</li><li>queue 缓存消息</li><li>virtual host 虚拟主机 对queue exchange等逻辑分组</li></ul><h4 id="常见消息模型"><a href="#常见消息模型" class="headerlink" title="常见消息模型"></a>常见消息模型</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904173739.png" alt="img"></p><p>Hello World 模型</p><p><a href="https://cdn.xn2001.com/img/2021/20210904200637.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904200637.png" alt="img"></a></p><p>官方的 HelloWorld 是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><h4 id="publisher实现"><a href="#publisher实现" class="headerlink" title="publisher实现"></a>publisher实现</h4><ul><li>建立连接</li><li>创建 channel</li><li>声明队列</li><li>发送消息</li><li>关闭连接和 channel</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.211.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello RabbitMQ！&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：[&quot;</span> + message + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="consumer实现"><a href="#consumer实现" class="headerlink" title="consumer实现"></a>consumer实现</h4><ul><li>建立连接</li><li>创建 channel</li><li>声明队列</li><li>订阅消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.211.128&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：[&quot;</span> + message + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h3><p>SpringAMQP 是基于 RabbitMQ 封装的一套模板，并且还利用 SpringBoot 对其实现了自动装配，使用起来非常方便。</p><p>SpringAMQP 的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><a href="https://cdn.xn2001.com/img/2021/20210904202046.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904202046.png" alt="img"></a></p><p><a href="https://cdn.xn2001.com/img/2021/20210904202056.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904202056.png" alt="img"></a></p><p>SpringAMQP 提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了 RabbitTemplate 工具，用于发送消息</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><h4 id="simple-queue"><a href="#simple-queue" class="headerlink" title="simple queue"></a>simple queue</h4><ol><li><p>父工程引入sping-amqp的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在pulish服务中使用RabbitTemplate发送simple queue队列</p><ol><li><p>在publisher服务中编写application.yml,添加mq连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.41</span><span class="number">.39</span><span class="number">.152</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">zjj</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li><li><p>编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        String queueName=<span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        String message=<span class="string">&quot;hello zjj&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在consumer服务中编写消费逻辑,绑定simple.queue队列</p><ol><li><p>在publisher服务中编写application.yml,添加mq连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.41</span><span class="number">.39</span><span class="number">.152</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">zjj</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li><li><p>在consumer服务新建一个类,编写消费逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="Work-Queue"><a href="#Work-Queue" class="headerlink" title="Work Queue"></a>Work Queue</h4><p>消费者</p><pre><code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message+ LocalDateTime.now());</span><br><span class="line">     Thread.sleep(<span class="number">20</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.err.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message);</span><br><span class="line">     Thread.sleep(<span class="number">200</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message+ LocalDateTime.now());</span><br><span class="line">     Thread.sleep(<span class="number">20</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     System.err.println(<span class="string">&quot;消费者1接收到消息&quot;</span>+message);</span><br><span class="line">     Thread.sleep(<span class="number">200</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费预取限制</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.41</span><span class="number">.39</span><span class="number">.152</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Publish发布-Subscribe订阅"><a href="#Publish发布-Subscribe订阅" class="headerlink" title="Publish发布,Subscribe订阅"></a>Publish发布,Subscribe订阅</h4><blockquote><p>发布订阅模式与之前案例的区别就是允许将同一条消息发送给多个消费者,实现方式加入了exchange(交换机)</p></blockquote><p><a href="https://cdn.xn2001.com/img/2021/20210904213455.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904213455.png" alt="img"></a></p><p>图中可以看到，在订阅模型中，多了一个 exchange 角色，而且过程略有变化</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，<strong>而是发给 exchange（交换机）</strong></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息</li><li>Exchange：交换机，一方面，接收生产者发送的消息；另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于 Exchange 的类型。Exchange 有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定 routing key 的队列</li><li>Topic：通配符，把消息交给符合 routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与 Exchange 绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h4 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h4><p>Fanout，英文翻译是扇出，在 MQ 中我们也可以称为广播。会把接收的消息路由到每一个跟其绑定的queue</p><p><a href="https://cdn.xn2001.com/img/2021/20210912160350.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210912160350.png" alt="img"></a></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>可以有多个队列</li><li>每个队列都要绑定到 Exchange（交换机）</li><li>生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>交换机把消息发送给绑定过的所有队列</li><li>订阅队列的消费者都能拿到消息</li></ul><p>接下里我们用 SpringAMQP 来简单实现 FanoutExchange</p><ol><li>在 consumer 服务中，利用代码声明队列、交换机，并将两者绑定</li><li>在 consumer 服务中，编写两个消费者方法，分别监听 fanout.queue1 和 fanout.queue2</li><li>在 publisher 中编写测试方法，向 fanout发送消息</li></ol><p><strong>声明队列和交换机</strong></p><p>Spring 提供了一个接口 Exchange，来表示所有不同类型的交换机。</p><p><a href="https://cdn.xn2001.com/img/2021/20210904213809.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210904213809.png" alt="img"></a></p><p>消费者处声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明FanoutExchange交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;zjj.fannout&quot;</span>);</span><br><span class="line">        <span class="comment">//交换机名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明第一个队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;zjj.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue1,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="comment">//绑定队列1和交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//声明第二个队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;zjj.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue2,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="comment">//绑定队列2和交换机</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//交换机名称</span></span><br><span class="line">       String exchange=<span class="string">&quot;zjj.fannout&quot;</span>;</span><br><span class="line">       <span class="comment">//消息</span></span><br><span class="line">       String message=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">       rabbitTemplate.convertAndSend(exchange,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Direct-路由"><a href="#Direct-路由" class="headerlink" title="Direct:路由"></a>Direct:路由</h4><p>在 Fanout 模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到 DirectExchange</p><p><a href="https://cdn.xn2001.com/img/2021/20210912182822.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210912182822.png" alt="img"></a></p><p>在 Direct 模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code> 与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p>在 consumer 的 SpringRabbitListener 中添加两个消费者，同时基于注解来声明队列和交换机</p><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">         value = @Queue(value = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">         exchange = @Exchange(value = &quot;xn2001.direct&quot;),</span></span><br><span class="line"><span class="meta">         key = &#123;&quot;a&quot;,&quot;b&quot;&#125;</span></span><br><span class="line"><span class="meta"> ))</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">         value = @Queue(value = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">         exchange = @Exchange(value = &quot;xn2001.direct&quot;),</span></span><br><span class="line"><span class="meta">         key = &#123;&quot;a&quot;,&quot;c&quot;&#125;</span></span><br><span class="line"><span class="meta"> ))</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchangeToA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xn2001.direct&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, i am direct to a!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;a&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * direct</span></span><br><span class="line"><span class="comment">     * 向交换机发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchangeToB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xn2001.direct&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, i am direct to b!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;b&quot;</span>, message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Topic-话题"><a href="#Topic-话题" class="headerlink" title="Topic:话题"></a>Topic:话题</h4><p><code>Topic </code> 与 <code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic </code>类型可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p>通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：只能匹配一个词</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item.#`：能够匹配`item.spu.insert` 或者 `item.spu</span><br><span class="line">item.*`：只能匹配`item.spu</span><br></pre></td></tr></table></figure><p><a href="https://cdn.xn2001.com/img/2021/20210912194016.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210912194016.png" alt="img"></a></p><ul><li>Queue1：绑定的是 <code>china.#</code> ，因此凡是以 <code>china.</code> 开头的 <code>routing key</code> 都会被匹配到。包括 china.news 和 china.weather</li><li>Queue2：绑定的是 <code>#.news</code> ，因此凡是以 <code>.news </code> 结尾的 <code>routing key</code> 都会被匹配。包括 china.news 和 japan.news</li></ul><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;xn2001.topic&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;china.#&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;xn2001.topic&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;china.*&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 交换机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xn2001.topic&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message1</span> <span class="operator">=</span> <span class="string">&quot;hello, i am topic form china.news&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message2</span> <span class="operator">=</span> <span class="string">&quot;hello, i am topic form china.news.2&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message1);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news.2&quot;</span>, message2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h4><p>Spring 会把你发送的消息序列化为字节发送给 MQ，接收消息的时候，还会把字节反序列化为 Java 对象。</p><p><strong>默认情况下 Spring 采用的序列化方式是 JDK 序列化。</strong></p><p>我们可以去试一下效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;object.queue&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenObjectQueue</span><span class="params">(Map&lt;String,Object&gt; msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;object接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cdn.xn2001.com/img/2021/20210912204117.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210912204117.png" alt="img"></a></p><p>众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们推荐可以使用 JSON 来序列化</p><p>在 publisher 和 consumer 两个服务中都引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在各自的启动类中添加一个 Bean 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cdn.xn2001.com/img/2021/20210912204512.png"><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/20210912204512.png" alt="img"></a></p><h1 id="微服务保护"><a href="#微服务保护" class="headerlink" title="微服务保护"></a>微服务保护</h1><h3 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h3><blockquote><p>微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用，这就是雪崩</p></blockquote><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902135331203.png" alt="image-20220902135331203"></p><h4 id="雪崩问题解决"><a href="#雪崩问题解决" class="headerlink" title="雪崩问题解决"></a>雪崩问题解决</h4><ul><li>超时处理:设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902135008144.png" alt="image-20220902135008144"></p><ul><li>舱壁模式:限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。</li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902135047993.png" alt="image-20220902135047993"></p><ul><li>熔断降级:由断路器统计业务执行的异常比例，如果超出阈值则会熔断该业务，拦截访问该业务的一切请求。</li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902135150710.png" alt="image-20220902135150710"></p><ul><li>流量控制:限制业务访问的QPS，避免服务因流量的突增而故障。</li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902135416162.png" alt="image-20220902135416162"></p><h3 id="服务保护技术"><a href="#服务保护技术" class="headerlink" title="服务保护技术"></a>服务保护技术</h3><table><thead><tr><th></th><th><strong>Sentinel</strong></th><th><strong>Hystrix</strong></th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离&#x2F;信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例或异常比例</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于 RxJava）</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整形</td><td>支持慢启动、匀速排队模式</td><td>不支持</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见框架的适配</td><td>Servlet、Spring Cloud、Dubbo、gRPC 等</td><td>Servlet、Spring Cloud Netflix</td></tr></tbody></table><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><blockquote><p><a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p></blockquote><table><thead><tr><th><strong>配置项</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>server.port</td><td>8080</td><td>服务端口</td></tr><tr><td>sentinel.dashboard.auth.username</td><td>sentinel</td><td>默认用户名</td></tr><tr><td>sentinel.dashboard.auth.password</td><td>sentinel</td><td>默认密码</td></tr></tbody></table><h3 id="微服务整合"><a href="#微服务整合" class="headerlink" title="微服务整合"></a>微服务整合</h3><ol><li><p>导入依赖(服务中心)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring:</span>  <span class="attr">cloud:</span>     <span class="string">sentinel:</span>      <span class="string">transport:</span>        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>访问微服务任意节点 触发监控</p></li></ol><h3 id="限流规则"><a href="#限流规则" class="headerlink" title="限流规则"></a>限流规则</h3><h4 id="流控限流"><a href="#流控限流" class="headerlink" title="流控限流"></a>流控限流</h4><ul><li><p>簇点链路：就是项目内的调用链路，链路中被监控的每个接口就是一个资源。默认情况下sentinel会监控SpringMVC的每一个端点（Endpoint），因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源。流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902140656829.png" alt="image-20220902140656829"></p></li></ul><p>点击资源&#x2F;order&#x2F;{orderId}后面的流控按钮，就可以弹出表单。表单中可以添加流控规则，如下图所示</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902140741174.png" alt="image-20220902140741174"></p><ul><li><p>流控规则入门案例</p><p>给 &#x2F;order&#x2F;{orderId}这个资源设置流控规则，QPS不能超过 5。然后利用jemeter测试</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902140832639.png" alt="image-20220902140832639"></p></li></ul><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902140852862.png" alt="image-20220902140852862"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902140906503.png" alt="image-20220902140906503"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902140954493.png" alt="image-20220902140954493"></p><p>对方法限流</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902141026529.png" alt="image-20220902141026529"></p><h4 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902141221829.png" alt="image-20220902141221829"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902141234578.png" alt="image-20220902141234578"></p><h3 id="隔离和降级"><a href="#隔离和降级" class="headerlink" title="隔离和降级"></a>隔离和降级</h3><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902141312313.png" alt="image-20220902141312313"></p><h4 id="Feign整合Sentinel"><a href="#Feign整合Sentinel" class="headerlink" title="Feign整合Sentinel"></a>Feign整合Sentinel</h4><blockquote><p>SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel。</p></blockquote><ol><li><p>修改服务端的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">sentinel:</span></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启stentinel</span></span><br></pre></td></tr></table></figure></li><li><p>给FeignClient编写失败后的降级逻辑</p><ul><li>FallbackClass，无法对远程调用的异常做处理</li><li>FallbackFactory，可以对远程调用的异常做处理，我们选择这种</li></ul></li></ol><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><ol><li><p>在feing-api项目中定义类，实现FallbackFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;    <span class="meta">@Override</span>    <span class="keyword">public</span> UserClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;        <span class="comment">// 创建UserClient接口实现类，实现其中的方法，编写失败降级的处理逻辑        return new UserClient() &#123;            @Override            public User findById(Long id) &#123;                // 记录异常信息                log.error(&quot;查询用户失败&quot;, throwable);                // 根据业务需求返回默认的数据，这里是空用户                return new User();            &#125;        &#125;;    &#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span><span class="keyword">public</span> UserClientFallbackFactory <span class="title function_">userClientFallback</span><span class="params">()</span>&#123;    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClientFallbackFactory</span>();&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在feing-api项目中的UserClient接口中使用UserClientFallbackFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span>     User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离</h3><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902141928805.png" alt="image-20220902141928805"></p><p>线程隔离两种方式优缺点</p><blockquote><p>信号隔离:</p><p>​优点: 轻量级无额外开销</p><p>​缺点:不支持主动超时,不支持异步调用</p><p>​场景:高频调出 高扇出</p><p>线程池隔离:</p><p>​优点:支持主动超时,支持异步调用</p><p>​缺点:线程的额外开销较大</p><p>​场景:低扇出</p></blockquote><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142213256.png" alt="image-20220902142213256"></p><h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><blockquote><p>熔断降级是解决雪崩问题的重要手段。其思路是由断路器统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p></blockquote><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142306534.png" alt="image-20220902142306534"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142327790.png" alt="image-20220902142327790"></p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142401794.png" alt="image-20220902142401794"></p><h3 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h3><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142451396.png" alt="image-20220902142451396"></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li><p>Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestOriginParser</span> &#123;    <span class="comment">/**     * 从请求request对象中获取origin，获取方式自定义</span></span><br><span class="line"><span class="comment">     */</span>    String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span>;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>我们尝试从request中获取一个名为origin的请求头，作为origin的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderOriginParser</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span> &#123;    <span class="meta">@Override</span>    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span> &#123;        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;origin&quot;</span>);        <span class="keyword">if</span>(StringUtils.isEmpty(origin))&#123;            <span class="keyword">return</span> <span class="string">&quot;blank&quot;</span>;        &#125;        <span class="keyword">return</span> origin;    &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142621056.png" alt="image-20220902142621056"></p></li></ol><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142633064.png" alt="image-20220902142633064"></p><h3 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h3><table><thead><tr><th><strong>异常</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FlowException</td><td>限流异常</td></tr><tr><td>ParamFlowException</td><td>热点参数限流的异常</td></tr><tr><td>DegradeException</td><td>降级异常</td></tr><tr><td>AuthorityException</td><td>授权规则异常</td></tr><tr><td>SystemBlockException</td><td>系统规则异常</td></tr></tbody></table><h3 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h3><table><thead><tr><th><strong>推送模式</strong></th><th><strong>说明</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td>原始模式</td><td>API 将规则推送至客户端并直接更新到内存中，扩展写数据源（WritableDataSource），默认就是这种</td><td>简单，无任何依赖</td><td>不保证一致性；规则保存在内存中，重启即消失。严重不建议用于生产环境</td></tr><tr><td>Pull 模式</td><td>扩展写数据源（WritableDataSource）， 客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是 RDBMS、文件 等</td><td>简单，无任何依赖；规则持久化</td><td>不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。</td></tr><tr><td><strong>Push</strong> <strong>模式</strong></td><td>扩展读数据源（ReadableDataSource），规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用 Nacos、Zookeeper 等配置中心。这种方式有更好的实时性和一致性保证。<strong>生产环境下一般采用</strong> <strong>push</strong> <strong>模式的数据源。</strong></td><td>规则持久化；一致性；</td><td>引入第三方依赖</td></tr></tbody></table><h4 id="原始模式"><a href="#原始模式" class="headerlink" title="原始模式"></a>原始模式</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142754703.png" alt="image-20220902142754703"></p><h4 id="pull模式"><a href="#pull模式" class="headerlink" title="pull模式"></a>pull模式</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142839383.png" alt="image-20220902142839383"></p><h4 id="push模式"><a href="#push模式" class="headerlink" title="push模式"></a>push模式</h4><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902142909381.png" alt="image-20220902142909381"></p><h1 id="Sentinel-规则持久化"><a href="#Sentinel-规则持久化" class="headerlink" title="Sentinel 规则持久化"></a>Sentinel 规则持久化</h1><h3 id="一、修改order-service服务"><a href="#一、修改order-service服务" class="headerlink" title="一、修改order-service服务"></a>一、修改order-service服务</h3><p>修改OrderService，让其监听Nacos中的sentinel规则配置。</p><p>具体步骤如下：</p><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4><p>在order-service中引入sentinel监听nacos的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-配置nacos地址"><a href="#2-配置nacos地址" class="headerlink" title="2.配置nacos地址"></a>2.配置nacos地址</h4><p>在order-service中的application.yml文件配置nacos地址及监听的配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">orderservice-flow-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span> <span class="comment"># 还可以是：degrade、authority、param-flow</span></span><br></pre></td></tr></table></figure><h3 id="二、修改sentinel-dashboard源码"><a href="#二、修改sentinel-dashboard源码" class="headerlink" title="二、修改sentinel-dashboard源码"></a>二、修改sentinel-dashboard源码</h3><p>SentinelDashboard默认不支持nacos的持久化，需要修改源码。</p><h4 id="1-解压"><a href="#1-解压" class="headerlink" title="1. 解压"></a>1. 解压</h4><p>解压课前资料中的sentinel源码包：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618201340086.png" alt="image-20210618201340086"></p><p>然后并用IDEA打开这个项目，结构如下：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618201412878.png" alt="image-20210618201412878"></p><h4 id="2-修改nacos依赖"><a href="#2-修改nacos依赖" class="headerlink" title="2. 修改nacos依赖"></a>2. 修改nacos依赖</h4><p>在sentinel-dashboard源码的pom文件中，nacos的依赖默认的scope是test，只能在测试时使用，这里要去除：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618201607831.png" alt="image-20210618201607831"></p><p>将sentinel-datasource-nacos依赖的scope去掉：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-添加nacos支持"><a href="#3-添加nacos支持" class="headerlink" title="3. 添加nacos支持"></a>3. 添加nacos支持</h4><p>在sentinel-dashboard的test包下，已经编写了对nacos的支持，我们需要将其拷贝到main下。</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618201726280.png" alt="image-20210618201726280"></p><h4 id="4-修改nacos地址"><a href="#4-修改nacos地址" class="headerlink" title="4. 修改nacos地址"></a>4. 修改nacos地址</h4><p>然后，还需要修改测试代码中的NacosConfig类：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618201912078.png" alt="image-20210618201912078"></p><p>修改其中的nacos地址，让其读取application.properties中的配置：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618202047575.png" alt="image-20210618202047575"></p><p>在sentinel-dashboard的application.properties中添加nacos地址配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos.addr</span>=<span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><h4 id="5-配置nacos数据源"><a href="#5-配置nacos数据源" class="headerlink" title="5. 配置nacos数据源"></a>5. 配置nacos数据源</h4><p>另外，还需要修改com.alibaba.csp.sentinel.dashboard.controller.v2包下的FlowControllerV2类：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618202322301.png" alt="image-20210618202322301"></p><p>让我们添加的Nacos数据源生效：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618202334536.png" alt="image-20210618202334536"></p><h4 id="6-修改前端页面"><a href="#6-修改前端页面" class="headerlink" title="6. 修改前端页面"></a>6. 修改前端页面</h4><p>接下来，还要修改前端页面，添加一个支持nacos的菜单。</p><p>修改src&#x2F;main&#x2F;webapp&#x2F;resources&#x2F;app&#x2F;scripts&#x2F;directives&#x2F;sidebar&#x2F;目录下的sidebar.html文件：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618202433356.png" alt="image-20210618202433356"></p><p>将其中的这部分注释打开：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618202449881.png" alt="image-20210618202449881"></p><p>修改其中的文本：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618202501928.png" alt="image-20210618202501928"></p><h4 id="7-重新编译、打包项目"><a href="#7-重新编译、打包项目" class="headerlink" title="7. 重新编译、打包项目"></a>7. 重新编译、打包项目</h4><p>运行IDEA中的maven插件，编译和打包修改好的Sentinel-Dashboard：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210618202701492.png" alt="image-20210618202701492"></p><h4 id="8-启动"><a href="#8-启动" class="headerlink" title="8.启动"></a>8.启动</h4><p>启动方式跟官方一样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p>如果要修改nacos地址，需要添加参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dnacos.addr=localhost:8848 sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902143828870.png" alt="image-20220902143828870"></p><h3 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h3><p>分布式系统三大指标:</p><ul><li><p>Consistency一致性</p><p>用户访问分布式系统的任意节点,得到的数据必须一致</p></li><li><p>Avalilabilty 可用性</p><p>访问任意健康的节点,必须得到响应,而不是超时或拒绝服务</p></li><li><p>Partition tolerance分区容错性</p><p>分区:因为网络或其它原因导致分布式系统中的部分节点与其它节点失去连接</p><p>容错:当集群出现分区时,整个系统也要持续对外提供服务</p></li></ul><h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><ul><li>Basically Avaiable(基本可用):分布式系统在出现鼓掌时,允许损失部分可用性</li><li>soft state(软状态):在一定时间内,允许出现中间状态,比如临时的不一致状态</li><li>Eventually Consistent(最终一致性):虽然无法保证强一致性,但在软状态结束后,最终达到数据一致</li></ul><p>面对分布式事务最大的问题是各个子事务的一致性问题</p><ul><li>AP模式:各个子事务分别执行和提交,允许出现结果不一致,然后采用弥补措施恢复数据即可,实现最终一致</li><li>CP模式:各个子事务执行后互相等待,同时提交,同时回滚,达到强一致,但事务等待过程中,处于弱可用状态</li></ul><h3 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h3><ul><li><p>TC(Transaction Coordinator)<strong>事务协调者</strong>:维护全局和分支事务的状态,协调全局事务提交或回滚</p></li><li><p>TM(Transaction Manager)<strong>事务管理器</strong>:定义全局事务的范围,开启全局事务,提交或回滚全局事务</p></li><li><p>RM(Resource Manager)<strong>资源管理器</strong>:管理分支事务处理的资源,与TC交谈以注册分支事务和报告分支事务的状态,并驱动分支事务提交或回滚。</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220902155523281.png" alt="image-20220902155523281"></p></li></ul><p>分布式事务解决方案</p><ul><li>XA模式:强一致性分阶段事务模式,牺牲了一定的可用性,无业务入侵</li><li>TCC模式:最终一致的分阶段事务模式,有业务入侵</li><li>AT模式:最终的一致的分阶段事务模式,无业务入侵,也是Seata的默认模式</li><li>SAGA模式:长事务模式,有业务入侵</li></ul><h3 id="微服务集成Seata"><a href="#微服务集成Seata" class="headerlink" title="微服务集成Seata"></a>微服务集成Seata</h3><ol><li><p>引入依赖order-service</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置TC地址在order-service中的application.yml中配置nacos</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 注册中心类型 nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># seata服务名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br></pre></td></tr></table></figure><p>微服务如何根据这些配置寻找TC的地址呢？</p><p>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：</p><ul><li>namespace：命名空间</li><li>group：分组</li><li>application：服务名</li><li>cluster：集群名</li></ul><p>以上四个信息，在刚才的yaml文件中都能找到：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724173654258-166210879575384.png" alt="image-20210724173654258"></p><p>namespace为空，就是默认的public</p><p>结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SH，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了。</p><p>其它两个微服务也都参考order-service的步骤来做，完全一样。</p></li></ol><h3 id="XA模式"><a href="#XA模式" class="headerlink" title="XA模式"></a>XA模式</h3><blockquote><p>XA 规范 是 X&#x2F;Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的TM与局部的RM之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p></blockquote><p>XA是规范，目前主流数据库都实现了这种规范，实现的原理都是基于两阶段提交。</p><p>正常情况：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724174102768-166210883180586.png" alt="image-20210724174102768"></p><p>异常情况：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724174234987-166210883180587.png" alt="image-20210724174234987"></p><p>一阶段：</p><ul><li>事务协调者通知每个事物参与者执行本地事务</li><li>本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁</li></ul><p>二阶段：</p><ul><li>事务协调者基于一阶段的报告来判断下一步操作<ul><li>如果一阶段都成功，则通知所有事务参与者，提交事务</li><li>如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务</li></ul></li></ul><h3 id="Seata的XA模型"><a href="#Seata的XA模型" class="headerlink" title="Seata的XA模型"></a>Seata的XA模型</h3><p>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Users/.crush/Desktop/day02-分布式事务/讲义/assets/image-20210724174424070.png" alt="image-20210724174424070"></p><h3 id="实现XA模式"><a href="#实现XA模式" class="headerlink" title="实现XA模式"></a>实现XA模式</h3><p>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：</p><p>1）修改application.yml文件（每个参与事务的微服务），开启XA模式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span></span><br></pre></td></tr></table></figure><p>2）给发起全局事务的入口方法添加@GlobalTransactional注解:</p><p>本例中是OrderServiceImpl中的create方法.</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724174859556-166210906144794.png" alt="image-20210724174859556"></p><p>3）重启服务并测试</p><p>重启order-service，再次测试，发现无论怎样，三个微服务都能成功回滚。</p><h3 id="AT模式"><a href="#AT模式" class="headerlink" title="AT模式"></a>AT模式</h3><blockquote><p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</p></blockquote><h3 id="Seata的AT模型"><a href="#Seata的AT模型" class="headerlink" title="Seata的AT模型"></a>Seata的AT模型</h3><p>基本流程图：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724175327511-166210911591896.png" alt="image-20210724175327511"></p><p>阶段一RM的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时RM的工作：</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时RM的工作：</p><ul><li>根据undo-log恢复数据到更新前</li></ul><h4 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h4><p>我们用一个真实的业务来梳理下AT模式的原理。</p><p>比如，现在又一个数据库表，记录用户余额：</p><table><thead><tr><th><strong>id</strong></th><th><strong>money</strong></th></tr></thead><tbody><tr><td>1</td><td>100</td></tr></tbody></table><p>其中一个分支业务要执行的SQL为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>AT模式下，当前分支事务执行流程如下：</p><p>一阶段：</p><p>1）TM发起并注册全局事务到TC</p><p>2）TM调用分支事务</p><p>3）分支事务准备执行业务SQL</p><p>4）RM拦截业务SQL，根据where条件查询原始数据，形成快照。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>5）RM执行业务SQL，提交本地事务，释放数据库锁。此时 <code>money = 90</code></p><p>6）RM报告本地事务状态给TC</p><p>二阶段：</p><p>1）TM通知TC事务结束</p><p>2）TC检查分支事务状态</p><p>​ a）如果都成功，则立即删除快照</p><p>​ b）如果有分支事务失败，需要回滚。读取快照数据（<code>&#123;&quot;id&quot;: 1, &quot;money&quot;: 100&#125;</code>），将快照恢复到数据库。此时数据库再次恢复为100</p><p>流程图：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724180722921-166210913859298.png" alt="image-20210724180722921"></p><h3 id="AX和XA的区别"><a href="#AX和XA的区别" class="headerlink" title="AX和XA的区别"></a>AX和XA的区别</h3><p>简述AT模式与XA模式最大的区别是什么？</p><ul><li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</li><li>XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。</li><li>XA模式强一致；AT模式最终一致</li></ul><h3 id="AT的脏写"><a href="#AT的脏写" class="headerlink" title="AT的脏写"></a>AT的脏写</h3><p>在多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724181541234-1662109189663100.png" alt="image-20210724181541234"></p><p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724181843029-1662109189663101.png" alt="image-20210724181843029"></p><p>优缺点</p><p>AT模式的优点：</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li><li>利用全局锁实现读写隔离</li><li>没有代码侵入，框架自动完成回滚和提交</li></ul><p>AT模式的缺点：</p><ul><li>两阶段之间属于软状态，属于最终一致</li><li>框架的快照功能会影响性能，但比XA模式要好很多</li></ul><h3 id="实现AT模式"><a href="#实现AT模式" class="headerlink" title="实现AT模式"></a>实现AT模式</h3><p>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</p><p>只不过，AT模式需要一个表来记录全局锁、另一张表来记录数据快照undo_log。</p><p>1）导入数据库表，记录全局锁</p><p>导入课前资料提供的Sql文件：seata-at.sql，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724182217272-1662109189663102.png" alt="image-20210724182217272"></p><p>2）修改application.yml文件，将事务模式修改为AT模式即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span> <span class="comment"># 默认就是AT</span></span><br></pre></td></tr></table></figure><p>3）重启服务并测试</p><h2 id="TCC模式"><a href="#TCC模式" class="headerlink" title="TCC模式"></a>TCC模式</h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li><p>Try：资源的检测和预留； </p></li><li><p>Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</p></li><li><p>Cancel：预留资源释放，可以理解为try的反向操作。</p></li></ul><h4 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h4><p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p><ul><li><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</li></ul><p>初识余额：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724182424907-1662109245002106.png" alt="image-20210724182424907"></p><p>余额充足，可以冻结：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724182457951-1662109245002108.png" alt="image-20210724182457951"></p><p>此时，总金额 &#x3D; 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p><ul><li>**阶段二（Confirm)**：假如要提交（Confirm），则冻结金额扣减30</li></ul><p>确认可以提交，不过之前可用金额已经扣减过了，这里只要清除冻结金额就好了：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724182706011-1662109245002107.png" alt="image-20210724182706011"></p><p>此时，总金额 &#x3D; 冻结金额 + 可用金额 &#x3D; 0 + 70  &#x3D; 70元</p><ul><li>**阶段二(Canncel)**：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30</li></ul><p>需要回滚，那么就要释放冻结金额，恢复可用金额：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724182810734-1662109245002109.png" alt="image-20210724182810734"></p><h4 id="Seata的TCC模型"><a href="#Seata的TCC模型" class="headerlink" title="Seata的TCC模型"></a>Seata的TCC模型</h4><p>Seata中的TCC模型依然延续之前的事务架构，如图：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724182937713-1662109245002110.png" alt="image-20210724182937713"></p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>TCC模式的每个阶段是做什么的？</p><ul><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放</li></ul><p>TCC的优点是什么？</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li></ul><p>TCC的缺点是什么？</p><ul><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理</li></ul><h4 id="事务悬挂和空回滚"><a href="#事务悬挂和空回滚" class="headerlink" title="事务悬挂和空回滚"></a>事务悬挂和空回滚</h4><p>空回滚</p><p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p><p>如图：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724183426891-1662109245003111.png" alt="image-20210724183426891"></p><p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p><p>业务悬挂</p><p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p><p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p><h4 id="TCC模式-1"><a href="#TCC模式-1" class="headerlink" title="TCC模式"></a>TCC模式</h4><p>解决空回滚和业务悬挂问题，必须要记录当前事务状态，是在try、还是cancel？</p><p>思路分析</p><p>这里我们定义一张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_freeze_tbl` (</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `freeze_money` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;冻结金额&#x27;</span>,</span><br><span class="line">  `state` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务状态，0:try，1:confirm，2:cancel&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`xid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span>COMPACT;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>xid：是全局事务id</li><li>freeze_money：用来记录用户冻结金额</li><li>state：用来记录事务状态</li></ul><p>那此时，我们的业务开怎么做呢？</p><ul><li>Try业务：<ul><li>记录冻结金额和事务状态到account_freeze表</li><li>扣减account表可用金额</li></ul></li><li>Confirm业务<ul><li>根据xid删除account_freeze表的冻结记录</li></ul></li><li>Cancel业务<ul><li>修改account_freeze表，冻结金额为0，state为2</li><li>修改account表，恢复可用金额</li></ul></li><li>如何判断是否空回滚？<ul><li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚</li></ul></li><li>如何避免业务悬挂？<ul><li>try业务中，根据xid查询account_freeze ，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li></ul></li></ul><p>接下来，我们改造account-service，利用TCC实现余额扣减功能。</p><p>声明TCC接口</p><p>TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，</p><p>我们在account-service项目中的<code>cn.itcast.account.service</code>包中新建一个接口，声明TCC三个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContextParameter;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.LocalTCC;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.TwoPhaseBusinessAction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountTCCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;deduct&quot;, commitMethod = &quot;confirm&quot;, rollbackMethod = &quot;cancel&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span> String userId,</span></span><br><span class="line"><span class="params">                <span class="meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span><span class="type">int</span> money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实现类</p><p>在account-service服务中的<code>cn.itcast.account.service.impl</code>包下新建一个类，实现TCC业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.entity.AccountFreeze;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountFreezeMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.service.AccountTCCService;</span><br><span class="line"><span class="keyword">import</span> io.seata.core.context.RootContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTCCServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountTCCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountFreezeMapper freezeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(String userId, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">// 0.获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> RootContext.getXID();</span><br><span class="line">        <span class="comment">// 1.扣减可用余额</span></span><br><span class="line">        accountMapper.deduct(userId, money);</span><br><span class="line">        <span class="comment">// 2.记录冻结金额，事务状态</span></span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">freeze</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountFreeze</span>();</span><br><span class="line">        freeze.setUserId(userId);</span><br><span class="line">        freeze.setFreezeMoney(money);</span><br><span class="line">        freeze.setState(AccountFreeze.State.TRY);</span><br><span class="line">        freeze.setXid(xid);</span><br><span class="line">        freezeMapper.insert(freeze);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();</span><br><span class="line">        <span class="comment">// 2.根据id删除冻结记录</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> freezeMapper.deleteById(xid);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">// 0.查询冻结记录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();</span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">freeze</span> <span class="operator">=</span> freezeMapper.selectById(xid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.恢复可用余额</span></span><br><span class="line">        accountMapper.refund(freeze.getUserId(), freeze.getFreezeMoney());</span><br><span class="line">        <span class="comment">// 2.将冻结金额清零，状态改为CANCEL</span></span><br><span class="line">        freeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">        freeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> freezeMapper.updateById(freeze);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SAGA模式"><a href="#SAGA模式" class="headerlink" title="SAGA模式"></a>SAGA模式</h3><p>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</p><p>其理论基础是Hector &amp; Kenneth  在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html">Sagas</a>。</p><p>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html">https://seata.io/zh-cn/docs/user/saga.html</a></p><p>原理</p><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p><p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724184846396-1662109245003112.png" alt="image-20210724184846396"></p><p>Saga也分为两个阶段：</p><ul><li>一阶段：直接提交本地事务</li><li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚</li></ul><p>###优缺点</p><p>优点：</p><ul><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写TCC中的三个阶段，实现简单</li></ul><p>缺点：</p><ul><li>软状态持续时间不确定，时效性差</li><li>没有锁，没有事务隔离，会有脏写</li></ul><h3 id="四种模式对比"><a href="#四种模式对比" class="headerlink" title="四种模式对比"></a>四种模式对比</h3><p>我们从以下几个方面来对比四种实现：</p><ul><li>一致性：能否保证事务的一致性？强一致还是最终一致？</li><li>隔离性：事务之间的隔离性如何？</li><li>代码侵入：是否需要对业务代码改造？</li><li>性能：有无性能损耗？</li><li>场景：常见的业务场景</li></ul><p>如图：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724185021819-1662109245003113.png" alt="image-20210724185021819"></p><p>5.高可用</p><p>Seata的TC服务作为分布式事务核心，一定要保证集群的高可用性。</p><h2 id="5-1-高可用架构模型"><a href="#5-1-高可用架构模型" class="headerlink" title="5.1.高可用架构模型"></a>5.1.高可用架构模型</h2><p>搭建TC服务集群非常简单，启动多个TC服务，注册到nacos即可。</p><p>但集群并不能确保100%安全，万一集群所在机房故障怎么办？所以如果要求较高，一般都会做异地多机房容灾。</p><p>比如一个TC集群在上海，另一个TC集群在杭州：</p><p><img src="/2022/08/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20210724185240957-1662109245003114.png" alt="image-20210724185240957"></p><p>微服务基于事务组（tx-service-group)与TC集群的映射关系，来查找当前应该使用哪个TC集群。当SH集群故障时，只需要将vgroup-mapping中的映射关系改成HZ。则所有微服务就会切换到HZ的TC集群了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>swagger</title>
      <link href="/2022/08/28/swagger/"/>
      <url>/2022/08/28/swagger/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置处加注解"><a href="#配置处加注解" class="headerlink" title="配置处加注解"></a>配置处加注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span> <span class="comment">//webmvcconfig</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//文档类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.zjj.reggie.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;瑞吉外卖&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;瑞吉外卖接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring cache</title>
      <link href="/2022/08/28/Spring-cache/"/>
      <url>/2022/08/28/Spring-cache/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>spring cache是一个框架,基于注解的缓存功能,加一个注解就能实现缓存</p><p>Spring cache提供了一层抽象,底层可以切换不用的cache实现,通过CacheManager接口来统一不同的缓存技术</p><p>CacheManager是spring提供的各种缓存技术的抽象接口 </p></blockquote><table><thead><tr><th align="center">CacheManager</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">EhCacheCacheManager</td><td align="center">使用EhCache作为缓存技术</td></tr><tr><td align="center">GuavaCacheManager</td><td align="center">使用GuavaCache作为缓存技术</td></tr><tr><td align="center">RedisCacheManager</td><td align="center">使用Redis作为缓存技术</td></tr></tbody></table><h2 id="Spring-Cache常用注解"><a href="#Spring-Cache常用注解" class="headerlink" title="Spring Cache常用注解"></a>Spring Cache常用注解</h2><table><thead><tr><th align="left">注解</th><th>说明</th></tr></thead><tbody><tr><td align="left">@EnableCaching</td><td>开启注解功能</td></tr><tr><td align="left">@Cacheable</td><td>在方法执行前spring查看缓存中是否有数据,如果有数据则直接返回缓存数据,若没有数据调用方法并将方法返回值放到缓存中</td></tr><tr><td align="left">@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td align="left">@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><p>在启动类上使用@EnableCaching</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@CachePut(value=&quot;userCache&quot;,key=&quot;#result.id&quot;) 使用返回值的id</span><br><span class="line">@CachePut(value=&quot;userCache&quot;,key=&quot;#user.id&quot;) 使用参数的id</span><br><span class="line">value缓存的名称 每个缓存名称下可以有多个key</span><br><span class="line">====================================</span><br><span class="line">@CacheEvict(value=&quot;userCache&quot;,key=&quot;#id&quot;)</span><br><span class="line">id为方法的参数</span><br><span class="line">#p0</span><br><span class="line">#root.arg[0]</span><br><span class="line">#result.id</span><br><span class="line">===============================</span><br><span class="line">@Cacheable(value=&quot;userCache&quot;,key=&quot;#id&quot;,condition=&quot;#result!=null&quot;)</span><br><span class="line">@Cacheable(value=&quot;userCache&quot;,key=&quot;#user.id+&#x27;_&#x27;+user.name&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">   <span class="attr">redis:</span></span><br><span class="line">     <span class="attr">time-to-live:</span> <span class="number">1800000</span> <span class="comment">#缓存有效期</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2022/08/28/redis/"/>
      <url>/2022/08/28/redis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入redis&#x2F;src目录执行.&#x2F;redis-server</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>redis-cli</p><h3 id="验证密码"><a href="#验证密码" class="headerlink" title="验证密码"></a>验证密码</h3><p>auth pwd</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select x切换数据库</span><br><span class="line">dbsize 查看db大小</span><br><span class="line">set key value 存储值</span><br><span class="line">get key获取值</span><br><span class="line">exists key 判断是否有该key</span><br><span class="line">kes * 返回所有key</span><br><span class="line">flushdb清空当前数据库</span><br><span class="line">flushall清空所有数据库</span><br><span class="line">expire key xxx 设置key值多少秒过期</span><br><span class="line">ttl key 查看过期时间</span><br><span class="line">presist key取消过期</span><br><span class="line">type key查看key类型</span><br><span class="line">dbsize查看当前库key的数量</span><br></pre></td></tr></table></figure><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p><img src="/2022/08/28/redis/image-20220828143929238.png" alt="image-20220828143929238"></p><p>改为yes</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>String 字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">get 获取存储在给定键的值 get name</span><br><span class="line">set 设置存储在给定键中的值 set name value</span><br><span class="line">del 删除存储在给定键中的值 del name</span><br><span class="line">incr 将键存储的值加一 incr key</span><br><span class="line">decr 将键存储的值减一 decr key</span><br><span class="line">incrby 将键存储的值加上整数 incrby key amount</span><br><span class="line">decrby 将键存储的值减上整数 decrby key amount</span><br><span class="line">get key x1 x2获取x1到x2范围内的值</span><br></pre></td></tr></table></figure><p><img src="/2022/08/28/redis/image-20220828145426912.png" alt="image-20220828145426912"></p></li><li><p>hash(散列)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset </span><br></pre></td></tr></table></figure><p><img src="/2022/08/28/redis/image-20220828152624146.png" alt="image-20220828152624146"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HDEL key field [field …]删除一个或多个Hash的fieldO(N) N是被删除的字段数量。</span><br><span class="line">HEXISTS key field判断field是否存在于hash中O(1)</span><br><span class="line">HGET key field获取hash中field的值O(1)</span><br><span class="line">HGETALL key从hash中读取全部的域和值O(N) N是Hash的长度</span><br><span class="line">HINCRBY key field increment将hash中指定域的值增加给定的数字O(1)</span><br><span class="line">HINCRBYFLOAT key field increment将hash中指定域的值增加给定的浮点数O(1)</span><br><span class="line">HKEYS key获取hash的所有字段O(N) N是Hash的长度</span><br><span class="line">HLEN key获取hash里所有字段的数量O(1)</span><br><span class="line">HMGET key field [field …]获取hash里面指定字段的值O(N) N是请求的字段数</span><br><span class="line">HMSET key field value [field value …]设置hash字段值O(N) N是设置的字段数</span><br><span class="line">HSET key field value设置hash里面一个字段的值O(1)</span><br><span class="line">HSETNX key field value设置hash的一个字段，只有当这个字段不存在时有效O(1)</span><br><span class="line">HSTRLEN key field获取hash里面指定field的长度O(1)</span><br><span class="line">HVALS key获得hash的所有值O(N) N是Hash的长度</span><br><span class="line">HSCAN key cursor [MATCH pattern] [COUNT count]迭代hash里面的元素</span><br></pre></td></tr></table></figure></li><li><p>list(双链表实现)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rpush 给定值加入到列表的右端</span><br><span class="line">lpush 给定值推入到列表的左端</span><br><span class="line">rpop 从列表的右端弹出一个值并返回</span><br><span class="line">lpop 从列表的左端弹出一个值,并返回</span><br><span class="line">lrange 获取给定范围上的所有值</span><br><span class="line">llen 获得长度</span><br><span class="line">lindex 通过索引获取列表中的元素 -1表示最后一个</span><br><span class="line"></span><br><span class="line">lpush+lpop=stack</span><br><span class="line">lpush+rpop=queue</span><br><span class="line">lpush+ltrim=capped collection有限集合</span><br><span class="line">lpush+brpop=message queue 消息队列</span><br></pre></td></tr></table></figure><p><img src="/2022/08/28/redis/image-20220828145824377.png" alt="image-20220828145824377"></p></li><li><p>set(哈希表实现)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sadd key value 添加元素</span><br><span class="line">smembers key 查看元素</span><br><span class="line">srem key value 移除元素</span><br><span class="line">scard key 查看集合元素个数</span><br><span class="line">sinter key1 key2 查看集合的交集</span><br><span class="line">sunion key1 key2 查看集合的并集</span><br><span class="line">sdiff key1 key2 查看集合的差集</span><br><span class="line">srandmember key随机取出一个值</span><br><span class="line">spop 随机删除一个值</span><br><span class="line">smove set1 set2 &quot;xx&quot; 把set1的xx移动到set2</span><br></pre></td></tr></table></figure></li><li><p>sorted set</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 member1 添加或更新成员分数</span><br><span class="line">zrange key start stop [withscores] 通过索引指定区间</span><br><span class="line">zincrby key incrrement member 增加incrrement</span><br><span class="line">zrem key member 移除</span><br></pre></td></tr></table></figure></li></ul><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote><p>事务:一组命令的集合 全部成功或全部失败</p><p>Redis没有隔离级别</p><p>Redis事务不保证原子性</p></blockquote><ul><li>开启事务 muliti</li><li>命令</li><li>执行事务 exec</li></ul><p><img src="/2022/08/28/redis/image-20220828160112306.png" alt="image-20220828160112306"></p><p>放弃事务 都不执行</p><p><img src="/2022/08/28/redis/image-20220828160209706.png" alt="image-20220828160209706"></p><p>异常</p><blockquote><p>命令异常 都不执行</p></blockquote><blockquote><p>逻辑错误 其他命令正常执行</p></blockquote><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁:"></a>悲观锁:</h4><ul><li>什么时候都加锁影响效率</li></ul><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><ul><li>更新数据之前进行判断</li></ul><h4 id="监视器"><a href="#监视器" class="headerlink" title="监视器"></a>监视器</h4><p><img src="/2022/08/28/redis/image-20220828160838103.png" alt="image-20220828160838103"></p><p>事务正常结束</p><p><img src="/2022/08/28/redis/image-20220828161145351.png" alt="image-20220828161145351"></p><p><img src="/2022/08/28/redis/image-20220828161157537.png" alt="image-20220828161157537"></p><p>unwatch 解锁</p><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><ol><li><p>导入依赖 jedis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring Data Redis RedisTemplate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ValueOperations k-v操作</span><br><span class="line">SetOperations set操作</span><br><span class="line">ZsetOperations zset操作</span><br><span class="line">HashOperations hash操作</span><br><span class="line">ListOperations list操作</span><br></pre></td></tr></table></figure></li></ol><h3 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br></pre></td><td class="code"><pre><span class="line"># Redis configuration file example.</span><br><span class="line">#</span><br><span class="line"># Note that in order to read the configuration file, Redis must be</span><br><span class="line"># started with the file path as first argument:</span><br><span class="line">#</span><br><span class="line"># ./redis-server /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br><span class="line"></span><br><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"># Include one or more other config files here.  This is useful if you</span><br><span class="line"># have a standard template that goes to all Redis servers but also need</span><br><span class="line"># to customize a few per-server settings.  Include files can include</span><br><span class="line"># other files, so use this wisely.</span><br><span class="line">#</span><br><span class="line"># Note that option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span><br><span class="line"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><span class="line"># line as value of a configuration directive, you&#x27;d better put includes</span><br><span class="line"># at the beginning of this file to avoid overwriting config change at runtime.</span><br><span class="line">#</span><br><span class="line"># If instead you are interested in using includes to override configuration</span><br><span class="line"># options, it is better to use include as the last line.</span><br><span class="line">#</span><br><span class="line"># Included paths may contain wildcards. All files matching the wildcards will</span><br><span class="line"># be included in alphabetical order.</span><br><span class="line"># Note that if an include path contains a wildcards but no files match it when</span><br><span class="line"># the server is started, the include statement will be ignored and no error will</span><br><span class="line"># be emitted.  It is safe, therefore, to include wildcard files from empty</span><br><span class="line"># directories.</span><br><span class="line">#</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br><span class="line"># include /path/to/fragments/*.conf</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">################################## MODULES #####################################</span><br><span class="line"></span><br><span class="line"># Load modules at startup. If the server is not able to load modules</span><br><span class="line"># it will abort. It is possible to use multiple loadmodule directives.</span><br><span class="line">#</span><br><span class="line"># loadmodule /path/to/my_module.so</span><br><span class="line"># loadmodule /path/to/other_module.so</span><br><span class="line"></span><br><span class="line">################################## NETWORK #####################################</span><br><span class="line"></span><br><span class="line"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span><br><span class="line"># for connections from all available network interfaces on the host machine.</span><br><span class="line"># It is possible to listen to just one or multiple selected interfaces using</span><br><span class="line"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span><br><span class="line"># Each address can be prefixed by &quot;-&quot;, which means that redis will not fail to</span><br><span class="line"># start if the address is not available. Being not available only refers to</span><br><span class="line"># addresses that does not correspond to any network interface. Addresses that</span><br><span class="line"># are already in use will always fail, and unsupported protocols will always BE</span><br><span class="line"># silently skipped.</span><br><span class="line">#</span><br><span class="line"># Examples:</span><br><span class="line">#</span><br><span class="line"># bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses</span><br><span class="line"># bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6</span><br><span class="line">bind * -::*                     # like the default, all available interfaces</span><br><span class="line">#</span><br><span class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><br><span class="line"># internet, binding to all the interfaces is dangerous and will expose the</span><br><span class="line"># instance to everybody on the internet. So by default we uncomment the</span><br><span class="line"># following bind directive, that will force Redis to listen only on the</span><br><span class="line"># IPv4 and IPv6 (if available) loopback interface addresses (this means Redis</span><br><span class="line"># will only be able to accept client connections from the same host that it is</span><br><span class="line"># running on).</span><br><span class="line">#</span><br><span class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line"># COMMENT OUT THE FOLLOWING LINE.</span><br><span class="line">#</span><br><span class="line"># You will also need to set a password unless you explicitly disable protected</span><br><span class="line"># mode.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">bind 127.0.0.1 -::1</span><br><span class="line"></span><br><span class="line"># By default, outgoing connections (from replica to master, from Sentinel to</span><br><span class="line"># instances, cluster bus, etc.) are not bound to a specific local address. In</span><br><span class="line"># most cases, this means the operating system will handle that based on routing</span><br><span class="line"># and the interface through which the connection goes out.</span><br><span class="line">#</span><br><span class="line"># Using bind-source-addr it is possible to configure a specific address to bind</span><br><span class="line"># to, which may also affect how the connection gets routed.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># bind-source-addr 10.0.0.1</span><br><span class="line"></span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">#</span><br><span class="line"># When protected mode is on and the default user has no password, the server</span><br><span class="line"># only accepts local connections from the IPv4 address (127.0.0.1), IPv6 address</span><br><span class="line"># (::1) or Unix domain sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured.</span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line"># Redis uses default hardened security configuration directives to reduce the</span><br><span class="line"># attack surface on innocent users. Therefore, several sensitive configuration</span><br><span class="line"># directives are immutable, and some potentially-dangerous commands are blocked.</span><br><span class="line">#</span><br><span class="line"># Configuration directives that control files that Redis writes to (e.g., &#x27;dir&#x27;</span><br><span class="line"># and &#x27;dbfilename&#x27;) and that aren&#x27;t usually modified during runtime</span><br><span class="line"># are protected by making them immutable.</span><br><span class="line">#</span><br><span class="line"># Commands that can increase the attack surface of Redis and that aren&#x27;t usually</span><br><span class="line"># called by users are blocked by default.</span><br><span class="line">#</span><br><span class="line"># These can be exposed to either all connections or just local ones by setting</span><br><span class="line"># each of the configs listed below to either of these values:</span><br><span class="line">#</span><br><span class="line"># no    - Block for any connection (remain immutable)</span><br><span class="line"># yes   - Allow for any connection (no protection)</span><br><span class="line"># local - Allow only for local connections. Ones originating from the</span><br><span class="line">#         IPv4 address (127.0.0.1), IPv6 address (::1) or Unix domain sockets.</span><br><span class="line">#</span><br><span class="line"># enable-protected-configs no</span><br><span class="line"># enable-debug-command no</span><br><span class="line"># enable-module-command no</span><br><span class="line"></span><br><span class="line"># Accept connections on the specified port, default is 6379 (IANA #815344).</span><br><span class="line"># If port 0 is specified Redis will not listen on a TCP socket.</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># TCP listen() backlog.</span><br><span class="line">#</span><br><span class="line"># In high requests-per-second environments you need a high backlog in order</span><br><span class="line"># to avoid slow clients connection issues. Note that the Linux kernel</span><br><span class="line"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><br><span class="line"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span><br><span class="line"># in order to get the desired effect.</span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"># Unix socket.</span><br><span class="line">#</span><br><span class="line"># Specify the path for the Unix socket that will be used to listen for</span><br><span class="line"># incoming connections. There is no default, so Redis will not listen</span><br><span class="line"># on a unix socket when not specified.</span><br><span class="line">#</span><br><span class="line"># unixsocket /run/redis.sock</span><br><span class="line"># unixsocketperm 700</span><br><span class="line"></span><br><span class="line"># Close the connection after a client is idle for N seconds (0 to disable)</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># TCP keepalive.</span><br><span class="line">#</span><br><span class="line"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span><br><span class="line"># of communication. This is useful for two reasons:</span><br><span class="line">#</span><br><span class="line"># 1) Detect dead peers.</span><br><span class="line"># 2) Force network equipment in the middle to consider the connection to be</span><br><span class="line">#    alive.</span><br><span class="line">#</span><br><span class="line"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span><br><span class="line"># Note that to close the connection the double of the time is needed.</span><br><span class="line"># On other kernels the period depends on the kernel configuration.</span><br><span class="line">#</span><br><span class="line"># A reasonable value for this option is 300 seconds, which is the new</span><br><span class="line"># Redis default starting with Redis 3.2.1.</span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line"># Apply OS-specific mechanism to mark the listening socket with the specified</span><br><span class="line"># ID, to support advanced routing and filtering capabilities.</span><br><span class="line">#</span><br><span class="line"># On Linux, the ID represents a connection mark.</span><br><span class="line"># On FreeBSD, the ID represents a socket cookie ID.</span><br><span class="line"># On OpenBSD, the ID represents a route table ID.</span><br><span class="line">#</span><br><span class="line"># The default value is 0, which implies no marking is required.</span><br><span class="line"># socket-mark-id 0</span><br><span class="line"></span><br><span class="line">################################# TLS/SSL #####################################</span><br><span class="line"></span><br><span class="line"># By default, TLS/SSL is disabled. To enable it, the &quot;tls-port&quot; configuration</span><br><span class="line"># directive can be used to define TLS-listening ports. To enable TLS on the</span><br><span class="line"># default port, use:</span><br><span class="line">#</span><br><span class="line"># port 0</span><br><span class="line"># tls-port 6379</span><br><span class="line"></span><br><span class="line"># Configure a X.509 certificate and private key to use for authenticating the</span><br><span class="line"># server to connected clients, masters or cluster peers.  These files should be</span><br><span class="line"># PEM formatted.</span><br><span class="line">#</span><br><span class="line"># tls-cert-file redis.crt</span><br><span class="line"># tls-key-file redis.key</span><br><span class="line">#</span><br><span class="line"># If the key file is encrypted using a passphrase, it can be included here</span><br><span class="line"># as well.</span><br><span class="line">#</span><br><span class="line"># tls-key-file-pass secret</span><br><span class="line"></span><br><span class="line"># Normally Redis uses the same certificate for both server functions (accepting</span><br><span class="line"># connections) and client functions (replicating from a master, establishing</span><br><span class="line"># cluster bus connections, etc.).</span><br><span class="line">#</span><br><span class="line"># Sometimes certificates are issued with attributes that designate them as</span><br><span class="line"># client-only or server-only certificates. In that case it may be desired to use</span><br><span class="line"># different certificates for incoming (server) and outgoing (client)</span><br><span class="line"># connections. To do that, use the following directives:</span><br><span class="line">#</span><br><span class="line"># tls-client-cert-file client.crt</span><br><span class="line"># tls-client-key-file client.key</span><br><span class="line">#</span><br><span class="line"># If the key file is encrypted using a passphrase, it can be included here</span><br><span class="line"># as well.</span><br><span class="line">#</span><br><span class="line"># tls-client-key-file-pass secret</span><br><span class="line"></span><br><span class="line"># Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange,</span><br><span class="line"># required by older versions of OpenSSL (&lt;3.0). Newer versions do not require</span><br><span class="line"># this configuration and recommend against it.</span><br><span class="line">#</span><br><span class="line"># tls-dh-params-file redis.dh</span><br><span class="line"></span><br><span class="line"># Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL</span><br><span class="line"># clients and peers.  Redis requires an explicit configuration of at least one</span><br><span class="line"># of these, and will not implicitly use the system wide configuration.</span><br><span class="line">#</span><br><span class="line"># tls-ca-cert-file ca.crt</span><br><span class="line"># tls-ca-cert-dir /etc/ssl/certs</span><br><span class="line"></span><br><span class="line"># By default, clients (including replica servers) on a TLS port are required</span><br><span class="line"># to authenticate using valid client side certificates.</span><br><span class="line">#</span><br><span class="line"># If &quot;no&quot; is specified, client certificates are not required and not accepted.</span><br><span class="line"># If &quot;optional&quot; is specified, client certificates are accepted and must be</span><br><span class="line"># valid if provided, but are not required.</span><br><span class="line">#</span><br><span class="line"># tls-auth-clients no</span><br><span class="line"># tls-auth-clients optional</span><br><span class="line"></span><br><span class="line"># By default, a Redis replica does not attempt to establish a TLS connection</span><br><span class="line"># with its master.</span><br><span class="line">#</span><br><span class="line"># Use the following directive to enable TLS on replication links.</span><br><span class="line">#</span><br><span class="line"># tls-replication yes</span><br><span class="line"></span><br><span class="line"># By default, the Redis Cluster bus uses a plain TCP connection. To enable</span><br><span class="line"># TLS for the bus protocol, use the following directive:</span><br><span class="line">#</span><br><span class="line"># tls-cluster yes</span><br><span class="line"></span><br><span class="line"># By default, only TLSv1.2 and TLSv1.3 are enabled and it is highly recommended</span><br><span class="line"># that older formally deprecated versions are kept disabled to reduce the attack surface.</span><br><span class="line"># You can explicitly specify TLS versions to support.</span><br><span class="line"># Allowed values are case insensitive and include &quot;TLSv1&quot;, &quot;TLSv1.1&quot;, &quot;TLSv1.2&quot;,</span><br><span class="line"># &quot;TLSv1.3&quot; (OpenSSL &gt;= 1.1.1) or any combination.</span><br><span class="line"># To enable only TLSv1.2 and TLSv1.3, use:</span><br><span class="line">#</span><br><span class="line"># tls-protocols &quot;TLSv1.2 TLSv1.3&quot;</span><br><span class="line"></span><br><span class="line"># Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information</span><br><span class="line"># about the syntax of this string.</span><br><span class="line">#</span><br><span class="line"># Note: this configuration applies only to &lt;= TLSv1.2.</span><br><span class="line">#</span><br><span class="line"># tls-ciphers DEFAULT:!MEDIUM</span><br><span class="line"></span><br><span class="line"># Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more</span><br><span class="line"># information about the syntax of this string, and specifically for TLSv1.3</span><br><span class="line"># ciphersuites.</span><br><span class="line">#</span><br><span class="line"># tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span><br><span class="line"></span><br><span class="line"># When choosing a cipher, use the server&#x27;s preference instead of the client</span><br><span class="line"># preference. By default, the server follows the client&#x27;s preference.</span><br><span class="line">#</span><br><span class="line"># tls-prefer-server-ciphers yes</span><br><span class="line"></span><br><span class="line"># By default, TLS session caching is enabled to allow faster and less expensive</span><br><span class="line"># reconnections by clients that support it. Use the following directive to disable</span><br><span class="line"># caching.</span><br><span class="line">#</span><br><span class="line"># tls-session-caching no</span><br><span class="line"></span><br><span class="line"># Change the default number of TLS sessions cached. A zero value sets the cache</span><br><span class="line"># to unlimited size. The default size is 20480.</span><br><span class="line">#</span><br><span class="line"># tls-session-cache-size 5000</span><br><span class="line"></span><br><span class="line"># Change the default timeout of cached TLS sessions. The default timeout is 300</span><br><span class="line"># seconds.</span><br><span class="line">#</span><br><span class="line"># tls-session-cache-timeout 60</span><br><span class="line"></span><br><span class="line">################################# GENERAL #####################################</span><br><span class="line"></span><br><span class="line"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line"># When Redis is supervised by upstart or systemd, this parameter has no impact.</span><br><span class="line">daemonize no</span><br><span class="line"># If you run Redis from upstart or systemd, Redis can interact with your</span><br><span class="line"># supervision tree. Options:</span><br><span class="line">#   supervised no      - no supervision interaction</span><br><span class="line">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><br><span class="line">#                        requires &quot;expect stop&quot; in your upstart job config</span><br><span class="line">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span><br><span class="line">#                        on startup, and updating Redis status on a regular</span><br><span class="line">#                        basis.</span><br><span class="line">#   supervised auto    - detect upstart or systemd method based on</span><br><span class="line">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span><br><span class="line"># Note: these supervision methods only signal &quot;process is ready.&quot;</span><br><span class="line">#       They do not enable continuous pings back to your supervisor.</span><br><span class="line">#</span><br><span class="line"># The default is &quot;no&quot;. To run under upstart/systemd, you can simply uncomment</span><br><span class="line"># the line below:</span><br><span class="line">#</span><br><span class="line"># supervised auto</span><br><span class="line"></span><br><span class="line"># If a pid file is specified, Redis writes it where specified at startup</span><br><span class="line"># and removes it at exit.</span><br><span class="line">#</span><br><span class="line"># When the server runs non daemonized, no pid file is created if none is</span><br><span class="line"># specified in the configuration. When the server is daemonized, the pid file</span><br><span class="line"># is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span><br><span class="line">#</span><br><span class="line"># Creating a pid file is best effort: if Redis is not able to create it</span><br><span class="line"># nothing bad happens, the server will start and run normally.</span><br><span class="line">#</span><br><span class="line"># Note that on modern Linux systems &quot;/run/redis.pid&quot; is more conforming</span><br><span class="line"># and should be used instead.</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"># Specify the server verbosity level.</span><br><span class="line"># This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development/testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"># Specify the log file name. Also the empty string can be used to force</span><br><span class="line"># Redis to log on the standard output. Note that if you use standard</span><br><span class="line"># output for logging but daemonize, logs will be sent to /dev/null</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"># To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes,</span><br><span class="line"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"># Specify the syslog identity.</span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"># To disable the built in crash log, which will possibly produce cleaner core</span><br><span class="line"># dumps when they are needed, uncomment the following:</span><br><span class="line">#</span><br><span class="line"># crash-log-enabled no</span><br><span class="line"></span><br><span class="line"># To disable the fast memory check that&#x27;s run as part of the crash log, which</span><br><span class="line"># will possibly let redis terminate sooner, uncomment the following:</span><br><span class="line">#</span><br><span class="line"># crash-memcheck-enabled no</span><br><span class="line"></span><br><span class="line"># Set the number of databases. The default database is DB 0, you can select</span><br><span class="line"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="line"># dbid is a number between 0 and &#x27;databases&#x27;-1</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"># By default Redis shows an ASCII art logo only when started to log to the</span><br><span class="line"># standard output and if the standard output is a TTY and syslog logging is</span><br><span class="line"># disabled. Basically this means that normally a logo is displayed only in</span><br><span class="line"># interactive sessions.</span><br><span class="line">#</span><br><span class="line"># However it is possible to force the pre-4.0 behavior and always show a</span><br><span class="line"># ASCII art logo in startup logs by setting the following option to yes.</span><br><span class="line">always-show-logo no</span><br><span class="line"></span><br><span class="line"># By default, Redis modifies the process title (as seen in &#x27;top&#x27; and &#x27;ps&#x27;) to</span><br><span class="line"># provide some runtime information. It is possible to disable this and leave</span><br><span class="line"># the process name as executed by setting the following to no.</span><br><span class="line">set-proc-title yes</span><br><span class="line"></span><br><span class="line"># When changing the process title, Redis uses the following template to construct</span><br><span class="line"># the modified title.</span><br><span class="line">#</span><br><span class="line"># Template variables are specified in curly brackets. The following variables are</span><br><span class="line"># supported:</span><br><span class="line">#</span><br><span class="line"># &#123;title&#125;           Name of process as executed if parent, or type of child process.</span><br><span class="line"># &#123;listen-addr&#125;     Bind address or &#x27;*&#x27; followed by TCP or TLS port listening on, or</span><br><span class="line">#                   Unix socket if only that&#x27;s available.</span><br><span class="line"># &#123;server-mode&#125;     Special mode, i.e. &quot;[sentinel]&quot; or &quot;[cluster]&quot;.</span><br><span class="line"># &#123;port&#125;            TCP port listening on, or 0.</span><br><span class="line"># &#123;tls-port&#125;        TLS port listening on, or 0.</span><br><span class="line"># &#123;unixsocket&#125;      Unix domain socket listening on, or &quot;&quot;.</span><br><span class="line"># &#123;config-file&#125;     Name of configuration file used.</span><br><span class="line">#</span><br><span class="line">proc-title-template &quot;&#123;title&#125; &#123;listen-addr&#125; &#123;server-mode&#125;&quot;</span><br><span class="line"></span><br><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line"></span><br><span class="line"># Save the DB to disk.</span><br><span class="line">#</span><br><span class="line"># save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span><br><span class="line">#</span><br><span class="line"># Redis will save the DB if the given number of seconds elapsed and it</span><br><span class="line"># surpassed the given number of write operations against the DB.</span><br><span class="line">#</span><br><span class="line"># Snapshotting can be completely disabled with a single empty string argument</span><br><span class="line"># as in following example:</span><br><span class="line">#</span><br><span class="line"># save &quot;&quot;</span><br><span class="line">#</span><br><span class="line"># Unless specified otherwise, by default Redis will save the DB:</span><br><span class="line">#   * After 3600 seconds (an hour) if at least 1 change was performed</span><br><span class="line">#   * After 300 seconds (5 minutes) if at least 100 changes were performed</span><br><span class="line">#   * After 60 seconds if at least 10000 changes were performed</span><br><span class="line">#</span><br><span class="line"># You can set these explicitly by uncommenting the following line.</span><br><span class="line">#</span><br><span class="line"># save 3600 1 300 100 60 10000</span><br><span class="line"></span><br><span class="line"># By default Redis will stop accepting writes if RDB snapshots are enabled</span><br><span class="line"># (at least one save point) and the latest background save failed.</span><br><span class="line"># This will make the user aware (in a hard way) that data is not persisting</span><br><span class="line"># on disk properly, otherwise chances are that no one will notice and some</span><br><span class="line"># disaster will happen.</span><br><span class="line">#</span><br><span class="line"># If the background saving process will start working again Redis will</span><br><span class="line"># automatically allow writes again.</span><br><span class="line">#</span><br><span class="line"># However if you have setup your proper monitoring of the Redis server</span><br><span class="line"># and persistence, you may want to disable this feature so that Redis will</span><br><span class="line"># continue to work as usual even if there are problems with disk,</span><br><span class="line"># permissions, and so forth.</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># Compress string objects using LZF when dump .rdb databases?</span><br><span class="line"># By default compression is enabled as it&#x27;s almost always a win.</span><br><span class="line"># If you want to save some CPU in the saving child set it to &#x27;no&#x27; but</span><br><span class="line"># the dataset will likely be bigger if you have compressible values or keys.</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span><br><span class="line"># This makes the format more resistant to corruption but there is a performance</span><br><span class="line"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span><br><span class="line"># for maximum performances.</span><br><span class="line">#</span><br><span class="line"># RDB files created with checksum disabled have a checksum of zero that will</span><br><span class="line"># tell the loading code to skip the check.</span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"># Enables or disables full sanitization checks for ziplist and listpack etc when</span><br><span class="line"># loading an RDB or RESTORE payload. This reduces the chances of a assertion or</span><br><span class="line"># crash later on while processing commands.</span><br><span class="line"># Options:</span><br><span class="line">#   no         - Never perform full sanitization</span><br><span class="line">#   yes        - Always perform full sanitization</span><br><span class="line">#   clients    - Perform full sanitization only for user connections.</span><br><span class="line">#                Excludes: RDB files, RESTORE commands received from the master</span><br><span class="line">#                connection, and client connections which have the</span><br><span class="line">#                skip-sanitize-payload ACL flag.</span><br><span class="line"># The default should be &#x27;clients&#x27; but since it currently affects cluster</span><br><span class="line"># resharding via MIGRATE, it is temporarily set to &#x27;no&#x27; by default.</span><br><span class="line">#</span><br><span class="line"># sanitize-dump-payload no</span><br><span class="line"></span><br><span class="line"># The filename where to dump the DB</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># Remove RDB files used by replication in instances without persistence</span><br><span class="line"># enabled. By default this option is disabled, however there are environments</span><br><span class="line"># where for regulations or other security concerns, RDB files persisted on</span><br><span class="line"># disk by masters in order to feed replicas, or stored on disk by replicas</span><br><span class="line"># in order to load them for the initial synchronization, should be deleted</span><br><span class="line"># ASAP. Note that this option ONLY WORKS in instances that have both AOF</span><br><span class="line"># and RDB persistence disabled, otherwise is completely ignored.</span><br><span class="line">#</span><br><span class="line"># An alternative (and sometimes better) way to obtain the same effect is</span><br><span class="line"># to use diskless replication on both master and replicas instances. However</span><br><span class="line"># in the case of replicas, diskless is not always an option.</span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"></span><br><span class="line"># The working directory.</span><br><span class="line">#</span><br><span class="line"># The DB will be written inside this directory, with the filename specified</span><br><span class="line"># above using the &#x27;dbfilename&#x27; configuration directive.</span><br><span class="line">#</span><br><span class="line"># The Append Only File will also be created inside this directory.</span><br><span class="line">#</span><br><span class="line"># Note that you must specify a directory here, not a file name.</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">################################# REPLICATION #################################</span><br><span class="line"></span><br><span class="line"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><br><span class="line"># another Redis server. A few things to understand ASAP about Redis replication.</span><br><span class="line">#</span><br><span class="line">#   +------------------+      +---------------+</span><br><span class="line">#   |      Master      | ---&gt; |    Replica    |</span><br><span class="line">#   | (receive writes) |      |  (exact copy) |</span><br><span class="line">#   +------------------+      +---------------+</span><br><span class="line">#</span><br><span class="line"># 1) Redis replication is asynchronous, but you can configure a master to</span><br><span class="line">#    stop accepting writes if it appears to be not connected with at least</span><br><span class="line">#    a given number of replicas.</span><br><span class="line"># 2) Redis replicas are able to perform a partial resynchronization with the</span><br><span class="line">#    master if the replication link is lost for a relatively small amount of</span><br><span class="line">#    time. You may want to configure the replication backlog size (see the next</span><br><span class="line">#    sections of this file) with a sensible value depending on your needs.</span><br><span class="line"># 3) Replication is automatic and does not need user intervention. After a</span><br><span class="line">#    network partition replicas automatically try to reconnect to masters</span><br><span class="line">#    and resynchronize with them.</span><br><span class="line">#</span><br><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"># If the master is password protected (using the &quot;requirepass&quot; configuration</span><br><span class="line"># directive below) it is possible to tell the replica to authenticate before</span><br><span class="line"># starting the replication synchronization process, otherwise the master will</span><br><span class="line"># refuse the replica request.</span><br><span class="line">#</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line">#</span><br><span class="line"># However this is not enough if you are using Redis ACLs (for Redis version</span><br><span class="line"># 6 or greater), and the default user is not capable of running the PSYNC</span><br><span class="line"># command and/or other commands needed for replication. In this case it&#x27;s</span><br><span class="line"># better to configure a special user to use with replication, and specify the</span><br><span class="line"># masteruser configuration as such:</span><br><span class="line">#</span><br><span class="line"># masteruser &lt;username&gt;</span><br><span class="line">#</span><br><span class="line"># When masteruser is specified, the replica will authenticate against its</span><br><span class="line"># master using the new AUTH form: AUTH &lt;username&gt; &lt;password&gt;.</span><br><span class="line"></span><br><span class="line"># When a replica loses its connection with the master, or when the replication</span><br><span class="line"># is still in progress, the replica can act in two different ways:</span><br><span class="line">#</span><br><span class="line"># 1) if replica-serve-stale-data is set to &#x27;yes&#x27; (the default) the replica will</span><br><span class="line">#    still reply to client requests, possibly with out of date data, or the</span><br><span class="line">#    data set may just be empty if this is the first synchronization.</span><br><span class="line">#</span><br><span class="line"># 2) If replica-serve-stale-data is set to &#x27;no&#x27; the replica will reply with error</span><br><span class="line">#    &quot;MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to &#x27;no&#x27;&quot;</span><br><span class="line">#    to all data access commands, excluding commands such as:</span><br><span class="line">#    INFO, REPLICAOF, AUTH, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,</span><br><span class="line">#    UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,</span><br><span class="line">#    HOST and LATENCY.</span><br><span class="line">#</span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"># You can configure a replica instance to accept writes or not. Writing against</span><br><span class="line"># a replica instance may be useful to store some ephemeral data (because data</span><br><span class="line"># written on a replica will be easily deleted after resync with the master) but</span><br><span class="line"># may also cause problems if clients are writing to it because of a</span><br><span class="line"># misconfiguration.</span><br><span class="line">#</span><br><span class="line"># Since Redis 2.6 by default replicas are read-only.</span><br><span class="line">#</span><br><span class="line"># Note: read only replicas are not designed to be exposed to untrusted clients</span><br><span class="line"># on the internet. It&#x27;s just a protection layer against misuse of the instance.</span><br><span class="line"># Still a read only replica exports by default all the administrative commands</span><br><span class="line"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span><br><span class="line"># security of read only replicas using &#x27;rename-command&#x27; to shadow all the</span><br><span class="line"># administrative / dangerous commands.</span><br><span class="line">replica-read-only yes</span><br><span class="line"></span><br><span class="line"># Replication SYNC strategy: disk or socket.</span><br><span class="line">#</span><br><span class="line"># New replicas and reconnecting replicas that are not able to continue the</span><br><span class="line"># replication process just receiving differences, need to do what is called a</span><br><span class="line"># &quot;full synchronization&quot;. An RDB file is transmitted from the master to the</span><br><span class="line"># replicas.</span><br><span class="line">#</span><br><span class="line"># The transmission can happen in two different ways:</span><br><span class="line">#</span><br><span class="line"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span><br><span class="line">#                 file on disk. Later the file is transferred by the parent</span><br><span class="line">#                 process to the replicas incrementally.</span><br><span class="line"># 2) Diskless: The Redis master creates a new process that directly writes the</span><br><span class="line">#              RDB file to replica sockets, without touching the disk at all.</span><br><span class="line">#</span><br><span class="line"># With disk-backed replication, while the RDB file is generated, more replicas</span><br><span class="line"># can be queued and served with the RDB file as soon as the current child</span><br><span class="line"># producing the RDB file finishes its work. With diskless replication instead</span><br><span class="line"># once the transfer starts, new replicas arriving will be queued and a new</span><br><span class="line"># transfer will start when the current one terminates.</span><br><span class="line">#</span><br><span class="line"># When diskless replication is used, the master waits a configurable amount of</span><br><span class="line"># time (in seconds) before starting the transfer in the hope that multiple</span><br><span class="line"># replicas will arrive and the transfer can be parallelized.</span><br><span class="line">#</span><br><span class="line"># With slow disks and fast (large bandwidth) networks, diskless replication</span><br><span class="line"># works better.</span><br><span class="line">repl-diskless-sync yes</span><br><span class="line"></span><br><span class="line"># When diskless replication is enabled, it is possible to configure the delay</span><br><span class="line"># the server waits in order to spawn the child that transfers the RDB via socket</span><br><span class="line"># to the replicas.</span><br><span class="line">#</span><br><span class="line"># This is important since once the transfer starts, it is not possible to serve</span><br><span class="line"># new replicas arriving, that will be queued for the next RDB transfer, so the</span><br><span class="line"># server waits a delay in order to let more replicas arrive.</span><br><span class="line">#</span><br><span class="line"># The delay is specified in seconds, and by default is 5 seconds. To disable</span><br><span class="line"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"># When diskless replication is enabled with a delay, it is possible to let</span><br><span class="line"># the replication start before the maximum delay is reached if the maximum</span><br><span class="line"># number of replicas expected have connected. Default of 0 means that the</span><br><span class="line"># maximum is not defined and Redis will wait the full delay.</span><br><span class="line">repl-diskless-sync-max-replicas 0</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># WARNING: RDB diskless load is experimental. Since in this setup the replica</span><br><span class="line"># does not immediately store an RDB on disk, it may cause data loss during</span><br><span class="line"># failovers. RDB diskless load + Redis modules not handling I/O reads may also</span><br><span class="line"># cause Redis to abort in case of I/O errors during the initial synchronization</span><br><span class="line"># stage with the master. Use only if you know what you are doing.</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">#</span><br><span class="line"># Replica can load the RDB it reads from the replication link directly from the</span><br><span class="line"># socket, or store the RDB to a file and read that file after it was completely</span><br><span class="line"># received from the master.</span><br><span class="line">#</span><br><span class="line"># In many cases the disk is slower than the network, and storing and loading</span><br><span class="line"># the RDB file may increase replication time (and even increase the master&#x27;s</span><br><span class="line"># Copy on Write memory and replica buffers).</span><br><span class="line"># However, parsing the RDB file directly from the socket may mean that we have</span><br><span class="line"># to flush the contents of the current database before the full rdb was</span><br><span class="line"># received. For this reason we have the following options:</span><br><span class="line">#</span><br><span class="line"># &quot;disabled&quot;    - Don&#x27;t use diskless load (store the rdb file to the disk first)</span><br><span class="line"># &quot;on-empty-db&quot; - Use diskless load only when it is completely safe.</span><br><span class="line"># &quot;swapdb&quot;      - Keep current db contents in RAM while parsing the data directly</span><br><span class="line">#                 from the socket. Replicas in this mode can keep serving current</span><br><span class="line">#                 data set while replication is in progress, except for cases where</span><br><span class="line">#                 they can&#x27;t recognize master as having a data set from same</span><br><span class="line">#                 replication history.</span><br><span class="line">#                 Note that this requires sufficient memory, if you don&#x27;t have it,</span><br><span class="line">#                 you risk an OOM kill.</span><br><span class="line">repl-diskless-load disabled</span><br><span class="line"></span><br><span class="line"># Master send PINGs to its replicas in a predefined interval. It&#x27;s possible to</span><br><span class="line"># change this interval with the repl_ping_replica_period option. The default</span><br><span class="line"># value is 10 seconds.</span><br><span class="line">#</span><br><span class="line"># repl-ping-replica-period 10</span><br><span class="line"></span><br><span class="line"># The following option sets the replication timeout for:</span><br><span class="line">#</span><br><span class="line"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span><br><span class="line"># 2) Master timeout from the point of view of replicas (data, pings).</span><br><span class="line"># 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span><br><span class="line">#</span><br><span class="line"># It is important to make sure that this value is greater than the value</span><br><span class="line"># specified for repl-ping-replica-period otherwise a timeout will be detected</span><br><span class="line"># every time there is low traffic between the master and the replica. The default</span><br><span class="line"># value is 60 seconds.</span><br><span class="line">#</span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line"># Disable TCP_NODELAY on the replica socket after SYNC?</span><br><span class="line">#</span><br><span class="line"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span><br><span class="line"># less bandwidth to send data to replicas. But this can add a delay for</span><br><span class="line"># the data to appear on the replica side, up to 40 milliseconds with</span><br><span class="line"># Linux kernels using a default configuration.</span><br><span class="line">#</span><br><span class="line"># If you select &quot;no&quot; the delay for data to appear on the replica side will</span><br><span class="line"># be reduced but more bandwidth will be used for replication.</span><br><span class="line">#</span><br><span class="line"># By default we optimize for low latency, but in very high traffic conditions</span><br><span class="line"># or when the master and replicas are many hops away, turning this to &quot;yes&quot; may</span><br><span class="line"># be a good idea.</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"># Set the replication backlog size. The backlog is a buffer that accumulates</span><br><span class="line"># replica data when replicas are disconnected for some time, so that when a</span><br><span class="line"># replica wants to reconnect again, often a full resync is not needed, but a</span><br><span class="line"># partial resync is enough, just passing the portion of data the replica</span><br><span class="line"># missed while disconnected.</span><br><span class="line">#</span><br><span class="line"># The bigger the replication backlog, the longer the replica can endure the</span><br><span class="line"># disconnect and later be able to perform a partial resynchronization.</span><br><span class="line">#</span><br><span class="line"># The backlog is only allocated if there is at least one replica connected.</span><br><span class="line">#</span><br><span class="line"># repl-backlog-size 1mb</span><br><span class="line"></span><br><span class="line"># After a master has no connected replicas for some time, the backlog will be</span><br><span class="line"># freed. The following option configures the amount of seconds that need to</span><br><span class="line"># elapse, starting from the time the last replica disconnected, for the backlog</span><br><span class="line"># buffer to be freed.</span><br><span class="line">#</span><br><span class="line"># Note that replicas never free the backlog for timeout, since they may be</span><br><span class="line"># promoted to masters later, and should be able to correctly &quot;partially</span><br><span class="line"># resynchronize&quot; with other replicas: hence they should always accumulate backlog.</span><br><span class="line">#</span><br><span class="line"># A value of 0 means to never release the backlog.</span><br><span class="line">#</span><br><span class="line"># repl-backlog-ttl 3600</span><br><span class="line"></span><br><span class="line"># The replica priority is an integer number published by Redis in the INFO</span><br><span class="line"># output. It is used by Redis Sentinel in order to select a replica to promote</span><br><span class="line"># into a master if the master is no longer working correctly.</span><br><span class="line">#</span><br><span class="line"># A replica with a low priority number is considered better for promotion, so</span><br><span class="line"># for instance if there are three replicas with priority 10, 100, 25 Sentinel</span><br><span class="line"># will pick the one with priority 10, that is the lowest.</span><br><span class="line">#</span><br><span class="line"># However a special priority of 0 marks the replica as not able to perform the</span><br><span class="line"># role of master, so a replica with priority of 0 will never be selected by</span><br><span class="line"># Redis Sentinel for promotion.</span><br><span class="line">#</span><br><span class="line"># By default the priority is 100.</span><br><span class="line">replica-priority 100</span><br><span class="line"></span><br><span class="line"># The propagation error behavior controls how Redis will behave when it is</span><br><span class="line"># unable to handle a command being processed in the replication stream from a master</span><br><span class="line"># or processed while reading from an AOF file. Errors that occur during propagation</span><br><span class="line"># are unexpected, and can cause data inconsistency. However, there are edge cases</span><br><span class="line"># in earlier versions of Redis where it was possible for the server to replicate or persist</span><br><span class="line"># commands that would fail on future versions. For this reason the default behavior</span><br><span class="line"># is to ignore such errors and continue processing commands.</span><br><span class="line">#</span><br><span class="line"># If an application wants to ensure there is no data divergence, this configuration</span><br><span class="line"># should be set to &#x27;panic&#x27; instead. The value can also be set to &#x27;panic-on-replicas&#x27;</span><br><span class="line"># to only panic when a replica encounters an error on the replication stream. One of</span><br><span class="line"># these two panic values will become the default value in the future once there are</span><br><span class="line"># sufficient safety mechanisms in place to prevent false positive crashes.</span><br><span class="line">#</span><br><span class="line"># propagation-error-behavior ignore</span><br><span class="line"></span><br><span class="line"># Replica ignore disk write errors controls the behavior of a replica when it is</span><br><span class="line"># unable to persist a write command received from its master to disk. By default,</span><br><span class="line"># this configuration is set to &#x27;no&#x27; and will crash the replica in this condition.</span><br><span class="line"># It is not recommended to change this default, however in order to be compatible</span><br><span class="line"># with older versions of Redis this config can be toggled to &#x27;yes&#x27; which will just</span><br><span class="line"># log a warning and execute the write command it got from the master.</span><br><span class="line">#</span><br><span class="line"># replica-ignore-disk-write-errors no</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># By default, Redis Sentinel includes all replicas in its reports. A replica</span><br><span class="line"># can be excluded from Redis Sentinel&#x27;s announcements. An unannounced replica</span><br><span class="line"># will be ignored by the &#x27;sentinel replicas &lt;master&gt;&#x27; command and won&#x27;t be</span><br><span class="line"># exposed to Redis Sentinel&#x27;s clients.</span><br><span class="line">#</span><br><span class="line"># This option does not change the behavior of replica-priority. Even with</span><br><span class="line"># replica-announced set to &#x27;no&#x27;, the replica can be promoted to master. To</span><br><span class="line"># prevent this behavior, set replica-priority to 0.</span><br><span class="line">#</span><br><span class="line"># replica-announced yes</span><br><span class="line"></span><br><span class="line"># It is possible for a master to stop accepting writes if there are less than</span><br><span class="line"># N replicas connected, having a lag less or equal than M seconds.</span><br><span class="line">#</span><br><span class="line"># The N replicas need to be in &quot;online&quot; state.</span><br><span class="line">#</span><br><span class="line"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span><br><span class="line"># the last ping received from the replica, that is usually sent every second.</span><br><span class="line">#</span><br><span class="line"># This option does not GUARANTEE that N replicas will accept the write, but</span><br><span class="line"># will limit the window of exposure for lost writes in case not enough replicas</span><br><span class="line"># are available, to the specified number of seconds.</span><br><span class="line">#</span><br><span class="line"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span><br><span class="line">#</span><br><span class="line"># min-replicas-to-write 3</span><br><span class="line"># min-replicas-max-lag 10</span><br><span class="line">#</span><br><span class="line"># Setting one or the other to 0 disables the feature.</span><br><span class="line">#</span><br><span class="line"># By default min-replicas-to-write is set to 0 (feature disabled) and</span><br><span class="line"># min-replicas-max-lag is set to 10.</span><br><span class="line"></span><br><span class="line"># A Redis master is able to list the address and port of the attached</span><br><span class="line"># replicas in different ways. For example the &quot;INFO replication&quot; section</span><br><span class="line"># offers this information, which is used, among other tools, by</span><br><span class="line"># Redis Sentinel in order to discover replica instances.</span><br><span class="line"># Another place where this info is available is in the output of the</span><br><span class="line"># &quot;ROLE&quot; command of a master.</span><br><span class="line">#</span><br><span class="line"># The listed IP address and port normally reported by a replica is</span><br><span class="line"># obtained in the following way:</span><br><span class="line">#</span><br><span class="line">#   IP: The address is auto detected by checking the peer address</span><br><span class="line">#   of the socket used by the replica to connect with the master.</span><br><span class="line">#</span><br><span class="line">#   Port: The port is communicated by the replica during the replication</span><br><span class="line">#   handshake, and is normally the port that the replica is using to</span><br><span class="line">#   listen for connections.</span><br><span class="line">#</span><br><span class="line"># However when port forwarding or Network Address Translation (NAT) is</span><br><span class="line"># used, the replica may actually be reachable via different IP and port</span><br><span class="line"># pairs. The following two options can be used by a replica in order to</span><br><span class="line"># report to its master a specific set of IP and port, so that both INFO</span><br><span class="line"># and ROLE will report those values.</span><br><span class="line">#</span><br><span class="line"># There is no need to use both the options if you need to override just</span><br><span class="line"># the port or the IP address.</span><br><span class="line">#</span><br><span class="line"># replica-announce-ip 5.5.5.5</span><br><span class="line"># replica-announce-port 1234</span><br><span class="line"></span><br><span class="line">############################### KEYS TRACKING #################################</span><br><span class="line"></span><br><span class="line"># Redis implements server assisted support for client side caching of values.</span><br><span class="line"># This is implemented using an invalidation table that remembers, using</span><br><span class="line"># a radix key indexed by key name, what clients have which keys. In turn</span><br><span class="line"># this is used in order to send invalidation messages to clients. Please</span><br><span class="line"># check this page to understand more about the feature:</span><br><span class="line">#</span><br><span class="line">#   https://redis.io/topics/client-side-caching</span><br><span class="line">#</span><br><span class="line"># When tracking is enabled for a client, all the read only queries are assumed</span><br><span class="line"># to be cached: this will force Redis to store information in the invalidation</span><br><span class="line"># table. When keys are modified, such information is flushed away, and</span><br><span class="line"># invalidation messages are sent to the clients. However if the workload is</span><br><span class="line"># heavily dominated by reads, Redis could use more and more memory in order</span><br><span class="line"># to track the keys fetched by many clients.</span><br><span class="line">#</span><br><span class="line"># For this reason it is possible to configure a maximum fill value for the</span><br><span class="line"># invalidation table. By default it is set to 1M of keys, and once this limit</span><br><span class="line"># is reached, Redis will start to evict keys in the invalidation table</span><br><span class="line"># even if they were not modified, just to reclaim memory: this will in turn</span><br><span class="line"># force the clients to invalidate the cached values. Basically the table</span><br><span class="line"># maximum size is a trade off between the memory you want to spend server</span><br><span class="line"># side to track information about who cached what, and the ability of clients</span><br><span class="line"># to retain cached objects in memory.</span><br><span class="line">#</span><br><span class="line"># If you set the value to 0, it means there are no limits, and Redis will</span><br><span class="line"># retain as many keys as needed in the invalidation table.</span><br><span class="line"># In the &quot;stats&quot; INFO section, you can find information about the number of</span><br><span class="line"># keys in the invalidation table at every given moment.</span><br><span class="line">#</span><br><span class="line"># Note: when key tracking is used in broadcasting mode, no memory is used</span><br><span class="line"># in the server side so this setting is useless.</span><br><span class="line">#</span><br><span class="line"># tracking-table-max-keys 1000000</span><br><span class="line"></span><br><span class="line">################################## SECURITY ###################################</span><br><span class="line"></span><br><span class="line"># Warning: since Redis is pretty fast, an outside user can try up to</span><br><span class="line"># 1 million passwords per second against a modern box. This means that you</span><br><span class="line"># should use very strong passwords, otherwise they will be very easy to break.</span><br><span class="line"># Note that because the password is really a shared secret between the client</span><br><span class="line"># and the server, and should not be memorized by any human, the password</span><br><span class="line"># can be easily a long string from /dev/urandom or whatever, so by using a</span><br><span class="line"># long and unguessable password no brute force attack will be possible.</span><br><span class="line"></span><br><span class="line"># Redis ACL users are defined in the following format:</span><br><span class="line">#</span><br><span class="line">#   user &lt;username&gt; ... acl rules ...</span><br><span class="line">#</span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line">#   user worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</span><br><span class="line">#</span><br><span class="line"># The special username &quot;default&quot; is used for new connections. If this user</span><br><span class="line"># has the &quot;nopass&quot; rule, then new connections will be immediately authenticated</span><br><span class="line"># as the &quot;default&quot; user without the need of any password provided via the</span><br><span class="line"># AUTH command. Otherwise if the &quot;default&quot; user is not flagged with &quot;nopass&quot;</span><br><span class="line"># the connections will start in not authenticated state, and will require</span><br><span class="line"># AUTH (or the HELLO command AUTH option) in order to be authenticated and</span><br><span class="line"># start to work.</span><br><span class="line">#</span><br><span class="line"># The ACL rules that describe what a user can do are the following:</span><br><span class="line">#</span><br><span class="line">#  on           Enable the user: it is possible to authenticate as this user.</span><br><span class="line">#  off          Disable the user: it&#x27;s no longer possible to authenticate</span><br><span class="line">#               with this user, however the already authenticated connections</span><br><span class="line">#               will still work.</span><br><span class="line">#  skip-sanitize-payload    RESTORE dump-payload sanitization is skipped.</span><br><span class="line">#  sanitize-payload         RESTORE dump-payload is sanitized (default).</span><br><span class="line">#  +&lt;command&gt;   Allow the execution of that command.</span><br><span class="line">#               May be used with `|` for allowing subcommands (e.g &quot;+config|get&quot;)</span><br><span class="line">#  -&lt;command&gt;   Disallow the execution of that command.</span><br><span class="line">#               May be used with `|` for blocking subcommands (e.g &quot;-config|set&quot;)</span><br><span class="line">#  +@&lt;category&gt; Allow the execution of all the commands in such category</span><br><span class="line">#               with valid categories are like @admin, @set, @sortedset, ...</span><br><span class="line">#               and so forth, see the full list in the server.c file where</span><br><span class="line">#               the Redis command table is described and defined.</span><br><span class="line">#               The special category @all means all the commands, but currently</span><br><span class="line">#               present in the server, and that will be loaded in the future</span><br><span class="line">#               via modules.</span><br><span class="line">#  +&lt;command&gt;|first-arg  Allow a specific first argument of an otherwise</span><br><span class="line">#                        disabled command. It is only supported on commands with</span><br><span class="line">#                        no sub-commands, and is not allowed as negative form</span><br><span class="line">#                        like -SELECT|1, only additive starting with &quot;+&quot;. This</span><br><span class="line">#                        feature is deprecated and may be removed in the future.</span><br><span class="line">#  allcommands  Alias for +@all. Note that it implies the ability to execute</span><br><span class="line">#               all the future commands loaded via the modules system.</span><br><span class="line">#  nocommands   Alias for -@all.</span><br><span class="line">#  ~&lt;pattern&gt;   Add a pattern of keys that can be mentioned as part of</span><br><span class="line">#               commands. For instance ~* allows all the keys. The pattern</span><br><span class="line">#               is a glob-style pattern like the one of KEYS.</span><br><span class="line">#               It is possible to specify multiple patterns.</span><br><span class="line"># %R~&lt;pattern&gt;  Add key read pattern that specifies which keys can be read </span><br><span class="line">#               from.</span><br><span class="line"># %W~&lt;pattern&gt;  Add key write pattern that specifies which keys can be</span><br><span class="line">#               written to. </span><br><span class="line">#  allkeys      Alias for ~*</span><br><span class="line">#  resetkeys    Flush the list of allowed keys patterns.</span><br><span class="line">#  &amp;&lt;pattern&gt;   Add a glob-style pattern of Pub/Sub channels that can be</span><br><span class="line">#               accessed by the user. It is possible to specify multiple channel</span><br><span class="line">#               patterns.</span><br><span class="line">#  allchannels  Alias for &amp;*</span><br><span class="line">#  resetchannels            Flush the list of allowed channel patterns.</span><br><span class="line">#  &gt;&lt;password&gt;  Add this password to the list of valid password for the user.</span><br><span class="line">#               For example &gt;mypass will add &quot;mypass&quot; to the list.</span><br><span class="line">#               This directive clears the &quot;nopass&quot; flag (see later).</span><br><span class="line">#  &lt;&lt;password&gt;  Remove this password from the list of valid passwords.</span><br><span class="line">#  nopass       All the set passwords of the user are removed, and the user</span><br><span class="line">#               is flagged as requiring no password: it means that every</span><br><span class="line">#               password will work against this user. If this directive is</span><br><span class="line">#               used for the default user, every new connection will be</span><br><span class="line">#               immediately authenticated with the default user without</span><br><span class="line">#               any explicit AUTH command required. Note that the &quot;resetpass&quot;</span><br><span class="line">#               directive will clear this condition.</span><br><span class="line">#  resetpass    Flush the list of allowed passwords. Moreover removes the</span><br><span class="line">#               &quot;nopass&quot; status. After &quot;resetpass&quot; the user has no associated</span><br><span class="line">#               passwords and there is no way to authenticate without adding</span><br><span class="line">#               some password (or setting it as &quot;nopass&quot; later).</span><br><span class="line">#  reset        Performs the following actions: resetpass, resetkeys, off,</span><br><span class="line">#               -@all. The user returns to the same state it has immediately</span><br><span class="line">#               after its creation.</span><br><span class="line"># (&lt;options&gt;)   Create a new selector with the options specified within the</span><br><span class="line">#               parentheses and attach it to the user. Each option should be </span><br><span class="line">#               space separated. The first character must be ( and the last </span><br><span class="line">#               character must be ).</span><br><span class="line"># clearselectors            Remove all of the currently attached selectors. </span><br><span class="line">#                           Note this does not change the &quot;root&quot; user permissions,</span><br><span class="line">#                           which are the permissions directly applied onto the</span><br><span class="line">#                           user (outside the parentheses).</span><br><span class="line">#</span><br><span class="line"># ACL rules can be specified in any order: for instance you can start with</span><br><span class="line"># passwords, then flags, or key patterns. However note that the additive</span><br><span class="line"># and subtractive rules will CHANGE MEANING depending on the ordering.</span><br><span class="line"># For instance see the following example:</span><br><span class="line">#</span><br><span class="line">#   user alice on +@all -DEBUG ~* &gt;somepassword</span><br><span class="line">#</span><br><span class="line"># This will allow &quot;alice&quot; to use all the commands with the exception of the</span><br><span class="line"># DEBUG command, since +@all added all the commands to the set of the commands</span><br><span class="line"># alice can use, and later DEBUG was removed. However if we invert the order</span><br><span class="line"># of two ACL rules the result will be different:</span><br><span class="line">#</span><br><span class="line">#   user alice on -DEBUG +@all ~* &gt;somepassword</span><br><span class="line">#</span><br><span class="line"># Now DEBUG was removed when alice had yet no commands in the set of allowed</span><br><span class="line"># commands, later all the commands are added, so the user will be able to</span><br><span class="line"># execute everything.</span><br><span class="line">#</span><br><span class="line"># Basically ACL rules are processed left-to-right.</span><br><span class="line">#</span><br><span class="line"># The following is a list of command categories and their meanings:</span><br><span class="line"># * keyspace - Writing or reading from keys, databases, or their metadata </span><br><span class="line">#     in a type agnostic way. Includes DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE,</span><br><span class="line">#     KEYS, EXPIRE, TTL, FLUSHALL, etc. Commands that may modify the keyspace,</span><br><span class="line">#     key or metadata will also have `write` category. Commands that only read</span><br><span class="line">#     the keyspace, key or metadata will have the `read` category.</span><br><span class="line"># * read - Reading from keys (values or metadata). Note that commands that don&#x27;t</span><br><span class="line">#     interact with keys, will not have either `read` or `write`.</span><br><span class="line"># * write - Writing to keys (values or metadata)</span><br><span class="line"># * admin - Administrative commands. Normal applications will never need to use</span><br><span class="line">#     these. Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.</span><br><span class="line"># * dangerous - Potentially dangerous (each should be considered with care for</span><br><span class="line">#     various reasons). This includes FLUSHALL, MIGRATE, RESTORE, SORT, KEYS,</span><br><span class="line">#     CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, etc.</span><br><span class="line"># * connection - Commands affecting the connection or other connections.</span><br><span class="line">#     This includes AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, etc.</span><br><span class="line"># * blocking - Potentially blocking the connection until released by another</span><br><span class="line">#     command.</span><br><span class="line"># * fast - Fast O(1) commands. May loop on the number of arguments, but not the</span><br><span class="line">#     number of elements in the key.</span><br><span class="line"># * slow - All commands that are not Fast.</span><br><span class="line"># * pubsub - PUBLISH / SUBSCRIBE related</span><br><span class="line"># * transaction - WATCH / MULTI / EXEC related commands.</span><br><span class="line"># * scripting - Scripting related.</span><br><span class="line"># * set - Data type: sets related.</span><br><span class="line"># * sortedset - Data type: zsets related.</span><br><span class="line"># * list - Data type: lists related.</span><br><span class="line"># * hash - Data type: hashes related.</span><br><span class="line"># * string - Data type: strings related.</span><br><span class="line"># * bitmap - Data type: bitmaps related.</span><br><span class="line"># * hyperloglog - Data type: hyperloglog related.</span><br><span class="line"># * geo - Data type: geo related.</span><br><span class="line"># * stream - Data type: streams related.</span><br><span class="line">#</span><br><span class="line"># For more information about ACL configuration please refer to</span><br><span class="line"># the Redis web site at https://redis.io/topics/acl</span><br><span class="line"></span><br><span class="line"># ACL LOG</span><br><span class="line">#</span><br><span class="line"># The ACL Log tracks failed commands and authentication events associated</span><br><span class="line"># with ACLs. The ACL Log is useful to troubleshoot failed commands blocked</span><br><span class="line"># by ACLs. The ACL Log is stored in memory. You can reclaim memory with</span><br><span class="line"># ACL LOG RESET. Define the maximum entry length of the ACL Log below.</span><br><span class="line">acllog-max-len 128</span><br><span class="line"></span><br><span class="line"># Using an external ACL file</span><br><span class="line">#</span><br><span class="line"># Instead of configuring users here in this file, it is possible to use</span><br><span class="line"># a stand-alone file just listing users. The two methods cannot be mixed:</span><br><span class="line"># if you configure users here and at the same time you activate the external</span><br><span class="line"># ACL file, the server will refuse to start.</span><br><span class="line">#</span><br><span class="line"># The format of the external ACL user file is exactly the same as the</span><br><span class="line"># format that is used inside redis.conf to describe users.</span><br><span class="line">#</span><br><span class="line"># aclfile /etc/redis/users.acl</span><br><span class="line"></span><br><span class="line"># IMPORTANT NOTE: starting with Redis 6 &quot;requirepass&quot; is just a compatibility</span><br><span class="line"># layer on top of the new ACL system. The option effect will be just setting</span><br><span class="line"># the password for the default user. Clients will still authenticate using</span><br><span class="line"># AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;</span><br><span class="line"># if they follow the new protocol: both will work.</span><br><span class="line">#</span><br><span class="line"># The requirepass is not compatible with aclfile option and the ACL LOAD</span><br><span class="line"># command, these will cause requirepass to be ignored.</span><br><span class="line">#</span><br><span class="line"># requirepass 979508.a</span><br><span class="line"></span><br><span class="line"># New users are initialized with restrictive permissions by default, via the</span><br><span class="line"># equivalent of this ACL rule &#x27;off resetkeys -@all&#x27;. Starting with Redis 6.2, it</span><br><span class="line"># is possible to manage access to Pub/Sub channels with ACL rules as well. The</span><br><span class="line"># default Pub/Sub channels permission if new users is controlled by the</span><br><span class="line"># acl-pubsub-default configuration directive, which accepts one of these values:</span><br><span class="line">#</span><br><span class="line"># allchannels: grants access to all Pub/Sub channels</span><br><span class="line"># resetchannels: revokes access to all Pub/Sub channels</span><br><span class="line">#</span><br><span class="line"># From Redis 7.0, acl-pubsub-default defaults to &#x27;resetchannels&#x27; permission.</span><br><span class="line">#</span><br><span class="line"># acl-pubsub-default resetchannels</span><br><span class="line"></span><br><span class="line"># Command renaming (DEPRECATED).</span><br><span class="line">#</span><br><span class="line"># ------------------------------------------------------------------------</span><br><span class="line"># WARNING: avoid using this option if possible. Instead use ACLs to remove</span><br><span class="line"># commands from the default user, and put them only in some admin user you</span><br><span class="line"># create for administrative purposes.</span><br><span class="line"># ------------------------------------------------------------------------</span><br><span class="line">#</span><br><span class="line"># It is possible to change the name of dangerous commands in a shared</span><br><span class="line"># environment. For instance the CONFIG command may be renamed into something</span><br><span class="line"># hard to guess so that it will still be available for internal-use tools</span><br><span class="line"># but not available for general clients.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line">#</span><br><span class="line"># It is also possible to completely kill a command by renaming it into</span><br><span class="line"># an empty string:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG &quot;&quot;</span><br><span class="line">#</span><br><span class="line"># Please note that changing the name of commands that are logged into the</span><br><span class="line"># AOF file or transmitted to replicas may cause problems.</span><br><span class="line"></span><br><span class="line">################################### CLIENTS ####################################</span><br><span class="line"></span><br><span class="line"># Set the max number of connected clients at the same time. By default</span><br><span class="line"># this limit is set to 10000 clients, however if the Redis server is not</span><br><span class="line"># able to configure the process file limit to allow for the specified limit</span><br><span class="line"># the max number of allowed clients is set to the current file limit</span><br><span class="line"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span><br><span class="line">#</span><br><span class="line"># Once the limit is reached Redis will close all the new connections sending</span><br><span class="line"># an error &#x27;max number of clients reached&#x27;.</span><br><span class="line">#</span><br><span class="line"># IMPORTANT: When Redis Cluster is used, the max number of connections is also</span><br><span class="line"># shared with the cluster bus: every node in the cluster will use two</span><br><span class="line"># connections, one incoming and another outgoing. It is important to size the</span><br><span class="line"># limit accordingly in case of very large clusters.</span><br><span class="line">#</span><br><span class="line"># maxclients 10000</span><br><span class="line"></span><br><span class="line">############################## MEMORY MANAGEMENT ################################</span><br><span class="line"></span><br><span class="line"># Set a memory usage limit to the specified amount of bytes.</span><br><span class="line"># When the memory limit is reached Redis will try to remove keys</span><br><span class="line"># according to the eviction policy selected (see maxmemory-policy).</span><br><span class="line">#</span><br><span class="line"># If Redis can&#x27;t remove keys according to the policy, or if the policy is</span><br><span class="line"># set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands</span><br><span class="line"># that would use more memory, like SET, LPUSH, and so on, and will continue</span><br><span class="line"># to reply to read-only commands like GET.</span><br><span class="line">#</span><br><span class="line"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span><br><span class="line"># set a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy).</span><br><span class="line">#</span><br><span class="line"># WARNING: If you have replicas attached to an instance with maxmemory on,</span><br><span class="line"># the size of the output buffers needed to feed the replicas are subtracted</span><br><span class="line"># from the used memory count, so that network problems / resyncs will</span><br><span class="line"># not trigger a loop where keys are evicted, and in turn the output</span><br><span class="line"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span><br><span class="line"># of more keys, and so forth until the database is completely emptied.</span><br><span class="line">#</span><br><span class="line"># In short... if you have replicas attached it is suggested that you set a lower</span><br><span class="line"># limit for maxmemory so that there is some free RAM on the system for replica</span><br><span class="line"># output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;).</span><br><span class="line">#</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"># is reached. You can select one from the following behaviors:</span><br><span class="line">#</span><br><span class="line"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span><br><span class="line"># allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><span class="line"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span><br><span class="line"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span><br><span class="line"># volatile-random -&gt; Remove a random key having an expire set.</span><br><span class="line"># allkeys-random -&gt; Remove a random key, any key.</span><br><span class="line"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><br><span class="line"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span><br><span class="line">#</span><br><span class="line"># LRU means Least Recently Used</span><br><span class="line"># LFU means Least Frequently Used</span><br><span class="line">#</span><br><span class="line"># Both LRU, LFU and volatile-ttl are implemented using approximated</span><br><span class="line"># randomized algorithms.</span><br><span class="line">#</span><br><span class="line"># Note: with any of the above policies, when there are no suitable keys for</span><br><span class="line"># eviction, Redis will return an error on write operations that require</span><br><span class="line"># more memory. These are usually commands that create new keys, add data or</span><br><span class="line"># modify existing keys. A few examples are: SET, INCR, HSET, LPUSH, SUNIONSTORE,</span><br><span class="line"># SORT (due to the STORE argument), and EXEC (if the transaction includes any</span><br><span class="line"># command that requires memory).</span><br><span class="line">#</span><br><span class="line"># The default is:</span><br><span class="line">#</span><br><span class="line"># maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span><br><span class="line"># algorithms (in order to save memory), so you can tune it for speed or</span><br><span class="line"># accuracy. By default Redis will check five keys and pick the one that was</span><br><span class="line"># used least recently, you can change the sample size using the following</span><br><span class="line"># configuration directive.</span><br><span class="line">#</span><br><span class="line"># The default of 5 produces good enough results. 10 Approximates very closely</span><br><span class="line"># true LRU but costs more CPU. 3 is faster but not very accurate.</span><br><span class="line">#</span><br><span class="line"># maxmemory-samples 5</span><br><span class="line"></span><br><span class="line"># Eviction processing is designed to function well with the default setting.</span><br><span class="line"># If there is an unusually large amount of write traffic, this value may need to</span><br><span class="line"># be increased.  Decreasing this value may reduce latency at the risk of</span><br><span class="line"># eviction processing effectiveness</span><br><span class="line">#   0 = minimum latency, 10 = default, 100 = process without regard to latency</span><br><span class="line">#</span><br><span class="line"># maxmemory-eviction-tenacity 10</span><br><span class="line"></span><br><span class="line"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span><br><span class="line"># (unless it is promoted to master after a failover or manually). It means</span><br><span class="line"># that the eviction of keys will be just handled by the master, sending the</span><br><span class="line"># DEL commands to the replica as keys evict in the master side.</span><br><span class="line">#</span><br><span class="line"># This behavior ensures that masters and replicas stay consistent, and is usually</span><br><span class="line"># what you want, however if your replica is writable, or you want the replica</span><br><span class="line"># to have a different memory setting, and you are sure all the writes performed</span><br><span class="line"># to the replica are idempotent, then you may change this default (but be sure</span><br><span class="line"># to understand what you are doing).</span><br><span class="line">#</span><br><span class="line"># Note that since the replica by default does not evict, it may end using more</span><br><span class="line"># memory than the one set via maxmemory (there are certain buffers that may</span><br><span class="line"># be larger on the replica, or data structures may sometimes take more memory</span><br><span class="line"># and so forth). So make sure you monitor your replicas and make sure they</span><br><span class="line"># have enough memory to never hit a real out-of-memory condition before the</span><br><span class="line"># master hits the configured maxmemory setting.</span><br><span class="line">#</span><br><span class="line"># replica-ignore-maxmemory yes</span><br><span class="line"></span><br><span class="line"># Redis reclaims expired keys in two ways: upon access when those keys are</span><br><span class="line"># found to be expired, and also in background, in what is called the</span><br><span class="line"># &quot;active expire key&quot;. The key space is slowly and interactively scanned</span><br><span class="line"># looking for expired keys to reclaim, so that it is possible to free memory</span><br><span class="line"># of keys that are expired and will never be accessed again in a short time.</span><br><span class="line">#</span><br><span class="line"># The default effort of the expire cycle will try to avoid having more than</span><br><span class="line"># ten percent of expired keys still in memory, and will try to avoid consuming</span><br><span class="line"># more than 25% of total memory and to add latency to the system. However</span><br><span class="line"># it is possible to increase the expire &quot;effort&quot; that is normally set to</span><br><span class="line"># &quot;1&quot;, to a greater value, up to the value &quot;10&quot;. At its maximum value the</span><br><span class="line"># system will use more CPU, longer cycles (and technically may introduce</span><br><span class="line"># more latency), and will tolerate less already expired keys still present</span><br><span class="line"># in the system. It&#x27;s a tradeoff between memory, CPU and latency.</span><br><span class="line">#</span><br><span class="line"># active-expire-effort 1</span><br><span class="line"></span><br><span class="line">############################# LAZY FREEING ####################################</span><br><span class="line"></span><br><span class="line"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span><br><span class="line"># deletion of the object. It means that the server stops processing new commands</span><br><span class="line"># in order to reclaim all the memory associated with an object in a synchronous</span><br><span class="line"># way. If the key deleted is associated with a small object, the time needed</span><br><span class="line"># in order to execute the DEL command is very small and comparable to most other</span><br><span class="line"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span><br><span class="line"># aggregated value containing millions of elements, the server can block for</span><br><span class="line"># a long time (even seconds) in order to complete the operation.</span><br><span class="line">#</span><br><span class="line"># For the above reasons Redis also offers non blocking deletion primitives</span><br><span class="line"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span><br><span class="line"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span><br><span class="line"># are executed in constant time. Another thread will incrementally free the</span><br><span class="line"># object in the background as fast as possible.</span><br><span class="line">#</span><br><span class="line"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span><br><span class="line"># It&#x27;s up to the design of the application to understand when it is a good</span><br><span class="line"># idea to use one or the other. However the Redis server sometimes has to</span><br><span class="line"># delete keys or flush the whole database as a side effect of other operations.</span><br><span class="line"># Specifically Redis deletes objects independently of a user call in the</span><br><span class="line"># following scenarios:</span><br><span class="line">#</span><br><span class="line"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span><br><span class="line">#    in order to make room for new data, without going over the specified</span><br><span class="line">#    memory limit.</span><br><span class="line"># 2) Because of expire: when a key with an associated time to live (see the</span><br><span class="line">#    EXPIRE command) must be deleted from memory.</span><br><span class="line"># 3) Because of a side effect of a command that stores data on a key that may</span><br><span class="line">#    already exist. For example the RENAME command may delete the old key</span><br><span class="line">#    content when it is replaced with another one. Similarly SUNIONSTORE</span><br><span class="line">#    or SORT with STORE option may delete existing keys. The SET command</span><br><span class="line">#    itself removes any old content of the specified key in order to replace</span><br><span class="line">#    it with the specified string.</span><br><span class="line"># 4) During replication, when a replica performs a full resynchronization with</span><br><span class="line">#    its master, the content of the whole database is removed in order to</span><br><span class="line">#    load the RDB file just transferred.</span><br><span class="line">#</span><br><span class="line"># In all the above cases the default is to delete objects in a blocking way,</span><br><span class="line"># like if DEL was called. However you can configure each case specifically</span><br><span class="line"># in order to instead release memory in a non-blocking way like if UNLINK</span><br><span class="line"># was called, using the following configuration directives.</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line"># It is also possible, for the case when to replace the user code DEL calls</span><br><span class="line"># with UNLINK calls is not easy, to modify the default behavior of the DEL</span><br><span class="line"># command to act exactly like UNLINK, using the following configuration</span><br><span class="line"># directive:</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-user-del no</span><br><span class="line"></span><br><span class="line"># FLUSHDB, FLUSHALL, SCRIPT FLUSH and FUNCTION FLUSH support both asynchronous and synchronous</span><br><span class="line"># deletion, which can be controlled by passing the [SYNC|ASYNC] flags into the</span><br><span class="line"># commands. When neither flag is passed, this directive will be used to determine</span><br><span class="line"># if the data should be deleted asynchronously.</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-user-flush no</span><br><span class="line"></span><br><span class="line">################################ THREADED I/O #################################</span><br><span class="line"></span><br><span class="line"># Redis is mostly single threaded, however there are certain threaded</span><br><span class="line"># operations such as UNLINK, slow I/O accesses and other things that are</span><br><span class="line"># performed on side threads.</span><br><span class="line">#</span><br><span class="line"># Now it is also possible to handle Redis clients socket reads and writes</span><br><span class="line"># in different I/O threads. Since especially writing is so slow, normally</span><br><span class="line"># Redis users use pipelining in order to speed up the Redis performances per</span><br><span class="line"># core, and spawn multiple instances in order to scale more. Using I/O</span><br><span class="line"># threads it is possible to easily speedup two times Redis without resorting</span><br><span class="line"># to pipelining nor sharding of the instance.</span><br><span class="line">#</span><br><span class="line"># By default threading is disabled, we suggest enabling it only in machines</span><br><span class="line"># that have at least 4 or more cores, leaving at least one spare core.</span><br><span class="line"># Using more than 8 threads is unlikely to help much. We also recommend using</span><br><span class="line"># threaded I/O only if you actually have performance problems, with Redis</span><br><span class="line"># instances being able to use a quite big percentage of CPU time, otherwise</span><br><span class="line"># there is no point in using this feature.</span><br><span class="line">#</span><br><span class="line"># So for instance if you have a four cores boxes, try to use 2 or 3 I/O</span><br><span class="line"># threads, if you have a 8 cores, try to use 6 threads. In order to</span><br><span class="line"># enable I/O threads use the following configuration directive:</span><br><span class="line">#</span><br><span class="line"># io-threads 4</span><br><span class="line">#</span><br><span class="line"># Setting io-threads to 1 will just use the main thread as usual.</span><br><span class="line"># When I/O threads are enabled, we only use threads for writes, that is</span><br><span class="line"># to thread the write(2) syscall and transfer the client buffers to the</span><br><span class="line"># socket. However it is also possible to enable threading of reads and</span><br><span class="line"># protocol parsing using the following configuration directive, by setting</span><br><span class="line"># it to yes:</span><br><span class="line">#</span><br><span class="line"># io-threads-do-reads no</span><br><span class="line">#</span><br><span class="line"># Usually threading reads doesn&#x27;t help much.</span><br><span class="line">#</span><br><span class="line"># NOTE 1: This configuration directive cannot be changed at runtime via</span><br><span class="line"># CONFIG SET. Also, this feature currently does not work when SSL is</span><br><span class="line"># enabled.</span><br><span class="line">#</span><br><span class="line"># NOTE 2: If you want to test the Redis speedup using redis-benchmark, make</span><br><span class="line"># sure you also run the benchmark itself in threaded mode, using the</span><br><span class="line"># --threads option to match the number of Redis threads, otherwise you&#x27;ll not</span><br><span class="line"># be able to notice the improvements.</span><br><span class="line"></span><br><span class="line">############################ KERNEL OOM CONTROL ##############################</span><br><span class="line"></span><br><span class="line"># On Linux, it is possible to hint the kernel OOM killer on what processes</span><br><span class="line"># should be killed first when out of memory.</span><br><span class="line">#</span><br><span class="line"># Enabling this feature makes Redis actively control the oom_score_adj value</span><br><span class="line"># for all its processes, depending on their role. The default scores will</span><br><span class="line"># attempt to have background child processes killed before all others, and</span><br><span class="line"># replicas killed before masters.</span><br><span class="line">#</span><br><span class="line"># Redis supports these options:</span><br><span class="line">#</span><br><span class="line"># no:       Don&#x27;t make changes to oom-score-adj (default).</span><br><span class="line"># yes:      Alias to &quot;relative&quot; see below.</span><br><span class="line"># absolute: Values in oom-score-adj-values are written as is to the kernel.</span><br><span class="line"># relative: Values are used relative to the initial value of oom_score_adj when</span><br><span class="line">#           the server starts and are then clamped to a range of -1000 to 1000.</span><br><span class="line">#           Because typically the initial value is 0, they will often match the</span><br><span class="line">#           absolute values.</span><br><span class="line">oom-score-adj no</span><br><span class="line"></span><br><span class="line"># When oom-score-adj is used, this directive controls the specific values used</span><br><span class="line"># for master, replica and background child processes. Values range -2000 to</span><br><span class="line"># 2000 (higher means more likely to be killed).</span><br><span class="line">#</span><br><span class="line"># Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)</span><br><span class="line"># can freely increase their value, but not decrease it below its initial</span><br><span class="line"># settings. This means that setting oom-score-adj to &quot;relative&quot; and setting the</span><br><span class="line"># oom-score-adj-values to positive values will always succeed.</span><br><span class="line">oom-score-adj-values 0 200 800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#################### KERNEL transparent hugepage CONTROL ######################</span><br><span class="line"></span><br><span class="line"># Usually the kernel Transparent Huge Pages control is set to &quot;madvise&quot; or</span><br><span class="line"># or &quot;never&quot; by default (/sys/kernel/mm/transparent_hugepage/enabled), in which</span><br><span class="line"># case this config has no effect. On systems in which it is set to &quot;always&quot;,</span><br><span class="line"># redis will attempt to disable it specifically for the redis process in order</span><br><span class="line"># to avoid latency problems specifically with fork(2) and CoW.</span><br><span class="line"># If for some reason you prefer to keep it enabled, you can set this config to</span><br><span class="line"># &quot;no&quot; and the kernel global to &quot;always&quot;.</span><br><span class="line"></span><br><span class="line">disable-thp yes</span><br><span class="line"></span><br><span class="line">############################## APPEND ONLY MODE ###############################</span><br><span class="line"></span><br><span class="line"># By default Redis asynchronously dumps the dataset on disk. This mode is</span><br><span class="line"># good enough in many applications, but an issue with the Redis process or</span><br><span class="line"># a power outage may result into a few minutes of writes lost (depending on</span><br><span class="line"># the configured save points).</span><br><span class="line">#</span><br><span class="line"># The Append Only File is an alternative persistence mode that provides</span><br><span class="line"># much better durability. For instance using the default data fsync policy</span><br><span class="line"># (see later in the config file) Redis can lose just one second of writes in a</span><br><span class="line"># dramatic event like a server power outage, or a single write if something</span><br><span class="line"># wrong with the Redis process itself happens, but the operating system is</span><br><span class="line"># still running correctly.</span><br><span class="line">#</span><br><span class="line"># AOF and RDB persistence can be enabled at the same time without problems.</span><br><span class="line"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span><br><span class="line"># with the better durability guarantees.</span><br><span class="line">#</span><br><span class="line"># Please check https://redis.io/topics/persistence for more information.</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># The base name of the append only file.</span><br><span class="line">#</span><br><span class="line"># Redis 7 and newer use a set of append-only files to persist the dataset</span><br><span class="line"># and changes applied to it. There are two basic types of files in use:</span><br><span class="line">#</span><br><span class="line"># - Base files, which are a snapshot representing the complete state of the</span><br><span class="line">#   dataset at the time the file was created. Base files can be either in</span><br><span class="line">#   the form of RDB (binary serialized) or AOF (textual commands).</span><br><span class="line"># - Incremental files, which contain additional commands that were applied</span><br><span class="line">#   to the dataset following the previous file.</span><br><span class="line">#</span><br><span class="line"># In addition, manifest files are used to track the files and the order in</span><br><span class="line"># which they were created and should be applied.</span><br><span class="line">#</span><br><span class="line"># Append-only file names are created by Redis following a specific pattern.</span><br><span class="line"># The file name&#x27;s prefix is based on the &#x27;appendfilename&#x27; configuration</span><br><span class="line"># parameter, followed by additional information about the sequence and type.</span><br><span class="line">#</span><br><span class="line"># For example, if appendfilename is set to appendonly.aof, the following file</span><br><span class="line"># names could be derived:</span><br><span class="line">#</span><br><span class="line"># - appendonly.aof.1.base.rdb as a base file.</span><br><span class="line"># - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof as incremental files.</span><br><span class="line"># - appendonly.aof.manifest as a manifest file.</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># For convenience, Redis stores all persistent append-only files in a dedicated</span><br><span class="line"># directory. The name of the directory is determined by the appenddirname</span><br><span class="line"># configuration parameter.</span><br><span class="line"></span><br><span class="line">appenddirname &quot;appendonlydir&quot;</span><br><span class="line"></span><br><span class="line"># The fsync() call tells the Operating System to actually write data on disk</span><br><span class="line"># instead of waiting for more data in the output buffer. Some OS will really flush</span><br><span class="line"># data on disk, some other OS will just try to do it ASAP.</span><br><span class="line">#</span><br><span class="line"># Redis supports three different modes:</span><br><span class="line">#</span><br><span class="line"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span><br><span class="line"># always: fsync after every write to the append only log. Slow, Safest.</span><br><span class="line"># everysec: fsync only one time every second. Compromise.</span><br><span class="line">#</span><br><span class="line"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span><br><span class="line"># speed and data safety. It&#x27;s up to you to understand if you can relax this to</span><br><span class="line"># &quot;no&quot; that will let the operating system flush the output buffer when</span><br><span class="line"># it wants, for better performances (but if you can live with the idea of</span><br><span class="line"># some data loss consider the default persistence mode that&#x27;s snapshotting),</span><br><span class="line"># or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than</span><br><span class="line"># everysec.</span><br><span class="line">#</span><br><span class="line"># More details please check the following article:</span><br><span class="line"># http://antirez.com/post/redis-persistence-demystified.html</span><br><span class="line">#</span><br><span class="line"># If unsure, use &quot;everysec&quot;.</span><br><span class="line"></span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># When the AOF fsync policy is set to always or everysec, and a background</span><br><span class="line"># saving process (a background save or AOF log background rewriting) is</span><br><span class="line"># performing a lot of I/O against the disk, in some Linux configurations</span><br><span class="line"># Redis may block too long on the fsync() call. Note that there is no fix for</span><br><span class="line"># this currently, as even performing fsync in a different thread will block</span><br><span class="line"># our synchronous write(2) call.</span><br><span class="line">#</span><br><span class="line"># In order to mitigate this problem it&#x27;s possible to use the following option</span><br><span class="line"># that will prevent fsync() from being called in the main process while a</span><br><span class="line"># BGSAVE or BGREWRITEAOF is in progress.</span><br><span class="line">#</span><br><span class="line"># This means that while another child is saving, the durability of Redis is</span><br><span class="line"># the same as &quot;appendfsync no&quot;. In practical terms, this means that it is</span><br><span class="line"># possible to lose up to 30 seconds of log in the worst scenario (with the</span><br><span class="line"># default Linux settings).</span><br><span class="line">#</span><br><span class="line"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span><br><span class="line"># &quot;no&quot; that is the safest pick from the point of view of durability.</span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># Automatic rewrite of the append only file.</span><br><span class="line"># Redis is able to automatically rewrite the log file implicitly calling</span><br><span class="line"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span><br><span class="line">#</span><br><span class="line"># This is how it works: Redis remembers the size of the AOF file after the</span><br><span class="line"># latest rewrite (if no rewrite has happened since the restart, the size of</span><br><span class="line"># the AOF at startup is used).</span><br><span class="line">#</span><br><span class="line"># This base size is compared to the current size. If the current size is</span><br><span class="line"># bigger than the specified percentage, the rewrite is triggered. Also</span><br><span class="line"># you need to specify a minimal size for the AOF file to be rewritten, this</span><br><span class="line"># is useful to avoid rewriting the AOF file even if the percentage increase</span><br><span class="line"># is reached but it is still pretty small.</span><br><span class="line">#</span><br><span class="line"># Specify a percentage of zero in order to disable the automatic AOF</span><br><span class="line"># rewrite feature.</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"># An AOF file may be found to be truncated at the end during the Redis</span><br><span class="line"># startup process, when the AOF data gets loaded back into memory.</span><br><span class="line"># This may happen when the system where Redis is running</span><br><span class="line"># crashes, especially when an ext4 filesystem is mounted without the</span><br><span class="line"># data=ordered option (however this can&#x27;t happen when Redis itself</span><br><span class="line"># crashes or aborts but the operating system still works correctly).</span><br><span class="line">#</span><br><span class="line"># Redis can either exit with an error when this happens, or load as much</span><br><span class="line"># data as possible (the default now) and start if the AOF file is found</span><br><span class="line"># to be truncated at the end. The following option controls this behavior.</span><br><span class="line">#</span><br><span class="line"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span><br><span class="line"># the Redis server starts emitting a log to inform the user of the event.</span><br><span class="line"># Otherwise if the option is set to no, the server aborts with an error</span><br><span class="line"># and refuses to start. When the option is set to no, the user requires</span><br><span class="line"># to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span><br><span class="line"># the server.</span><br><span class="line">#</span><br><span class="line"># Note that if the AOF file will be found to be corrupted in the middle</span><br><span class="line"># the server will still exit with an error. This option only applies when</span><br><span class="line"># Redis will try to read more data from the AOF file but not enough bytes</span><br><span class="line"># will be found.</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"># Redis can create append-only base files in either RDB or AOF formats. Using</span><br><span class="line"># the RDB format is always faster and more efficient, and disabling it is only</span><br><span class="line"># supported for backward compatibility purposes.</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line"># Redis supports recording timestamp annotations in the AOF to support restoring</span><br><span class="line"># the data from a specific point-in-time. However, using this capability changes</span><br><span class="line"># the AOF format in a way that may not be compatible with existing AOF parsers.</span><br><span class="line">aof-timestamp-enabled no</span><br><span class="line"></span><br><span class="line">################################ SHUTDOWN #####################################</span><br><span class="line"></span><br><span class="line"># Maximum time to wait for replicas when shutting down, in seconds.</span><br><span class="line">#</span><br><span class="line"># During shut down, a grace period allows any lagging replicas to catch up with</span><br><span class="line"># the latest replication offset before the master exists. This period can</span><br><span class="line"># prevent data loss, especially for deployments without configured disk backups.</span><br><span class="line">#</span><br><span class="line"># The &#x27;shutdown-timeout&#x27; value is the grace period&#x27;s duration in seconds. It is</span><br><span class="line"># only applicable when the instance has replicas. To disable the feature, set</span><br><span class="line"># the value to 0.</span><br><span class="line">#</span><br><span class="line"># shutdown-timeout 10</span><br><span class="line"></span><br><span class="line"># When Redis receives a SIGINT or SIGTERM, shutdown is initiated and by default</span><br><span class="line"># an RDB snapshot is written to disk in a blocking operation if save points are configured.</span><br><span class="line"># The options used on signaled shutdown can include the following values:</span><br><span class="line"># default:  Saves RDB snapshot only if save points are configured.</span><br><span class="line">#           Waits for lagging replicas to catch up.</span><br><span class="line"># save:     Forces a DB saving operation even if no save points are configured.</span><br><span class="line"># nosave:   Prevents DB saving operation even if one or more save points are configured.</span><br><span class="line"># now:      Skips waiting for lagging replicas.</span><br><span class="line"># force:    Ignores any errors that would normally prevent the server from exiting.</span><br><span class="line">#</span><br><span class="line"># Any combination of values is allowed as long as &quot;save&quot; and &quot;nosave&quot; are not set simultaneously.</span><br><span class="line"># Example: &quot;nosave force now&quot;</span><br><span class="line">#</span><br><span class="line"># shutdown-on-sigint default</span><br><span class="line"># shutdown-on-sigterm default</span><br><span class="line"></span><br><span class="line">################ NON-DETERMINISTIC LONG BLOCKING COMMANDS #####################</span><br><span class="line"></span><br><span class="line"># Maximum time in milliseconds for EVAL scripts, functions and in some cases</span><br><span class="line"># modules&#x27; commands before Redis can start processing or rejecting other clients.</span><br><span class="line">#</span><br><span class="line"># If the maximum execution time is reached Redis will start to reply to most</span><br><span class="line"># commands with a BUSY error.</span><br><span class="line">#</span><br><span class="line"># In this state Redis will only allow a handful of commands to be executed.</span><br><span class="line"># For instance, SCRIPT KILL, FUNCTION KILL, SHUTDOWN NOSAVE and possibly some</span><br><span class="line"># module specific &#x27;allow-busy&#x27; commands.</span><br><span class="line">#</span><br><span class="line"># SCRIPT KILL and FUNCTION KILL will only be able to stop a script that did not</span><br><span class="line"># yet call any write commands, so SHUTDOWN NOSAVE may be the only way to stop</span><br><span class="line"># the server in the case a write command was already issued by the script when</span><br><span class="line"># the user doesn&#x27;t want to wait for the natural termination of the script.</span><br><span class="line">#</span><br><span class="line"># The default is 5 seconds. It is possible to set it to 0 or a negative value</span><br><span class="line"># to disable this mechanism (uninterrupted execution). Note that in the past</span><br><span class="line"># this config had a different name, which is now an alias, so both of these do</span><br><span class="line"># the same:</span><br><span class="line"># lua-time-limit 5000</span><br><span class="line"># busy-reply-threshold 5000</span><br><span class="line"></span><br><span class="line">################################ REDIS CLUSTER  ###############################</span><br><span class="line"></span><br><span class="line"># Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are</span><br><span class="line"># started as cluster nodes can. In order to start a Redis instance as a</span><br><span class="line"># cluster node enable the cluster support uncommenting the following:</span><br><span class="line">#</span><br><span class="line"># cluster-enabled yes</span><br><span class="line"></span><br><span class="line"># Every cluster node has a cluster configuration file. This file is not</span><br><span class="line"># intended to be edited by hand. It is created and updated by Redis nodes.</span><br><span class="line"># Every Redis Cluster node requires a different cluster configuration file.</span><br><span class="line"># Make sure that instances running in the same system do not have</span><br><span class="line"># overlapping cluster configuration file names.</span><br><span class="line">#</span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"></span><br><span class="line"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span><br><span class="line"># for it to be considered in failure state.</span><br><span class="line"># Most other internal time limits are a multiple of the node timeout.</span><br><span class="line">#</span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"></span><br><span class="line"># The cluster port is the port that the cluster bus will listen for inbound connections on. When set </span><br><span class="line"># to the default value, 0, it will be bound to the command port + 10000. Setting this value requires </span><br><span class="line"># you to specify the cluster bus port when executing cluster meet.</span><br><span class="line"># cluster-port 0</span><br><span class="line"></span><br><span class="line"># A replica of a failing master will avoid to start a failover if its data</span><br><span class="line"># looks too old.</span><br><span class="line">#</span><br><span class="line"># There is no simple way for a replica to actually have an exact measure of</span><br><span class="line"># its &quot;data age&quot;, so the following two checks are performed:</span><br><span class="line">#</span><br><span class="line"># 1) If there are multiple replicas able to failover, they exchange messages</span><br><span class="line">#    in order to try to give an advantage to the replica with the best</span><br><span class="line">#    replication offset (more data from the master processed).</span><br><span class="line">#    Replicas will try to get their rank by offset, and apply to the start</span><br><span class="line">#    of the failover a delay proportional to their rank.</span><br><span class="line">#</span><br><span class="line"># 2) Every single replica computes the time of the last interaction with</span><br><span class="line">#    its master. This can be the last ping or command received (if the master</span><br><span class="line">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</span><br><span class="line">#    disconnection with the master (if the replication link is currently down).</span><br><span class="line">#    If the last interaction is too old, the replica will not try to failover</span><br><span class="line">#    at all.</span><br><span class="line">#</span><br><span class="line"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span><br><span class="line"># the failover if, since the last interaction with the master, the time</span><br><span class="line"># elapsed is greater than:</span><br><span class="line">#</span><br><span class="line">#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span><br><span class="line">#</span><br><span class="line"># So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor</span><br><span class="line"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><br><span class="line"># replica will not try to failover if it was not able to talk with the master</span><br><span class="line"># for longer than 310 seconds.</span><br><span class="line">#</span><br><span class="line"># A large cluster-replica-validity-factor may allow replicas with too old data to failover</span><br><span class="line"># a master, while a too small value may prevent the cluster from being able to</span><br><span class="line"># elect a replica at all.</span><br><span class="line">#</span><br><span class="line"># For maximum availability, it is possible to set the cluster-replica-validity-factor</span><br><span class="line"># to a value of 0, which means, that replicas will always try to failover the</span><br><span class="line"># master regardless of the last time they interacted with the master.</span><br><span class="line"># (However they&#x27;ll always try to apply a delay proportional to their</span><br><span class="line"># offset rank).</span><br><span class="line">#</span><br><span class="line"># Zero is the only value able to guarantee that when all the partitions heal</span><br><span class="line"># the cluster will always be able to continue.</span><br><span class="line">#</span><br><span class="line"># cluster-replica-validity-factor 10</span><br><span class="line"></span><br><span class="line"># Cluster replicas are able to migrate to orphaned masters, that are masters</span><br><span class="line"># that are left without working replicas. This improves the cluster ability</span><br><span class="line"># to resist to failures as otherwise an orphaned master can&#x27;t be failed over</span><br><span class="line"># in case of failure if it has no working replicas.</span><br><span class="line">#</span><br><span class="line"># Replicas migrate to orphaned masters only if there are still at least a</span><br><span class="line"># given number of other working replicas for their old master. This number</span><br><span class="line"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span><br><span class="line"># will migrate only if there is at least 1 other working replica for its master</span><br><span class="line"># and so forth. It usually reflects the number of replicas you want for every</span><br><span class="line"># master in your cluster.</span><br><span class="line">#</span><br><span class="line"># Default is 1 (replicas migrate only if their masters remain with at least</span><br><span class="line"># one replica). To disable migration just set it to a very large value or</span><br><span class="line"># set cluster-allow-replica-migration to &#x27;no&#x27;.</span><br><span class="line"># A value of 0 can be set but is useful only for debugging and dangerous</span><br><span class="line"># in production.</span><br><span class="line">#</span><br><span class="line"># cluster-migration-barrier 1</span><br><span class="line"></span><br><span class="line"># Turning off this option allows to use less automatic cluster configuration.</span><br><span class="line"># It both disables migration to orphaned masters and migration from masters</span><br><span class="line"># that became empty.</span><br><span class="line">#</span><br><span class="line"># Default is &#x27;yes&#x27; (allow automatic migrations).</span><br><span class="line">#</span><br><span class="line"># cluster-allow-replica-migration yes</span><br><span class="line"></span><br><span class="line"># By default Redis Cluster nodes stop accepting queries if they detect there</span><br><span class="line"># is at least a hash slot uncovered (no available node is serving it).</span><br><span class="line"># This way if the cluster is partially down (for example a range of hash slots</span><br><span class="line"># are no longer covered) all the cluster becomes, eventually, unavailable.</span><br><span class="line"># It automatically returns available as soon as all the slots are covered again.</span><br><span class="line">#</span><br><span class="line"># However sometimes you want the subset of the cluster which is working,</span><br><span class="line"># to continue to accept queries for the part of the key space that is still</span><br><span class="line"># covered. In order to do so, just set the cluster-require-full-coverage</span><br><span class="line"># option to no.</span><br><span class="line">#</span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, prevents replicas from trying to failover its</span><br><span class="line"># master during master failures. However the replica can still perform a</span><br><span class="line"># manual failover, if forced to do so.</span><br><span class="line">#</span><br><span class="line"># This is useful in different scenarios, especially in the case of multiple</span><br><span class="line"># data center operations, where we want one side to never be promoted if not</span><br><span class="line"># in the case of a total DC failure.</span><br><span class="line">#</span><br><span class="line"># cluster-replica-no-failover no</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, allows nodes to serve read traffic while the</span><br><span class="line"># cluster is in a down state, as long as it believes it owns the slots.</span><br><span class="line">#</span><br><span class="line"># This is useful for two cases.  The first case is for when an application</span><br><span class="line"># doesn&#x27;t require consistency of data during node failures or network partitions.</span><br><span class="line"># One example of this is a cache, where as long as the node has the data it</span><br><span class="line"># should be able to serve it.</span><br><span class="line">#</span><br><span class="line"># The second use case is for configurations that don&#x27;t meet the recommended</span><br><span class="line"># three shards but want to enable cluster mode and scale later. A</span><br><span class="line"># master outage in a 1 or 2 shard configuration causes a read/write outage to the</span><br><span class="line"># entire cluster without this option set, with it set there is only a write outage.</span><br><span class="line"># Without a quorum of masters, slot ownership will not change automatically.</span><br><span class="line">#</span><br><span class="line"># cluster-allow-reads-when-down no</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, allows nodes to serve pubsub shard traffic while</span><br><span class="line"># the cluster is in a down state, as long as it believes it owns the slots.</span><br><span class="line">#</span><br><span class="line"># This is useful if the application would like to use the pubsub feature even when</span><br><span class="line"># the cluster global stable state is not OK. If the application wants to make sure only</span><br><span class="line"># one shard is serving a given channel, this feature should be kept as yes.</span><br><span class="line">#</span><br><span class="line"># cluster-allow-pubsubshard-when-down yes</span><br><span class="line"></span><br><span class="line"># Cluster link send buffer limit is the limit on the memory usage of an individual</span><br><span class="line"># cluster bus link&#x27;s send buffer in bytes. Cluster links would be freed if they exceed</span><br><span class="line"># this limit. This is to primarily prevent send buffers from growing unbounded on links</span><br><span class="line"># toward slow peers (E.g. PubSub messages being piled up).</span><br><span class="line"># This limit is disabled by default. Enable this limit when &#x27;mem_cluster_links&#x27; INFO field</span><br><span class="line"># and/or &#x27;send-buffer-allocated&#x27; entries in the &#x27;CLUSTER LINKS` command output continuously increase.</span><br><span class="line"># Minimum limit of 1gb is recommended so that cluster link buffer can fit in at least a single</span><br><span class="line"># PubSub message by default. (client-query-buffer-limit default value is 1gb)</span><br><span class="line">#</span><br><span class="line"># cluster-link-sendbuf-limit 0</span><br><span class="line"> </span><br><span class="line"># Clusters can configure their announced hostname using this config. This is a common use case for </span><br><span class="line"># applications that need to use TLS Server Name Indication (SNI) or dealing with DNS based</span><br><span class="line"># routing. By default this value is only shown as additional metadata in the CLUSTER SLOTS</span><br><span class="line"># command, but can be changed using &#x27;cluster-preferred-endpoint-type&#x27; config. This value is </span><br><span class="line"># communicated along the clusterbus to all nodes, setting it to an empty string will remove </span><br><span class="line"># the hostname and also propagate the removal.</span><br><span class="line">#</span><br><span class="line"># cluster-announce-hostname &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Clusters can advertise how clients should connect to them using either their IP address,</span><br><span class="line"># a user defined hostname, or by declaring they have no endpoint. Which endpoint is</span><br><span class="line"># shown as the preferred endpoint is set by using the cluster-preferred-endpoint-type</span><br><span class="line"># config with values &#x27;ip&#x27;, &#x27;hostname&#x27;, or &#x27;unknown-endpoint&#x27;. This value controls how</span><br><span class="line"># the endpoint returned for MOVED/ASKING requests as well as the first field of CLUSTER SLOTS. </span><br><span class="line"># If the preferred endpoint type is set to hostname, but no announced hostname is set, a &#x27;?&#x27; </span><br><span class="line"># will be returned instead.</span><br><span class="line">#</span><br><span class="line"># When a cluster advertises itself as having an unknown endpoint, it&#x27;s indicating that</span><br><span class="line"># the server doesn&#x27;t know how clients can reach the cluster. This can happen in certain </span><br><span class="line"># networking situations where there are multiple possible routes to the node, and the </span><br><span class="line"># server doesn&#x27;t know which one the client took. In this case, the server is expecting</span><br><span class="line"># the client to reach out on the same endpoint it used for making the last request, but use</span><br><span class="line"># the port provided in the response.</span><br><span class="line">#</span><br><span class="line"># cluster-preferred-endpoint-type ip</span><br><span class="line"></span><br><span class="line"># In order to setup your cluster make sure to read the documentation</span><br><span class="line"># available at https://redis.io web site.</span><br><span class="line"></span><br><span class="line">########################## CLUSTER DOCKER/NAT support  ########################</span><br><span class="line"></span><br><span class="line"># In certain deployments, Redis Cluster nodes address discovery fails, because</span><br><span class="line"># addresses are NAT-ted or because ports are forwarded (the typical case is</span><br><span class="line"># Docker and other containers).</span><br><span class="line">#</span><br><span class="line"># In order to make Redis Cluster working in such environments, a static</span><br><span class="line"># configuration where each node knows its public address is needed. The</span><br><span class="line"># following four options are used for this scope, and are:</span><br><span class="line">#</span><br><span class="line"># * cluster-announce-ip</span><br><span class="line"># * cluster-announce-port</span><br><span class="line"># * cluster-announce-tls-port</span><br><span class="line"># * cluster-announce-bus-port</span><br><span class="line">#</span><br><span class="line"># Each instructs the node about its address, client ports (for connections</span><br><span class="line"># without and with TLS) and cluster message bus port. The information is then</span><br><span class="line"># published in the header of the bus packets so that other nodes will be able to</span><br><span class="line"># correctly map the address of the node publishing the information.</span><br><span class="line">#</span><br><span class="line"># If cluster-tls is set to yes and cluster-announce-tls-port is omitted or set</span><br><span class="line"># to zero, then cluster-announce-port refers to the TLS port. Note also that</span><br><span class="line"># cluster-announce-tls-port has no effect if cluster-tls is set to no.</span><br><span class="line">#</span><br><span class="line"># If the above options are not used, the normal Redis Cluster auto-detection</span><br><span class="line"># will be used instead.</span><br><span class="line">#</span><br><span class="line"># Note that when remapped, the bus port may not be at the fixed offset of</span><br><span class="line"># clients port + 10000, so you can specify any port and bus-port depending</span><br><span class="line"># on how they get remapped. If the bus-port is not set, a fixed offset of</span><br><span class="line"># 10000 will be used as usual.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># cluster-announce-ip 10.1.1.5</span><br><span class="line"># cluster-announce-tls-port 6379</span><br><span class="line"># cluster-announce-port 0</span><br><span class="line"># cluster-announce-bus-port 6380</span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line"># The Redis Slow Log is a system to log queries that exceeded a specified</span><br><span class="line"># execution time. The execution time does not include the I/O operations</span><br><span class="line"># like talking with the client, sending the reply and so forth,</span><br><span class="line"># but just the time needed to actually execute the command (this is the only</span><br><span class="line"># stage of command execution where the thread is blocked and can not serve</span><br><span class="line"># other requests in the meantime).</span><br><span class="line">#</span><br><span class="line"># You can configure the slow log with two parameters: one tells Redis</span><br><span class="line"># what is the execution time, in microseconds, to exceed in order for the</span><br><span class="line"># command to get logged, and the other parameter is the length of the</span><br><span class="line"># slow log. When a new command is logged the oldest one is removed from the</span><br><span class="line"># queue of logged commands.</span><br><span class="line"></span><br><span class="line"># The following time is expressed in microseconds, so 1000000 is equivalent</span><br><span class="line"># to one second. Note that a negative number disables the slow log, while</span><br><span class="line"># a value of zero forces the logging of every command.</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"># There is no limit to this length. Just be aware that it will consume memory.</span><br><span class="line"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line">################################ LATENCY MONITOR ##############################</span><br><span class="line"></span><br><span class="line"># The Redis latency monitoring subsystem samples different operations</span><br><span class="line"># at runtime in order to collect data related to possible sources of</span><br><span class="line"># latency of a Redis instance.</span><br><span class="line">#</span><br><span class="line"># Via the LATENCY command this information is available to the user that can</span><br><span class="line"># print graphs and obtain reports.</span><br><span class="line">#</span><br><span class="line"># The system only logs operations that were performed in a time equal or</span><br><span class="line"># greater than the amount of milliseconds specified via the</span><br><span class="line"># latency-monitor-threshold configuration directive. When its value is set</span><br><span class="line"># to zero, the latency monitor is turned off.</span><br><span class="line">#</span><br><span class="line"># By default latency monitoring is disabled since it is mostly not needed</span><br><span class="line"># if you don&#x27;t have latency issues, and collecting data has a performance</span><br><span class="line"># impact, that while very small, can be measured under big load. Latency</span><br><span class="line"># monitoring can easily be enabled at runtime using the command</span><br><span class="line"># &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"></span><br><span class="line">################################ LATENCY TRACKING ##############################</span><br><span class="line"></span><br><span class="line"># The Redis extended latency monitoring tracks the per command latencies and enables</span><br><span class="line"># exporting the percentile distribution via the INFO latencystats command,</span><br><span class="line"># and cumulative latency distributions (histograms) via the LATENCY command.</span><br><span class="line">#</span><br><span class="line"># By default, the extended latency monitoring is enabled since the overhead</span><br><span class="line"># of keeping track of the command latency is very small.</span><br><span class="line"># latency-tracking yes</span><br><span class="line"></span><br><span class="line"># By default the exported latency percentiles via the INFO latencystats command</span><br><span class="line"># are the p50, p99, and p999.</span><br><span class="line"># latency-tracking-info-percentiles 50 99 99.9</span><br><span class="line"></span><br><span class="line">############################# EVENT NOTIFICATION ##############################</span><br><span class="line"></span><br><span class="line"># Redis can notify Pub/Sub clients about events happening in the key space.</span><br><span class="line"># This feature is documented at https://redis.io/topics/notifications</span><br><span class="line">#</span><br><span class="line"># For instance if keyspace events notification is enabled, and a client</span><br><span class="line"># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</span><br><span class="line"># messages will be published via Pub/Sub:</span><br><span class="line">#</span><br><span class="line"># PUBLISH __keyspace@0__:foo del</span><br><span class="line"># PUBLISH __keyevent@0__:del foo</span><br><span class="line">#</span><br><span class="line"># It is possible to select the events that Redis will notify among a set</span><br><span class="line"># of classes. Every class is identified by a single character:</span><br><span class="line">#</span><br><span class="line">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span><br><span class="line">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span><br><span class="line">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><br><span class="line">#  $     String commands</span><br><span class="line">#  l     List commands</span><br><span class="line">#  s     Set commands</span><br><span class="line">#  h     Hash commands</span><br><span class="line">#  z     Sorted set commands</span><br><span class="line">#  x     Expired events (events generated every time a key expires)</span><br><span class="line">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span><br><span class="line">#  n     New key events (Note: not included in the &#x27;A&#x27; class)</span><br><span class="line">#  t     Stream commands</span><br><span class="line">#  d     Module key type events</span><br><span class="line">#  m     Key-miss events (Note: It is not included in the &#x27;A&#x27; class)</span><br><span class="line">#  A     Alias for g$lshzxetd, so that the &quot;AKE&quot; string means all the events</span><br><span class="line">#        (Except key-miss events which are excluded from &#x27;A&#x27; due to their</span><br><span class="line">#         unique nature).</span><br><span class="line">#</span><br><span class="line">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span><br><span class="line">#  of zero or multiple characters. The empty string means that notifications</span><br><span class="line">#  are disabled.</span><br><span class="line">#</span><br><span class="line">#  Example: to enable list and generic events, from the point of view of the</span><br><span class="line">#           event name, use:</span><br><span class="line">#</span><br><span class="line">#  notify-keyspace-events Elg</span><br><span class="line">#</span><br><span class="line">#  Example 2: to get the stream of the expired keys subscribing to channel</span><br><span class="line">#             name __keyevent@0__:expired use:</span><br><span class="line">#</span><br><span class="line">#  notify-keyspace-events Ex</span><br><span class="line">#</span><br><span class="line">#  By default all notifications are disabled because most users don&#x27;t need</span><br><span class="line">#  this feature and the feature has some overhead. Note that if you don&#x27;t</span><br><span class="line">#  specify at least one of K or E, no events will be delivered.</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line"></span><br><span class="line">############################### ADVANCED CONFIG ###############################</span><br><span class="line"></span><br><span class="line"># Hashes are encoded using a memory efficient data structure when they have a</span><br><span class="line"># small number of entries, and the biggest entry does not exceed a given</span><br><span class="line"># threshold. These thresholds can be configured using the following directives.</span><br><span class="line">hash-max-listpack-entries 512</span><br><span class="line">hash-max-listpack-value 64</span><br><span class="line"></span><br><span class="line"># Lists are also encoded in a special way to save a lot of space.</span><br><span class="line"># The number of entries allowed per internal list node can be specified</span><br><span class="line"># as a fixed maximum size or a maximum number of elements.</span><br><span class="line"># For a fixed maximum size, use -5 through -1, meaning:</span><br><span class="line"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><br><span class="line"># -4: max size: 32 Kb  &lt;-- not recommended</span><br><span class="line"># -3: max size: 16 Kb  &lt;-- probably not recommended</span><br><span class="line"># -2: max size: 8 Kb   &lt;-- good</span><br><span class="line"># -1: max size: 4 Kb   &lt;-- good</span><br><span class="line"># Positive numbers mean store up to _exactly_ that number of elements</span><br><span class="line"># per list node.</span><br><span class="line"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span><br><span class="line"># but if your use case is unique, adjust the settings as necessary.</span><br><span class="line">list-max-listpack-size -2</span><br><span class="line"></span><br><span class="line"># Lists may also be compressed.</span><br><span class="line"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span><br><span class="line"># the list to *exclude* from compression.  The head and tail of the list</span><br><span class="line"># are always uncompressed for fast push/pop operations.  Settings are:</span><br><span class="line"># 0: disable all list compression</span><br><span class="line"># 1: depth 1 means &quot;don&#x27;t start compressing until after 1 node into the list,</span><br><span class="line">#    going from either the head or tail&quot;</span><br><span class="line">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><br><span class="line">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span><br><span class="line"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><br><span class="line">#    2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span><br><span class="line">#    but compress all nodes between them.</span><br><span class="line"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><br><span class="line"># etc.</span><br><span class="line">list-compress-depth 0</span><br><span class="line"></span><br><span class="line"># Sets have a special encoding in just one case: when a set is composed</span><br><span class="line"># of just strings that happen to be integers in radix 10 in the range</span><br><span class="line"># of 64 bit signed integers.</span><br><span class="line"># The following configuration setting sets the limit in the size of the</span><br><span class="line"># set in order to use this special memory saving encoding.</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</span><br><span class="line"># order to save a lot of space. This encoding is only used when the length and</span><br><span class="line"># elements of a sorted set are below the following limits:</span><br><span class="line">zset-max-listpack-entries 128</span><br><span class="line">zset-max-listpack-value 64</span><br><span class="line"></span><br><span class="line"># HyperLogLog sparse representation bytes limit. The limit includes the</span><br><span class="line"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span><br><span class="line"># this limit, it is converted into the dense representation.</span><br><span class="line">#</span><br><span class="line"># A value greater than 16000 is totally useless, since at that point the</span><br><span class="line"># dense representation is more memory efficient.</span><br><span class="line">#</span><br><span class="line"># The suggested value is ~ 3000 in order to have the benefits of</span><br><span class="line"># the space efficient encoding without slowing down too much PFADD,</span><br><span class="line"># which is O(N) with the sparse encoding. The value can be raised to</span><br><span class="line"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span><br><span class="line"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"># Streams macro node max size / items. The stream data structure is a radix</span><br><span class="line"># tree of big nodes that encode multiple items inside. Using this configuration</span><br><span class="line"># it is possible to configure how big a single node can be in bytes, and the</span><br><span class="line"># maximum number of items it may contain before switching to a new node when</span><br><span class="line"># appending new stream entries. If any of the following settings are set to</span><br><span class="line"># zero, the limit is ignored, so for instance it is possible to set just a</span><br><span class="line"># max entries limit by setting max-bytes to 0 and max-entries to the desired</span><br><span class="line"># value.</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"></span><br><span class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><br><span class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</span><br><span class="line"># keys to values). The hash table implementation Redis uses (see dict.c)</span><br><span class="line"># performs a lazy rehashing: the more operation you run into a hash table</span><br><span class="line"># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</span><br><span class="line"># server is idle the rehashing is never complete and some more memory is used</span><br><span class="line"># by the hash table.</span><br><span class="line">#</span><br><span class="line"># The default is to use this millisecond 10 times every second in order to</span><br><span class="line"># actively rehash the main dictionaries, freeing memory when possible.</span><br><span class="line">#</span><br><span class="line"># If unsure:</span><br><span class="line"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span><br><span class="line"># not a good thing in your environment that Redis can reply from time to time</span><br><span class="line"># to queries with 2 milliseconds delay.</span><br><span class="line">#</span><br><span class="line"># use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but</span><br><span class="line"># want to free memory asap when possible.</span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"># The client output buffer limits can be used to force disconnection of clients</span><br><span class="line"># that are not reading data from the server fast enough for some reason (a</span><br><span class="line"># common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span><br><span class="line"># publisher can produce them).</span><br><span class="line">#</span><br><span class="line"># The limit can be set differently for the three different classes of clients:</span><br><span class="line">#</span><br><span class="line"># normal -&gt; normal clients including MONITOR clients</span><br><span class="line"># replica -&gt; replica clients</span><br><span class="line"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span><br><span class="line">#</span><br><span class="line"># The syntax of every client-output-buffer-limit directive is the following:</span><br><span class="line">#</span><br><span class="line"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><br><span class="line">#</span><br><span class="line"># A client is immediately disconnected once the hard limit is reached, or if</span><br><span class="line"># the soft limit is reached and remains reached for the specified number of</span><br><span class="line"># seconds (continuously).</span><br><span class="line"># So for instance if the hard limit is 32 megabytes and the soft limit is</span><br><span class="line"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span><br><span class="line"># if the size of the output buffers reach 32 megabytes, but will also get</span><br><span class="line"># disconnected if the client reaches 16 megabytes and continuously overcomes</span><br><span class="line"># the limit for 10 seconds.</span><br><span class="line">#</span><br><span class="line"># By default normal clients are not limited because they don&#x27;t receive data</span><br><span class="line"># without asking (in a push way), but just after a request, so only</span><br><span class="line"># asynchronous clients may create a scenario where data is requested faster</span><br><span class="line"># than it can read.</span><br><span class="line">#</span><br><span class="line"># Instead there is a default limit for pubsub and replica clients, since</span><br><span class="line"># subscribers and replicas receive data in a push fashion.</span><br><span class="line">#</span><br><span class="line"># Note that it doesn&#x27;t make sense to set the replica clients output buffer</span><br><span class="line"># limit lower than the repl-backlog-size config (partial sync will succeed</span><br><span class="line"># and then replica will get disconnected).</span><br><span class="line"># Such a configuration is ignored (the size of repl-backlog-size will be used).</span><br><span class="line"># This doesn&#x27;t have memory consumption implications since the replica client</span><br><span class="line"># will share the backlog buffers memory.</span><br><span class="line">#</span><br><span class="line"># Both the hard or the soft limit can be disabled by setting them to zero.</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"># Client query buffers accumulate new commands. They are limited to a fixed</span><br><span class="line"># amount by default in order to avoid that a protocol desynchronization (for</span><br><span class="line"># instance due to a bug in the client) will lead to unbound memory usage in</span><br><span class="line"># the query buffer. However you can configure it here if you have very special</span><br><span class="line"># needs, such us huge multi/exec requests or alike.</span><br><span class="line">#</span><br><span class="line"># client-query-buffer-limit 1gb</span><br><span class="line"></span><br><span class="line"># In some scenarios client connections can hog up memory leading to OOM</span><br><span class="line"># errors or data eviction. To avoid this we can cap the accumulated memory</span><br><span class="line"># used by all client connections (all pubsub and normal clients). Once we</span><br><span class="line"># reach that limit connections will be dropped by the server freeing up</span><br><span class="line"># memory. The server will attempt to drop the connections using the most </span><br><span class="line"># memory first. We call this mechanism &quot;client eviction&quot;.</span><br><span class="line">#</span><br><span class="line"># Client eviction is configured using the maxmemory-clients setting as follows:</span><br><span class="line"># 0 - client eviction is disabled (default)</span><br><span class="line">#</span><br><span class="line"># A memory value can be used for the client eviction threshold,</span><br><span class="line"># for example:</span><br><span class="line"># maxmemory-clients 1g</span><br><span class="line">#</span><br><span class="line"># A percentage value (between 1% and 100%) means the client eviction threshold</span><br><span class="line"># is based on a percentage of the maxmemory setting. For example to set client</span><br><span class="line"># eviction at 5% of maxmemory:</span><br><span class="line"># maxmemory-clients 5%</span><br><span class="line"></span><br><span class="line"># In the Redis protocol, bulk requests, that are, elements representing single</span><br><span class="line"># strings, are normally limited to 512 mb. However you can change this limit</span><br><span class="line"># here, but must be 1mb or greater</span><br><span class="line">#</span><br><span class="line"># proto-max-bulk-len 512mb</span><br><span class="line"></span><br><span class="line"># Redis calls an internal function to perform many background tasks, like</span><br><span class="line"># closing connections of clients in timeout, purging expired keys that are</span><br><span class="line"># never requested, and so forth.</span><br><span class="line">#</span><br><span class="line"># Not all tasks are performed with the same frequency, but Redis checks for</span><br><span class="line"># tasks to perform according to the specified &quot;hz&quot; value.</span><br><span class="line">#</span><br><span class="line"># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</span><br><span class="line"># Redis is idle, but at the same time will make Redis more responsive when</span><br><span class="line"># there are many keys expiring at the same time, and timeouts may be</span><br><span class="line"># handled with more precision.</span><br><span class="line">#</span><br><span class="line"># The range is between 1 and 500, however a value over 100 is usually not</span><br><span class="line"># a good idea. Most users should use the default of 10 and raise this up to</span><br><span class="line"># 100 only in environments where very low latency is required.</span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"># Normally it is useful to have an HZ value which is proportional to the</span><br><span class="line"># number of clients connected. This is useful in order, for instance, to</span><br><span class="line"># avoid too many clients are processed for each background task invocation</span><br><span class="line"># in order to avoid latency spikes.</span><br><span class="line">#</span><br><span class="line"># Since the default HZ value by default is conservatively set to 10, Redis</span><br><span class="line"># offers, and enables by default, the ability to use an adaptive HZ value</span><br><span class="line"># which will temporarily raise when there are many connected clients.</span><br><span class="line">#</span><br><span class="line"># When dynamic HZ is enabled, the actual configured HZ will be used</span><br><span class="line"># as a baseline, but multiples of the configured HZ value will be actually</span><br><span class="line"># used as needed once more clients are connected. In this way an idle</span><br><span class="line"># instance will use very little CPU time while a busy instance will be</span><br><span class="line"># more responsive.</span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line"># When a child rewrites the AOF file, if the following option is enabled</span><br><span class="line"># the file will be fsync-ed every 4 MB of data generated. This is useful</span><br><span class="line"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="line"># big latency spikes.</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"># When redis saves RDB file, if the following option is enabled</span><br><span class="line"># the file will be fsync-ed every 4 MB of data generated. This is useful</span><br><span class="line"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="line"># big latency spikes.</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><br><span class="line"># idea to start with the default settings and only change them after investigating</span><br><span class="line"># how to improve the performances and how the keys LFU change over time, which</span><br><span class="line"># is possible to inspect via the OBJECT FREQ command.</span><br><span class="line">#</span><br><span class="line"># There are two tunable parameters in the Redis LFU implementation: the</span><br><span class="line"># counter logarithm factor and the counter decay time. It is important to</span><br><span class="line"># understand what the two parameters mean before changing them.</span><br><span class="line">#</span><br><span class="line"># The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis</span><br><span class="line"># uses a probabilistic increment with logarithmic behavior. Given the value</span><br><span class="line"># of the old counter, when a key is accessed, the counter is incremented in</span><br><span class="line"># this way:</span><br><span class="line">#</span><br><span class="line"># 1. A random number R between 0 and 1 is extracted.</span><br><span class="line"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><br><span class="line"># 3. The counter is incremented only if R &lt; P.</span><br><span class="line">#</span><br><span class="line"># The default lfu-log-factor is 10. This is a table of how the frequency</span><br><span class="line"># counter changes with a different number of accesses with different</span><br><span class="line"># logarithmic factors:</span><br><span class="line">#</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 0      | 104        | 255        | 255        | 255        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 1      | 18         | 49         | 255        | 255        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 10     | 10         | 18         | 142        | 255        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 100    | 8          | 11         | 49         | 143        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line">#</span><br><span class="line"># NOTE: The above table was obtained by running the following commands:</span><br><span class="line">#</span><br><span class="line">#   redis-benchmark -n 1000000 incr foo</span><br><span class="line">#   redis-cli object freq foo</span><br><span class="line">#</span><br><span class="line"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><br><span class="line"># to accumulate hits.</span><br><span class="line">#</span><br><span class="line"># The counter decay time is the time, in minutes, that must elapse in order</span><br><span class="line"># for the key counter to be divided by two (or decremented if it has a value</span><br><span class="line"># less &lt;= 10).</span><br><span class="line">#</span><br><span class="line"># The default value for the lfu-decay-time is 1. A special value of 0 means to</span><br><span class="line"># decay the counter every time it happens to be scanned.</span><br><span class="line">#</span><br><span class="line"># lfu-log-factor 10</span><br><span class="line"># lfu-decay-time 1</span><br><span class="line"></span><br><span class="line">########################### ACTIVE DEFRAGMENTATION #######################</span><br><span class="line">#</span><br><span class="line"># What is active defragmentation?</span><br><span class="line"># -------------------------------</span><br><span class="line">#</span><br><span class="line"># Active (online) defragmentation allows a Redis server to compact the</span><br><span class="line"># spaces left between small allocations and deallocations of data in memory,</span><br><span class="line"># thus allowing to reclaim back memory.</span><br><span class="line">#</span><br><span class="line"># Fragmentation is a natural process that happens with every allocator (but</span><br><span class="line"># less so with Jemalloc, fortunately) and certain workloads. Normally a server</span><br><span class="line"># restart is needed in order to lower the fragmentation, or at least to flush</span><br><span class="line"># away all the data and create it again. However thanks to this feature</span><br><span class="line"># implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span><br><span class="line"># in a &quot;hot&quot; way, while the server is running.</span><br><span class="line">#</span><br><span class="line"># Basically when the fragmentation is over a certain level (see the</span><br><span class="line"># configuration options below) Redis will start to create new copies of the</span><br><span class="line"># values in contiguous memory regions by exploiting certain specific Jemalloc</span><br><span class="line"># features (in order to understand if an allocation is causing fragmentation</span><br><span class="line"># and to allocate it in a better place), and at the same time, will release the</span><br><span class="line"># old copies of the data. This process, repeated incrementally for all the keys</span><br><span class="line"># will cause the fragmentation to drop back to normal values.</span><br><span class="line">#</span><br><span class="line"># Important things to understand:</span><br><span class="line">#</span><br><span class="line"># 1. This feature is disabled by default, and only works if you compiled Redis</span><br><span class="line">#    to use the copy of Jemalloc we ship with the source code of Redis.</span><br><span class="line">#    This is the default with Linux builds.</span><br><span class="line">#</span><br><span class="line"># 2. You never need to enable this feature if you don&#x27;t have fragmentation</span><br><span class="line">#    issues.</span><br><span class="line">#</span><br><span class="line"># 3. Once you experience fragmentation, you can enable this feature when</span><br><span class="line">#    needed with the command &quot;CONFIG SET activedefrag yes&quot;.</span><br><span class="line">#</span><br><span class="line"># The configuration parameters are able to fine tune the behavior of the</span><br><span class="line"># defragmentation process. If you are not sure about what they mean it is</span><br><span class="line"># a good idea to leave the defaults untouched.</span><br><span class="line"></span><br><span class="line"># Active defragmentation is disabled by default</span><br><span class="line"># activedefrag no</span><br><span class="line"></span><br><span class="line"># Minimum amount of fragmentation waste to start active defrag</span><br><span class="line"># active-defrag-ignore-bytes 100mb</span><br><span class="line"></span><br><span class="line"># Minimum percentage of fragmentation to start active defrag</span><br><span class="line"># active-defrag-threshold-lower 10</span><br><span class="line"></span><br><span class="line"># Maximum percentage of fragmentation at which we use maximum effort</span><br><span class="line"># active-defrag-threshold-upper 100</span><br><span class="line"></span><br><span class="line"># Minimal effort for defrag in CPU percentage, to be used when the lower</span><br><span class="line"># threshold is reached</span><br><span class="line"># active-defrag-cycle-min 1</span><br><span class="line"></span><br><span class="line"># Maximal effort for defrag in CPU percentage, to be used when the upper</span><br><span class="line"># threshold is reached</span><br><span class="line"># active-defrag-cycle-max 25</span><br><span class="line"></span><br><span class="line"># Maximum number of set/hash/zset/list fields that will be processed from</span><br><span class="line"># the main dictionary scan</span><br><span class="line"># active-defrag-max-scan-fields 1000</span><br><span class="line"></span><br><span class="line"># Jemalloc background thread for purging will be enabled by default</span><br><span class="line">jemalloc-bg-thread yes</span><br><span class="line"></span><br><span class="line"># It is possible to pin different threads and processes of Redis to specific</span><br><span class="line"># CPUs in your system, in order to maximize the performances of the server.</span><br><span class="line"># This is useful both in order to pin different Redis threads in different</span><br><span class="line"># CPUs, but also in order to make sure that multiple Redis instances running</span><br><span class="line"># in the same host will be pinned to different CPUs.</span><br><span class="line">#</span><br><span class="line"># Normally you can do this using the &quot;taskset&quot; command, however it is also</span><br><span class="line"># possible to this via Redis configuration directly, both in Linux and FreeBSD.</span><br><span class="line">#</span><br><span class="line"># You can pin the server/IO threads, bio threads, aof rewrite child process, and</span><br><span class="line"># the bgsave child process. The syntax to specify the cpu list is the same as</span><br><span class="line"># the taskset command:</span><br><span class="line">#</span><br><span class="line"># Set redis server/io threads to cpu affinity 0,2,4,6:</span><br><span class="line"># server_cpulist 0-7:2</span><br><span class="line">#</span><br><span class="line"># Set bio threads to cpu affinity 1,3:</span><br><span class="line"># bio_cpulist 1,3</span><br><span class="line">#</span><br><span class="line"># Set aof rewrite child process to cpu affinity 8,9,10,11:</span><br><span class="line"># aof_rewrite_cpulist 8-11</span><br><span class="line">#</span><br><span class="line"># Set bgsave child process to cpu affinity 1,10,11</span><br><span class="line"># bgsave_cpulist 1,10-11</span><br><span class="line"></span><br><span class="line"># In some cases redis will emit warnings and even refuse to start if it detects</span><br><span class="line"># that the system is in bad state, it is possible to suppress these warnings</span><br><span class="line"># by setting the following config which takes a space delimited list of warnings</span><br><span class="line"># to suppress</span><br><span class="line">#</span><br><span class="line"># ignore-warnings ARM64-COW-BUG</span><br></pre></td></tr></table></figure><h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><h4 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h4><blockquote><p>Redis database backup file Redis数据备份文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save 主教程执行Rdb会阻塞所有命令 退出之前会自动执行</span><br><span class="line">bgsave 开启子进程执行RDB</span><br></pre></td></tr></table></figure><p>Redis内部有触发RDB的机制,可以在redis.conf中找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">rdbcopression yes 是否压缩</span><br><span class="line">dbfilename dump.rdb 文件名称</span><br><span class="line">dir 文件保存的目录</span><br></pre></td></tr></table></figure><h4 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h4><blockquote><p>Append only file追加文件 Redis处理的每一条命令都会记录在AOF文件,可以看做为命令的日志文件</p></blockquote><p>AOF默认是关闭的需要修改conf文件来开启AOF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">========= 命令频率</span><br><span class="line">appendfsync always 每执行一次命令立即记录</span><br><span class="line">appendsync everysec 写命令执行完先放入AOF缓冲,然后每隔1s将缓冲区文件写到AOF文件(默认)</span><br><span class="line">appendfsync no 写命令执行完先放入AOF缓冲区,由操作系统决定何时将缓冲区内容写回磁盘</span><br></pre></td></tr></table></figure><table><thead><tr><th>配置项</th><th>刷盘时机</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Always</td><td>同步刷盘</td><td>可靠性高,几乎不丢数据</td><td>影响性能</td></tr><tr><td>everysec</td><td>每秒刷盘</td><td>性能适中</td><td>最多丢失1s数据</td></tr><tr><td>no</td><td>操作系统控制</td><td>性能最好</td><td>可靠性差,可能丢失数据</td></tr></tbody></table><p>bgrewriteof简化命令</p><p><img src="/2022/08/28/redis/image-20220905171956060.png" alt="image-20220905171956060"></p><table><thead><tr><th>** **</th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td>持久化方式</td><td>定时对整个内存做快照</td><td>记录每一次执行的命令</td></tr><tr><td>数据完整性</td><td>不完整，两次备份之间会丢失</td><td>相对完整，取决于刷盘策略</td></tr><tr><td>文件大小</td><td>会有压缩，文件体积小</td><td>记录命令，文件体积很大</td></tr><tr><td>宕机恢复速度</td><td>很快</td><td>慢</td></tr><tr><td>数据恢复优先级</td><td>低，因为数据完整性不如AOF</td><td>高，因为数据完整性更高</td></tr><tr><td>系统资源占用</td><td>高，大量CPU和内存消耗</td><td>低，主要是磁盘IO资源但AOF重写时会占用大量CPU和内存资源</td></tr><tr><td>使用场景</td><td>可以容忍数分钟的数据丢失，追求更快的启动速度</td><td>对数据安全性要求较高常见</td></tr></tbody></table><h3 id="Redis主从"><a href="#Redis主从" class="headerlink" title="Redis主从"></a>Redis主从</h3><p><img src="/2022/08/28/redis/image-20220905172408750.png" alt="image-20220905172408750"></p><p><img src="/2022/08/28/redis/image-20220905172536269.png" alt="image-20220905172536269"></p><p>master如何判断slave是不是第一次来同步数据？这里会用到两个很重要的概念：</p><ul><li>Replication Id：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li>offset：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据</li></ul><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><blockquote><p>Redis提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。哨兵的结构和作用如下</p></blockquote><p><img src="/2022/08/28/redis/image-20220905172804509.png" alt="image-20220905172804509"></p><ul><li>监控：Sentinel 会不断检查您的master和slave是否按预期工作</li><li>自动故障恢复：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主</li><li>通知：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</li></ul><h4 id="服务状态监控"><a href="#服务状态监控" class="headerlink" title="服务状态监控"></a>服务状态监控</h4><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令</p><ul><li>主观下线：如果某sentinel节点发现某实例未在规定时间响应，则认为该实例主观下线。</li><li>客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例客观下线。quorum值最好超过Sentinel实例数量的一半。</li></ul><p><img src="/2022/08/28/redis/image-20220905173034583.png" alt="image-20220905173034583"></p><p>一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的：</p><ul><li>首先会判断slave节点与master节点断开时间长短，如果超过指定值（down-after-milliseconds * 10）则会排除该slave节点</li><li>然后判断slave节点的slave-priority值，越小优先级越高，如果是0则永不参与选举</li><li>如果slave-prority一样，则判断slave节点的offset值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的运行id大小，越小优先级越高。</li></ul><h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h4><p>当选中了其中一个slave为新的master后（例如slave1），故障的转移的步骤如下</p><ul><li>sentinel给备选的slave1节点发送slaveof no one命令，让该节点成为master</li><li>sentinel给所有其它slave发送slaveof 192.168.150.101 7002 命令，让这些slave成为新master的从节点，开始从新的master上同步数据。</li><li>最后，sentinel将故障节点标记为slave，当故障节点恢复后会自动成为新的master的slave节点</li></ul><p><img src="/2022/08/28/redis/image-20220905173318096.png" alt="image-20220905173318096"></p><h4 id="RedisTemplate的哨兵模式"><a href="#RedisTemplate的哨兵模式" class="headerlink" title="RedisTemplate的哨兵模式"></a>RedisTemplate的哨兵模式</h4><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">sentinel:</span> </span><br><span class="line"><span class="attr">master:</span> <span class="string">mymaster</span> <span class="comment"># 指定master名称      nodes: # 指定redis-sentinel集群信息         - 192.168.150.101:27001        - 192.168.150.101:27002        - 192.168.150.101:27003</span></span><br></pre></td></tr></table></figure></li><li><p>配置主从读写分离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span><span class="keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="title function_">configurationBuilderCustomizer</span><span class="params">()</span>&#123;<span class="keyword">return</span> configBuilder -&gt; configBuilder.readFrom(ReadFrom.REPLICA_PREFERRED);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>readFrom为一个枚举</p><ul><li>MASTER 从主节点读取</li><li>MASTER_PREFERRED 优先从master读取,master不可用才读取replica</li><li>REPLICA 从REPLICA读取</li><li>REPLICA _PREFERRED：优先从slave（replica）节点读取，所有的slave都不可用才读取master</li></ul></blockquote></li></ol><h3 id="Redis分片集群"><a href="#Redis分片集群" class="headerlink" title="Redis分片集群"></a>Redis分片集群</h3><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li>海量数据存储问题</li><li>高并发写的问题</li></ul><p>使用分片集群可以解决上述问题，分片集群特征</p><ul><li>集群中有多个master，每个master保存不同数据</li><li>每个master都可以有多个slave节点</li><li>master之间通过ping监测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</li></ul><p><img src="/2022/08/28/redis/image-20220905174401686.png" alt="image-20220905174401686"></p><h4 id="散列插槽"><a href="#散列插槽" class="headerlink" title="散列插槽"></a>散列插槽</h4><blockquote><p>Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，查看集群信息时就能看到</p></blockquote><p>数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：</p><ul><li><p>key中包含”{}”，且“{}”中至少包含1个字符，“{}”中的部分是有效部分</p></li><li><p>key中不包含“{}”，整个key都是有效部分</p><p>例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对16384取余，得到的结果就是slot值。</p></li></ul><p><img src="/2022/08/28/redis/image-20220905175803425.png" alt="image-20220905175803425"></p><p><img src="/2022/08/28/redis/image-20220905175844588.png" alt="image-20220905175844588"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>断点</title>
      <link href="/2022/08/26/%E6%96%AD%E7%82%B9/"/>
      <url>/2022/08/26/%E6%96%AD%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>行断点</p><p>停住的地方左侧</p></li><li><p>详细断点 shift+左键</p></li><li><p>方法断点</p><ul><li>停在方法的第一行</li><li>恢复后在最后一行</li></ul></li><li><p>接口断点</p></li><li><p>异常断点 在发生异常的地方停住</p></li><li><p>属性断点 只会在写的时候停住</p></li><li><p>条件断点 shift+左</p><ul><li>在condition输入条件</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/08/25/Git/"/>
      <url>/2022/08/25/Git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>代码回溯</li><li>版本切换</li><li>多人协作</li><li>远程备份</li></ul><h2 id="Git全局设置-任意-区分用户信息"><a href="#Git全局设置-任意-区分用户信息" class="headerlink" title="Git全局设置(任意 区分用户信息)"></a>Git全局设置(任意 区分用户信息)</h2><ul><li><p>设置用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “”</span><br><span class="line"></span><br><span class="line">git config --global user.email “”</span><br></pre></td></tr></table></figure></li><li><p>查看配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h2><ul><li><p>本地初始化仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>远程克隆仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone </span><br></pre></td></tr></table></figure></li></ul><h2 id="工作区、暂存区、版本库"><a href="#工作区、暂存区、版本库" class="headerlink" title="工作区、暂存区、版本库"></a>工作区、暂存区、版本库</h2><h3 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h3><p>.git文件夹下的信息</p><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>包含.git文件夹的目录</p><p>忽略目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br><span class="line">target          //忽略这个target目录</span><br><span class="line">angular.json    //忽略这个angular.json文件</span><br><span class="line">log/*           //忽略log下的所有文件</span><br><span class="line">css/*.css       //忽略css目录下的.css文件</span><br></pre></td></tr></table></figure><h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p>.git下的index文件就是暂存区,也可以叫stage 临时保存文件的地方</p><p><img src="/2022/08/25/Git/image-20220825120115258.png" alt="image-20220825120115258"></p><h3 id="工作区文件状态"><a href="#工作区文件状态" class="headerlink" title="工作区文件状态"></a>工作区文件状态</h3><ul><li>untracked未跟踪(未被纳入版本控制)</li><li>tracked已跟踪(被纳入版本控制)<ul><li>unmodified 未修改</li><li>modified 已修改</li><li>staged 暂存</li></ul></li></ul><h3 id="本地仓库命令"><a href="#本地仓库命令" class="headerlink" title="本地仓库命令"></a>本地仓库命令</h3><blockquote><p>git status 查看文件状态</p><p>git add 将文件的修改加入暂存区</p><p>git reset 取消暂存</p><p>​git reset –hard 跟日志的hash</p><p>git commit 暂存区提交到版本库</p><p>git log 查看日志</p></blockquote><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><blockquote><p>git remote 查看远程仓库</p><p>​git remote -v 查看远程仓库地址</p><p>git remote add 添加远程存储</p><p>​git remote add &lt;名字&gt; &lt;地址&gt;</p><p>git clone 从远程仓库克隆</p><p>git pull 从远程仓库拉取</p><p>​git pull &lt;名字&gt; &lt;分支名&gt;</p><p><img src="/2022/08/25/Git/image-20220825134819841.png" alt="image-20220825134819841"></p><p>git push 推送到远程仓库</p><p>​git push remote-name branch-name</p></blockquote><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><blockquote><p>git branch 查看分支</p><p>​git branch 查看本地分支</p><p>​git branch -r 查看远程分支</p><p>​git branch -v 查看所有分支</p><p>git branch [] 创建分支</p><p>git checkout []切换分支</p><p>git push name branch name 推送到远程分支</p><p>git merge [name] 合并分支 </p></blockquote><h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><blockquote><p>git tag 列出已有标签</p><p>git tag name 创建标签</p><p>git push shortname name 标签推送到远程仓库</p><p>git checkout -b branch name</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖</title>
      <link href="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/"/>
      <url>/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件开发整体流程"><a href="#软件开发整体流程" class="headerlink" title="软件开发整体流程"></a>软件开发整体流程</h2><h3 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h3><ul><li>需求分析:产品原型,需求说明书</li><li>设计:产品文档,UI,概要,详细,数据库</li><li>编码:项目代码,单元测试</li><li>测试:测试用例,测试报告</li><li>运维:软件环境安装,配置</li></ul><h3 id="角色分工"><a href="#角色分工" class="headerlink" title="角色分工"></a>角色分工</h3><ul><li>项目经理:对整个项目负责,任务分配,把控进度</li><li>产品经理:进行需求调研,输出需求调研文档,产品原型</li><li>UI设计师:产品原型输出界面效果图</li><li>架构师:项目整体架构设计,技术选型</li><li>开发工程师:代码实现</li><li>测试工程师:编写测试用例,输出测试报告</li><li>运维工程师:软件环境搭建,项目上线</li></ul><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><ul><li>开发环境:开发人员在开发阶段使用的环境,一般外部用户无法访问</li><li>测试环境:给测试人员使用的环境,用于测试项目,外部用户无法访问</li><li>生产环境:线上环境,提供对外服务的环境</li></ul><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>对餐饮企业提供的软件产品,包括系统管理后台,和移动端应用两部分。其中系统管理后台主要提供给餐饮内部员工使用,实现对餐厅菜品套餐订单进行管理维护。移动端主要提供给消费者使用,可以在线浏览菜品,添加购物车,下单等</p></blockquote><p>三期开发:</p><ul><li>实现基本需求,移动端H5实现,用手机浏览器访问</li><li>移动端应用改进,使用微信小程序实现</li><li>系统优化提高性能</li></ul><h3 id="产品原型展示"><a href="#产品原型展示" class="headerlink" title="产品原型展示"></a>产品原型展示</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822093437958.png" alt="image-20220822093437958"></p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822093504111.png" alt="image-20220822093504111"></p><h3 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构"></a>功能架构</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822093554286.png" alt="image-20220822093554286"></p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822093640021.png" alt="image-20220822093640021"></p><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822094202879.png" alt="image-20220822094202879"></p><h3 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822095730104.png" alt="image-20220822095730104"></p><p>导入前端页面</p><p>创建配置类:配置映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.reggie.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:WebMVcConfig</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.reggie.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/22 10:00</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMVcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/22 10:01</span></span><br><span class="line"><span class="comment">     * @param [registry]</span></span><br><span class="line"><span class="comment">     * @ParamType:[org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry]</span></span><br><span class="line"><span class="comment">     * @Return:void</span></span><br><span class="line"><span class="comment">     * @Description:  设置映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;静态映射成功&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><h3 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822104335865.png" alt="image-20220822104335865"></p><h3 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822111503772.png" alt="image-20220822111503772"></p><h3 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a>添加员工</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822112924750.png" alt="image-20220822112924750"></p><h3 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822132406162.png" alt="image-20220822132406162"></p><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822132432986.png" alt="image-20220822132432986"></p><h3 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822142308663.png" alt="image-20220822142308663"></p><h3 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822144847148.png" alt="image-20220822144847148"></p><h2 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h2><h3 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h3><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822150736198.png" alt="image-20220822150736198"></p><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822155703893.png" alt="image-20220822155703893"></p><p><img src="/2022/08/22/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96/image-20220822160145383.png" alt="image-20220822160145383"></p><h2 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h2><blockquote><p>文件上传时,页面form表单要求</p><ul><li>method&#x3D;“post”</li><li>enctype&#x3D;“multipart&#x2F;form-data”</li><li>type&#x3D;“file”</li></ul><p>服务端 使用apache组件</p><ul><li>commons-fileupload</li><li>commons-io</li></ul><p>在spring中使用spring-web中使用MultipartFile类型的参数</p></blockquote><blockquote><p>文件下载</p><p>两种形式</p><ul><li>以附件的形式下载,弹出保存对话框</li><li>直接在浏览器打开</li></ul><p>服务端将文件以流的形式写回浏览器的过程</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven高级</title>
      <link href="/2022/08/17/Maven%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/08/17/Maven%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分模块开发与设计"><a href="#分模块开发与设计" class="headerlink" title="分模块开发与设计"></a>分模块开发与设计</h2><ol><li>抽取模块 作为独立的模块</li><li>将对应的模块install到本地仓库</li><li>使用dependency引入该jar包</li></ol><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ul><li><p>依赖具有传递性</p><ul><li>直接依赖:在项目中通过依赖配置建立的依赖关系</li><li>间接依赖:被资源的资源如果依赖其他资源,当前项目间接依赖其他资源</li></ul></li><li><p>依赖传递冲突问题</p><ul><li>路径优先:当依赖中出现相同的资源时,层级越深,优先级越低</li><li>声明优先:在资源相同层级被依赖时,配置顺序靠前的覆盖配置顺序靠后的</li><li>特殊优先:当同级配置了相同资源的不同版本,后配置的覆盖先配置的</li></ul></li><li><p>可选依赖</p><blockquote><p>隐藏当前工程所依赖的资源,隐藏后对应的资源不具有传递性</p><p><optional>true</optional></p></blockquote></li><li><p>排除依赖</p><blockquote><exclusions><p>​       <groupId></groupId></p></exclusions></blockquote></li></ul><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><ul><li>聚合:将多个模块组织成一个整体,同时进行项目构建的过程称为聚合</li><li>聚合工程:通常是一个不具有业务功能的空工程(有且只有一个pom文件)</li><li>作用:使用聚合工程可以将多个工程编组,通过对聚合工程进行构建,实现对所包含的模块进行同步<ul><li><p>当工程中某个模块发生更新(变更时),必须保障工程中与已更新模块关联的模块同步更新,此时可以使用聚合工程来解决批量模块同步构建的问题</p><ol><li>将打包方式为pom</li><li><modules><module>模块名</module></modules></li></ol></li></ul></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>概念:继承描述的是两个工程间的关系,与面向对象中的继承相似,子工程可以继承父工程中的配置信息</p></li><li><p>作用:</p><ul><li>简化配置</li><li>减少版本冲突</li></ul><p><denpency>沿用父工程中的依赖</denpency></p><p><depencyManagment>可以选择父工程的依赖 子工程中dependency中提供群组id和项目id</depencyManagment></p></li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>父工程定义属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>变量标签<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件加载属性"><a href="#配置文件加载属性" class="headerlink" title="配置文件加载属性"></a>配置文件加载属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pom加入该标签</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>路径<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>$&#123;project.basedir&#125;true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用maven-war插件配置failOnMissingWebXml 设为false</p></blockquote><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>环境名<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span>属性配置<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">avtivation</span>&gt;</span>是否为默认环境<span class="tag">&lt;/<span class="name">avtivation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h2><p><img src="/2022/08/17/Maven%E9%AB%98%E7%BA%A7/image-20220817232016094.png" alt="image-20220817232016094"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RESTf风格</title>
      <link href="/2022/08/17/RESTf%E9%A3%8E%E6%A0%BC/"/>
      <url>/2022/08/17/RESTf%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>REST(Representational State Transfer),表现形式状态转换</p><ul><li><p>传统</p><ol><li><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></li><li><a href="http://localhost/user/saveuser">http://localhost/user/saveuser</a></li></ol></li><li><p>REST</p><ol><li><a href="http://localhost/usser/1">http://localhost/usser/1</a></li><li><a href="http://localhost/user">http://localhost/user</a></li></ol><p>优点:</p><p>隐藏访问行为</p><p>书写简化</p></li></ul><p>描述</p><pre><code>+ http://localhost/users 查询全部 get+ http://localhost/users/1 查询指定 get+ http://localhost/users 添加 post+ http://localhost/users 修改 put+ http://localhost/users/1 删除 delete</code></pre></li></ul><h2 id="设置请求方式"><a href="#设置请求方式" class="headerlink" title="设置请求方式"></a>设置请求方式</h2><p>在@RequestMapping注解中加入method属性</p><p>路径变量:形式参数使用@PathVariable注解 requestmapping 请求路径使用+&#x2F;{形参名} </p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2022/08/17/SpringMVC/"/>
      <url>/2022/08/17/SpringMVC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li><li>优点<ul><li>使用简单,开发便捷</li><li>灵活性强</li></ul></li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul><li>使用Servlet技术开发Web程序流程<ol><li>创建web工程(Maven结构)</li><li>设置Tomcat服务器,加载web工程(tomcat插件)</li><li>导入Servlet坐标</li><li>定义处理请求的功能类(UserServlet)</li><li>设置请求映射(配置映射关系)</li></ol></li><li>使用SpringMVC技术开发Web流程<ol><li>创建web工程(Maven结构)</li><li>设置Tomcat服务器,加载web工程(tomcat插件)</li><li>导入SpringMVC+Servlet坐标</li><li>定义处理请求的功能类(UserController)</li><li>设置请求映射(配置映射关系)</li><li>将SpringMVC设定加载到Tomcat容器中</li></ol></li></ul><ol><li><p>导入坐标配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:SpringMvcConfig</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/17 14:44</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zjj.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写控制器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:UserController</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/17 14:45</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置请求路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">//设置为响应体</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;srpingmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Servlet配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:ServletContainerInitConfig</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/17 14:47</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainerInitConfig</span>  <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载SpringMVC容器对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        AnnotationConfigWebApplicationContext ctx=<span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//哪些请求归MVC处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//加载Spring对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="工作流程分析"><a href="#工作流程分析" class="headerlink" title="工作流程分析"></a>工作流程分析</h2><ul><li>启动服务器初始化过程<ol><li>服务器启动,执行ServletContainersInitConfig类,初始化Web容器</li><li>执行createServletApplicationContext方法,创建WebApplicationContext对象</li><li>加载SpringMvcConfig</li><li>执行@ComponentScan加载对应的bean</li><li>加载UserController,每个RequestMapping的名称对应一个具体的方法</li><li>执行getServletMapping方法,定义所有的请求都通过SpringMvc</li></ol></li></ul><img src="/2022/08/17/SpringMVC/image-20220817150923184.png" alt="image-20220817150923184" style="zoom:67%;"><ul><li>单次请求过程<ol><li>发送请求localhost&#x2F;save</li><li>web容器发现所有的请求都经过spingMvc,将请求交给SpringMvc处理</li><li>解析请求路径&#x2F;save</li><li>由&#x2F;svae匹配执行对应的方法save()</li><li>执行save()</li><li>检测到有@ResponseBody直接将save方法的返回值作为响应头返回给请求方</li></ol></li></ul><h2 id="Bean加载控制"><a href="#Bean加载控制" class="headerlink" title="Bean加载控制"></a>Bean加载控制</h2><blockquote><p>SpringMVC的bean——加载Spring控制的bean的时候排除掉SpringMVC控制的bean  </p></blockquote><ul><li><p>SpringMVC相关Bean加载控制</p><p>SpringMVC加载的bean对应的包均在com.zjj.controller中</p></li><li><p>Spring相关Bean加载控制</p><ol><li><p>spring加载的bean设定扫描范围为com.zjj,排除掉controller包内的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value = &quot;com.zjj&quot;,</span></span><br><span class="line"><span class="meta">    excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">            type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">            classes = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></li><li><p>spring加载的bean设定扫描范围为精准扫描</p></li></ol></li><li><p>对Servlet配置类进行简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.zjj.config;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ClassName:ServletContainerInitConfig</span></span><br><span class="line"><span class="comment">   * Package:com.zjj.config</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @ Date:2022/8/17 14:47</span></span><br><span class="line"><span class="comment">   * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainerInitConfig</span>  <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">  <span class="comment">//        return new Class[]&#123;&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 设置请求路径</span><br><span class="line"></span><br><span class="line">&gt; 请求名:控制器名+方法</span><br><span class="line">&gt;</span><br><span class="line">&gt; 在类上加请求前缀:<span class="meta">@RequestMapping(“/类名”)</span></span><br><span class="line"></span><br><span class="line">## 参数传递</span><br><span class="line"></span><br><span class="line">方法写在形参上</span><br><span class="line"></span><br><span class="line">设置过滤器</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>普通参数</p><ul><li>参数绑定</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam(&quot;name&quot;)</span>String username,<span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="type">int</span> age</span><br></pre></td></tr></table></figure></li><li><p>实体类属性</p><p>自动装箱传入</p></li><li><p>数组</p><p>自动传入</p></li><li><p>集合</p><p>@RequestBody</p></li><li><p>Json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">//开启json</span></span><br></pre></td></tr></table></figure></li><li><p>日期类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><blockquote><p>响应页面:响应页面名</p><p>响应pojo:使用@ResponseBody</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/08/17/SpringBoot/"/>
      <url>/2022/08/17/SpringBoot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringMVC对比SpringBoot"><a href="#SpringMVC对比SpringBoot" class="headerlink" title="SpringMVC对比SpringBoot"></a>SpringMVC对比SpringBoot</h2><ul><li>SpringMVC<ol><li>导入坐标</li><li>书写配置类</li><li>设置映射路径</li></ol></li></ul><h2 id="创建SpringBoot工程"><a href="#创建SpringBoot工程" class="headerlink" title="创建SpringBoot工程"></a>创建SpringBoot工程</h2><p><img src="/2022/08/17/SpringBoot/image-20220818135606594.png" alt="image-20220818135606594"></p><p><img src="/2022/08/17/SpringBoot/image-20220818135628216.png" alt="image-20220818135628216"></p><p>勾选SpringWeb选项</p><p>除了src和pom全部删除</p><p>书写对应的controller</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>SpringBoot用于简化Spring应用的初始搭建以及开发过程</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><p>改端口</p><ol><li><p>在application.propertis 中serve.port&#x3D;80</p></li><li><p>创建applicatipn.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> </span><br></pre></td></tr></table></figure></li><li><p>创建yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> </span><br></pre></td></tr></table></figure><p>三个文件同时存在时propetis&gt;yml&gt;yaml</p></li></ol></li></ul><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><ul><li><p>YAML(YAML Ain’t Markup Language),一种数据序列化格式</p></li><li><p>优点</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心</li></ul></li><li><p>YAML文件扩展名</p><ul><li>yml主流</li><li>yaml</li></ul></li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>大小写敏感</li><li>用缩进表示层级 不允许使用tab</li><li>属性值前面加空格</li><li>#为注释</li><li>用-表示数组的元素</li></ul><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.@Value(&quot;$&#123;key&#125;&quot;)</span><br><span class="line">pritvte String filedName;</span><br><span class="line">-----------------</span><br><span class="line">2.@Autowired</span><br><span class="line">privateEnviroment environment;</span><br><span class="line">environment.getProperty(&quot;key&quot;);</span><br><span class="line">3.创建实体类</span><br><span class="line">@compent</span><br><span class="line">@CfigutationProties(prefix=&quot;enterprise&quot;)</span><br><span class="line">@Autowired</span><br><span class="line">privateEnviroment environment;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h1><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><h3 id="Vue周边库"><a href="#Vue周边库" class="headerlink" title="Vue周边库"></a>Vue周边库</h3><ul><li>vue-cli:vue脚手架</li><li>vue-resource(axios)：ajax 请求</li><li>vue-router：路由</li><li>vuex：状态管理（它是 vue 的插件但是没有用 vue-xxx 的命名规则）</li><li>vue-lazyload：图片懒加载</li><li>vue-scroller：页面滑动相关</li><li>mint-ui：基于 vue 的 UI 组件库（移动端）</li><li>element-ui：基于 vue 的 UI 组件库（PC 端）</li></ul><h3 id="初识vue"><a href="#初识vue" class="headerlink" title="初识vue"></a>初识vue</h3><h4 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h4><ol><li>安装vue devtools插件</li><li>标签引入<code>vue</code>包</li><li>可选）阻止vue在启动时生成生产提Vue.config.productionTip &#x3D; false</li></ol><h4 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h4><ol><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>root 容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</li><li>root 容器里的代码被称为Vue模板</li><li>Vue 实例与容器是一一对应的</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用</li><li>中的 xxx 要写 js 表达式，且 xxx 可以自动读取到data中的所有属性</li><li>一旦data中的数据发生变化，那么模板中用到该数据的地方也会自动更新</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器与vue挂载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,name:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>addrss:&#123;&#123;addres&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//组织启动提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//data里的数据变了页面跟着变</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>, <span class="comment">//与div挂载</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;zjj&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">addres</span>: <span class="string">&#x27;ganzhou&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模板语法与数据绑定"><a href="#模板语法与数据绑定" class="headerlink" title="模板语法与数据绑定"></a>模板语法与数据绑定</h2><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><ol><li><p><strong>插值语法</strong></p><p>功能:解析标签体的内容</p><p>写法:,xxx可以是js表达式,也可以是data的数据</p></li><li><p><strong>指令语法</strong></p></li></ol><p>​ 功能:用于解析标签（包括：标签属性、标签体内容、绑定事件…）</p><p>​ 举例:<a v-bind:href="xxx">或简写为<a :href="xxx">，xxx 同样要写 js 表达式，可以直接读取到 data 中的所有属性</a></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器与vue挂载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>name:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;obj.url&quot;</span>&gt;</span>点我去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;obj.url&quot;</span>&gt;</span>点我去看&#123;&#123;obj.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//组织启动提示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data里的数据变了页面跟着变</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>, <span class="comment">//与div挂载</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;zjj&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;百度&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">addres</span>: <span class="string">&#x27;ganzhou&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&#x27;https://wwww.baidu.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-bind简写为:</p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><ol><li>v-bind从data流向挂载容器</li><li>v-model容器和data互相绑定</li></ol><blockquote><p>双向绑定一般都应用在表单类元素上，如 <input><select></select><textarea>等</textarea></p><p>v-model:value可以简写为v-model，因为v-model默认收集的就是value值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器与vue挂载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通写法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; v-bind:value=&quot;name1&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">        &lt;input type=&quot;text&quot; v-model:value=&quot;name2&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">        简写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//组织启动提示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data里的数据变了页面跟着变</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">//与div挂载</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name1</span>: <span class="string">&#x27;zjj&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name2</span>: <span class="string">&#x27;zjj2&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MVVM模型数据代理"><a href="#MVVM模型数据代理" class="headerlink" title="MVVM模型数据代理"></a>MVVM模型数据代理</h2><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1643097677438-36b4834c-18e8-4cd0-aa8e-c5f154e6bde0.jpeg" alt="img"></p><p><code>MVVM</code>模型</p><ul><li>M:Model data中的数据</li><li>V:View 模版代码</li><li>VM:视图模型ViewModel,Vue实例</li></ul><h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person= &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zjj&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// value:18,</span></span><br><span class="line">    <span class="comment">// enumberable:true //属性是否能被枚举 默认为F</span></span><br><span class="line">    <span class="comment">// writable:true, // 属性是否能被修改 默认为f</span></span><br><span class="line">    <span class="comment">// configurable:true // 属性是否能被删除 默认为f</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当读取person的age get被执行</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//person被修改 执行</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">     <span class="comment">//方法体       </span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//当只有一个方法默认为get</span></span><br></pre></td></tr></table></figure><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        obj.<span class="property">x</span>=value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>vue中的数据代理通过vm对象来代理data对象属性的操作</li><li>vue数据代理好处 方便操作data</li><li>基本原理<ol><li>通过Object.defineProperty()把data对象的所有属性添加到vm上</li><li>为每一个添加到vm的属性指定一个get和set</li><li>在get和set内部去读写data的属性</li></ol></li></ol><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1643033436297-5d2d61ec-ed69-4706-a98d-afdbd53b383d.png" alt="img"></p><p>Vue将data中的数据拷贝了一份到_data属性中，又将_data里面的属性提到Vue实例中（如name），通过defineProperty实现数据代理，这样通过geter&#x2F;setter操作 name，进而操作_data中的 name。而_data又对data进行数据劫持，实现响应式</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ol><li>使用v-on:xxx或@xxx来绑定事件,其中xxx为事件名</li><li>事件的回调需要配置在methods对象上,最终到达vm</li><li>methods配置的函数不要使用箭头函数</li><li>methods配置的函数都能被this指向</li><li>@click&#x3D;”demo”和@click&#x3D;”demo($event)”效果一致，但后者可以传参</li></ol><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的所以引出计算属性</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 计算属性的 getter</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">reversedMessage</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// `this` 指向 vm 实例</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>底层使用Object.defineproperty()方法提供的get set</li><li>get在什么时候执行<ol><li>第一次读取的时候执行一次</li><li>依赖的数据发生改变读取一次</li></ol></li><li>优势:有缓存机制</li><li>备注<ol><li>计算属性会出现在this实例上</li><li>计算属性如果要被修改 必须实现set函数</li><li>如果不考虑修改可省略 使用一个函数即可</li></ol></li></ol><h3 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h3><p>watch：</p><pre><code> 1. 当被监视的属性发生变化时,回调函数自动调用,进行相关操作 2. 监听属性必须存在才能监听可以监听data和计算属性 3. immediate.false,改为true,则初始化调用一次回调 4. 有两种写法</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// watch: &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     isHot: &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         immediate: true,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//             alert(&#x27;isHot被修改了&#x27;, newValue, oldValue)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// expOrFn为监听的属性或者函数的返回值,callback为回调函数 默认为旧的值和</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改变&#x27;</span>, newValue, oldValue)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h3><ol><li>vue中的watch只能监听对象不能监听对象内部的信息</li><li>可以在watch中配置deep:true 开启内部监听</li></ol><h2 id="绑定样式-条件渲染"><a href="#绑定样式-条件渲染" class="headerlink" title="绑定样式 条件渲染"></a>绑定样式 条件渲染</h2><h3 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h3><p>class样式</p><ul><li>写法 :class&#x3D;“xxx” xxx可以是字符串、数组、对象</li><li>:style&#x3D;“[a,b]”  a,b为样式对象</li><li>:style &#x3D;“{fontSize: xxx}” xxx为动态的值<ul><li>字符串适用于 类名不确定 需要动态获取</li><li>数组 适用于绑定多个样式 个数和名字不确定</li><li>对象适用于 绑定多个样式 个数 名字都确定 但不确定是否使用</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div :style=&quot;&#123;fontSize: size&#125;&quot;&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: size +&#x27;em&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;&#123;&#123;size&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;/div&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addStyle&quot;</span>&gt;</span>字体放大<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;subStyle&quot;</span>&gt;</span>字体缩小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;zjj&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">size</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">addStyle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">size</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">subStyle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">size</span> -= <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><code>v-if</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">  Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Now you don&#x27;t</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换登陆</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-show</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><blockquote><p>仅仅把style样式修改,而不是删除dom</p></blockquote><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p><code>v-for</code></p><p>●用于展示列表数据</p><p>●语法：<li v-for="(item, index) of items" :key="index">，这里key可以是index，更好的是遍历对象的唯一标识</li></p><p>●可遍历：数组、对象、字符串（用的少）、指定次数（用的少）</p><h4 id="key原理"><a href="#key原理" class="headerlink" title="key原理"></a>key原理</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">index为索引</span><br></pre></td></tr></table></figure><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1643033767087-2558e992-b48b-4b54-a9b8-86eb8534bd98.png" alt="image.png"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1643033764359-6a37a493-bb51-4b3b-8b14-822a3df68d6e.png" alt="image.png"></p><ol><li><code>虚拟DOM</code>中的<code>key</code>的作用:key是虚拟dom中对象的标识,当数据发生变化时,vue会根据新数据生成新的虚拟dom,随后vue将新的虚拟dom和旧的虚拟dom进行对比</li><li>对比规则<ol><li>旧dom中找到了与新dom相同的key<ol><li>若dom内容没变,直接使用之前的真实dom</li><li>若dom内容发生改变,则生成真实的dom,随后替换掉页面中之前真实的dom</li></ol></li><li>旧dom没有找到与新dom相同的key<ol><li>创建新的dom,随后渲染到页面</li></ol></li><li>用index作为key可能会引发的问题<ol><li>对数据进行逆序添加,逆序删除破坏顺序操作,会产生没有必要的真实dom更新&#x3D;&#x3D;》页面效果没有问题,效率低</li><li>若结构中还包含输入类的dom,会产生错误dom更新</li></ol></li><li>如何选择key<ol><li>最好使用每条数据的唯一标识作为key</li><li>如果不存在破坏顺序的操作可以使用index</li></ol></li></ol></li></ol><h4 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">keyWord</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sortType</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">perosons</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;马冬梅&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;周冬雨&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;周杰伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">21</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="string">&#x27;004&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;温兆伦&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, ],</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// filPersons: []</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// watch实现</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//#region </span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// watch: &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     keyWord: &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         immediate: true,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         handler(val) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//             this.filPersons = this.perosons.filter((p) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//                 return p.name.indexOf(val) !== -1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//             &#125;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//#endregion</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// computed实现</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">filPersons</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">perosons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) != -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sortType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p2.<span class="property">age</span> - p1.<span class="property">age</span> : p1.<span class="property">age</span> - p2.<span class="property">age</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据监视"><a href="#数据监视" class="headerlink" title="数据监视"></a>数据监视</h3><ol><li><p>vue会监视data中所有层次的数据</p></li><li><p>如何监测对象中的数据？ 通过setter实现监视，且要在new Vue()时就传入要监测的数据 </p><ol><li>对象创建后追加的属性，Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下API<br>Vue.set(target,propertyName&#x2F;index,value)<br>vm.$set(target,propertyName&#x2F;index,value)</li></ol></li><li><p>如何监测数组中的数据</p><p>通过包裹数组更新元素的方法实现，本质就是做了两件事</p><ol><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ol></li><li><p>在Vue修改数组中的某个元素一定要用如下方法 </p><p>push()pop()unshift()shift()splice()sort()reverse()这几个方法被Vue重写了<br>Vue.set()或vm.$set()</p></li></ol><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据<img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922174103968.png" alt="image-20220922174103968"></h2><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922175827366.png" alt="image-20220922175827366"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922175836842.png" alt="image-20220922175836842"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922175856746.png" alt="image-20220922175856746"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922175946264.png" alt="image-20220922175946264"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922180003375.png" alt="image-20220922180003375"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922180020524.png" alt="image-20220922180020524"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922180049920.png" alt="image-20220922180049920"></p><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1643297176928-5d5ac765-237c-462d-9188-84935e6c3c69.png"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922203724844.png" alt="image-20220922203724844"></p><h1 id="组件化编程"><a href="#组件化编程" class="headerlink" title="组件化编程"></a>组件化编程</h1><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><p>一个文件中包含有n个组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Myschool</span>&gt;</span><span class="tag">&lt;/<span class="name">Myschool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //创建school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const schoolComponent = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //组件不能写vm配置项</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称:</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址:</span><span class="template-variable">&#123;&#123;<span class="name">addres</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //data属性只能写成函数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    schoolName: &#x27;江西理工大学&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    addres: &#x27;中国赣州&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const studentComponent = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名:</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄:</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                studentName: &#x27;zjj&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                age: 18</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //组件不能写vm配置项</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称:</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址:</span><span class="template-variable">&#123;&#123;<span class="name">addres</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //data属性只能写成函数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    schoolName: &#x27;清华大学&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    addres: &#x27;中国北京&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //全局注册组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;Myschool&#x27;, school)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //注册组件 局部注册</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            school: schoolComponent,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            student: studentComponent</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922212540813.png" alt="image-20220922212540813"></p><h3 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h3><blockquote><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922212917576.png" alt="image-20220922212917576"></p></blockquote><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const studentComponent = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名:</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄:</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            name: &#x27;student&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    studentName: &#x27;zjj&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    age: 18</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const schoolComponent = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称:</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址:</span><span class="template-variable">&#123;&#123;<span class="name">addres</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    schoolName: &#x27;江西理工大学&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    addres: &#x27;中国赣州&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //注册学生组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                student: studentComponent</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml">牛逼!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    msg: &#x27;zjj&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //定义最大根组件取名为app</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">schoolComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">schoolComponent</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            schoolComponent,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            hello</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            app,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件构造函数"><a href="#组件构造函数" class="headerlink" title="组件构造函数"></a>组件构造函数</h3><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220922224201821.png" alt="image-20220922224201821"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/1643034116880-0c7ffd4b-f0ed-47b2-9638-3bb71344c4f1.png" alt="img"></p><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>一个文件只包含一个组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 组件结构 --&gt;</span><br><span class="line">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学校名称:&#123;&#123; schoolName &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学校地址:&#123;&#123; address &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 组件的交互</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;School&#x27;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            schoolName:&#x27;江西理工大学&#x27;,</span><br><span class="line">            address:&#x27;中国赣州&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.schoolName)</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 组件样式 */</span><br><span class="line">.demo&#123;</span><br><span class="line">    background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名:&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名:&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Student&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;zjj&quot;,</span><br><span class="line">      age: 20</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&#x27;scss&#x27; scoped&gt;</span><br><span class="line">.student &#123;</span><br><span class="line">  background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;School&gt;&lt;/School&gt;</span><br><span class="line">    &lt;Student&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//引入组件</span><br><span class="line">import Student from &quot;./Student&quot;</span><br><span class="line">import School from &quot;./School&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    School,</span><br><span class="line">    Student</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&#x27;scss&#x27; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol><li>如果下载缓慢请配置npm淘宝镜像npm config set registry http://registry.npm.taobao.org</li><li>全局安装 @vue&#x2F;cli npm install -g @vue&#x2F;cli</li><li>切换到创建项目的目录，使用命令创建项目vue create xxx</li><li>选择使用vue的版本</li><li>启动项目npm run serve</li><li>打包项目npm run build</li><li>暂停项目 Ctrl+C</li></ol><blockquote><p>Vue脚手架隐藏了所有webpack相关的配置，若想查看具体的webpack配置，请执行<br>vue inspect &gt; output.js</p></blockquote><blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">用法：create [options] &lt;app-name&gt;</span><br><span class="line"></span><br><span class="line">创建一个由 `vue-cli-service` 提供支持的新项目</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"></span><br><span class="line">  -p, --preset &lt;presetName&gt;       忽略提示符并使用已保存的或远程的预设选项</span><br><span class="line">  -d, --default                   忽略提示符并使用默认预设选项</span><br><span class="line">  -i, --inlinePreset &lt;json&gt;       忽略提示符并使用内联的 JSON 字符串预设选项</span><br><span class="line">  -m, --packageManager &lt;command&gt;  在安装依赖时使用指定的 npm 客户端</span><br><span class="line">  -r, --registry &lt;url&gt;            在安装依赖时使用指定的 npm registry</span><br><span class="line">  -g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息</span><br><span class="line">  -n, --no-git                    跳过 git 初始化</span><br><span class="line">  -f, --force                     覆写目标目录可能存在的配置</span><br><span class="line">  -c, --clone                     使用 git clone 获取远程预设选项</span><br><span class="line">  -x, --proxy                     使用指定的代理创建项目</span><br><span class="line">  -b, --bare                      创建项目时省略默认组件中的新手指导信息</span><br><span class="line">  -h, --<span class="built_in">help</span>                      输出使用帮助信息</span><br></pre></td></tr></table></figure></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923002753240.png" alt="image-20220923002753240"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923181836708.png" alt="image-20220923181836708"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923181858422.png" alt="image-20220923181858422"></p><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><p>ref被用来给元素或子组件引用信息</p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923184436401.png" alt="image-20220923184436401"></p><h3 id="props配置"><a href="#props配置" class="headerlink" title="props配置"></a>props配置</h3><p>props让组件接收外部传来的数据</p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923184730598.png" alt="image-20220923184730598"></p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923185829133.png" alt="image-20220923185829133"></p><h3 id="mixin复用属性"><a href="#mixin复用属性" class="headerlink" title="mixin复用属性"></a>mixin复用属性</h3><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923191000515.png" alt="image-20220923191000515"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923191216715.png" alt="image-20220923191216715"></p><h3 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h3><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220923192102357.png" alt="image-20220923192102357"></p><h2 id="组件自定义事件"><a href="#组件自定义事件" class="headerlink" title="组件自定义事件"></a>组件自定义事件</h2><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">====绑定事件并触发</span><br><span class="line">&lt;Student v-on:atguigu=&quot;demo&quot;/&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">demo()&#123;</span><br><span class="line">console.log(&quot;demo被调用&quot;,name)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">========</span><br><span class="line">&lt;button @click=&quot;sendStudentName&quot;&gt;</span><br><span class="line">   把学生名给APP </span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    sendStudentName()&#123;</span><br><span class="line">        //触发Student实例的atguigu事件</span><br><span class="line">        this.$emit(&#x27;atguigu&#x27;,this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ref</span><br><span class="line"></span><br><span class="line">monted()&#123;</span><br><span class="line">this.$refs.student.$on(&#x27;atguigu&#x27;,this.getStudentName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    this.$off(&#x27;atguigu&#x27;)//解绑一个</span><br><span class="line">    //解绑多个个传数组</span><br><span class="line">    this.$off([&#x27;atguigu&#x27;,&#x27;demo&#x27;])</span><br><span class="line">    //解绑所有的</span><br><span class="line">    this.$off()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>.native组件使用原生组件</p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220924150615186.png" alt="image-20220924150615186"></p><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220924151401992.png" alt="image-20220924151401992"></p><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220924152855795.png" alt="image-20220924152855795"></p><h2 id="Vue中的Ajax配置代理slot插槽"><a href="#Vue中的Ajax配置代理slot插槽" class="headerlink" title="Vue中的Ajax配置代理slot插槽"></a>Vue中的Ajax配置代理slot插槽</h2><h3 id="脚手架配置代理"><a href="#脚手架配置代理" class="headerlink" title="脚手架配置代理"></a>脚手架配置代理</h3><p>npm install axios</p><p><img src="/2022/08/15/vue%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220924153734440.png" alt="image-20220924153734440"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AJAX</title>
      <link href="/2022/08/15/AJAX/"/>
      <url>/2022/08/15/AJAX/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ul><li>概念:AJAX(Asynchronous JavaScript And XML)</li><li>AJAX作用:<ol><li>与服务器进行数据交换,通过ajax给服务发送请求,获取服务器响应的数据</li><li>异步交互:可以在不重新加载整个页面的情况下,与服务器交换数据并更新部分网页的技术,用户是否校验等</li></ol></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>编写AjaxServlet,使用resp输出字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ajaxServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        响应数据</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello ajax&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建XMLHttpRequest对象:用于和服务器交换数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 创建核心对象</span></span><br><span class="line">        <span class="keyword">var</span> xhttp;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">            xhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        xhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8888/AJAX/ajaxServlet&quot;</span>);</span><br><span class="line">        xhttp.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">// 获取响应</span></span><br><span class="line">        xhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li><p>引入axios</p></li><li><p>发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>, <span class="attr">url</span>:<span class="string">&quot;http://localhost:8888/AJAX/selectUserServlet?username=zhangsang&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>, <span class="attr">url</span>:<span class="string">&quot;http://localhost:8888/AJAX/selectUserServlet&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&quot;username=zhangsang&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">request</span>(config)</span><br><span class="line">axios.<span class="title function_">get</span>(url[, config])</span><br><span class="line">axios.<span class="title function_">delete</span>(url[, config])</span><br><span class="line">axios.<span class="title function_">head</span>(url[, config])</span><br><span class="line">axios.<span class="title function_">options</span>(url[, config])</span><br><span class="line">axios.<span class="title function_">post</span>(url[, data[, config]])</span><br><span class="line">axios.<span class="title function_">put</span>(url[, data[, config]])</span><br><span class="line">axios.<span class="title function_">patch</span>(url[, data[, config]])</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li>概念:JavaScript Object Notation，JavaScript对象表示法</li><li>由于语法简单,层次结构鲜明,多用于作为数据载体,在网络中传输</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="string">&#x27;&#123;&quot;key&quot;:value,&quot;key&quot;:value,...&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>key必须为字符串 值可以是任意</p></li></ul><p>取值 将json转换为对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsobj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(obj);</span><br></pre></td></tr></table></figure><p>js对象转为json对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json=<span class="title class_">JSON</span>.<span class="title class_">Stringify</span>(obj)</span><br></pre></td></tr></table></figure><h2 id="JSON、Java对象互相转换"><a href="#JSON、Java对象互相转换" class="headerlink" title="JSON、Java对象互相转换"></a>JSON、Java对象互相转换</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将字符串解析成JSONObject</span></span><br><span class="line">   <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String str)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 将字符串解析成JSONArray</span></span><br><span class="line">   <span class="keyword">static</span> JSONArray <span class="title function_">parseArray</span><span class="params">(String str)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 将字符串解析成Java对象</span></span><br><span class="line">   <span class="keyword">static</span> T <span class="title function_">parseObject</span><span class="params">(<span class="type">byte</span>[] utf8Bytes, Class&lt;T&gt; objectClass)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将Java对象输出成字符串</span></span><br><span class="line">   <span class="keyword">static</span> String <span class="title function_">toJSONString</span><span class="params">(Object object)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 将Java对象输出成UT8编码的byte[]</span></span><br><span class="line">   <span class="keyword">static</span> <span class="type">byte</span>[] toJSONBytes(Object object);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器和监听器</title>
      <link href="/2022/08/15/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2022/08/15/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter(过滤器)"></a>Filter(过滤器)</h2><ul><li>概念:Filter表示过滤器,是JavaWeb三大组件(Servlet,Filter,Listener)之一</li><li>过滤器可以把对资源的请求拦截下来,从而实现特殊的功能</li><li>过滤器一般完成一些通用饿操作如权限控制统一编码处理敏感字符处理等</li></ul><p><img src="/2022/08/15/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/image-20220815181611982.png" alt="image-20220815181611982"></p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><ol><li><p>定义类实现Filter接口重写所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Filter拦截资源的路径:在类上使用@WebFilter注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>在doFilter方法中实现功能并放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;过滤器执行&quot;</span>);</span><br><span class="line">       filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p><img src="/2022/08/15/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/image-20220815182725616.png" alt="image-20220815182725616"></p></li></ol><h3 id="拦截路径配置规则"><a href="#拦截路径配置规则" class="headerlink" title="拦截路径配置规则"></a>拦截路径配置规则</h3><ul><li>拦截具体的资源:&#x2F;index.jsp</li><li>目录拦截:&#x2F;user&#x2F;*</li><li>后缀名拦截:*.jsp</li><li>拦截所有:&#x2F;*</li></ul><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p><img src="/2022/08/15/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/image-20220815183206338.png" alt="image-20220815183206338"></p><ul><li>优先级按照类名的自然排序</li></ul><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><ul><li>Listener 表示监听器，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一</li><li>监听器可以监听就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件</li><li>Listener分类：JavaWeb中提供了8个监听器</li></ul><p><img src="/2022/08/15/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/image-20220815183750455.png" alt="image-20220815183750455"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie和Session</title>
      <link href="/2022/08/15/cookie%E5%92%8CSession/"/>
      <url>/2022/08/15/cookie%E5%92%8CSession/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>会话:用户打开浏览器,访问web服务器的资源,会话建立,直到有一方断开连接,会话结束,在一起会话中可以包含<code>多次</code>请求和响应</p></li><li><p>会话跟踪:一种维护浏览器状态的方法,服务器需要多次请求是否来自同一浏览器,以便在同一次会话的多次请求间<code>共享</code>数据.</p></li><li><p>HTTP协议是<code>无状态</code>的,每次浏览器向服务器请求时,服务器都会将该请求视为<code>新</code>的请求,因此我们需要会话跟踪技术来实现会话内的数据共享.</p></li><li><p>实现方式</p><ol><li>客户端会话跟踪技术:<code>Cookie</code></li><li>服务端会话跟踪技术:<code>Session</code></li></ol></li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Cookie基本使用"><a href="#Cookie基本使用" class="headerlink" title="Cookie基本使用"></a>Cookie基本使用</h3><ul><li><p>Cookie:客户端会话技术,将数据保存到客户端,以后每次请求都携带Cookie数据进行访问</p></li><li><p>Cookie基本使用</p></li><li><p>发送Cookie</p><ol><li><p>创建Cookie对象设置数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>发送Cookie到客户端,使用response对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>接收Cookie</p><ol><li><p>获取Cookie数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure></li><li><p>遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;username&quot;</span>.equals(name))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">                System.out.println(name+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Cookie原理"><a href="#Cookie原理" class="headerlink" title="Cookie原理"></a>Cookie原理</h3><ul><li>Cookie的实现是基于HTTP协议的<ul><li>响应头:set-cookie</li><li>请求头:cookie</li></ul></li></ul><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ul><li><p>Cookie存活时间</p><pre><code>1. 默认情况下Cookie存储在浏览器内存中,浏览器关闭Cookie即消失   2. SetMaxAge(int seconds):设置Cookie存活时间          1. 正数:将cookie写入浏览器所在的电脑硬盘,持久化存储,到时间自动删除          2. 负数:默认,Cookie写入浏览器内存,浏览器关闭,销毁          3. 零:删除对应cookie</code></pre></li><li><p>Cookie存储中文</p><ul><li><p>Cookie不能直接存储中文</p></li><li><p>使用URL编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value= URLEncoder.encode(value,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">       value=URLDecoder.decode(value,<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul><li><p>服务端会话跟踪技术:将数据保存到服务端</p></li><li><p>JAVAEE提供HttpSession接口,来实现一次会话的多次请求间数据共享功能</p></li></ul><h3 id="Session基本使用"><a href="#Session基本使用" class="headerlink" title="Session基本使用"></a>Session基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 获取session对象</span><br><span class="line">   <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="number">2.</span> Session对象功能</span><br><span class="line">   <span class="number">1.</span><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String var1, Object var2)</span>; <span class="comment">//存储数据到session域中</span></span><br><span class="line">   <span class="number">2.</span>Object <span class="title function_">getAttribute</span><span class="params">(String var1)</span>; <span class="comment">//根据key获取值</span></span><br><span class="line">   <span class="number">3.</span><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String var1)</span>; <span class="comment">//根据key删除键值对</span></span><br></pre></td></tr></table></figure><h3 id="Session原理"><a href="#Session原理" class="headerlink" title="Session原理"></a>Session原理</h3><ul><li><p>Session是基于Cookie实现的</p><p><img src="/2022/08/15/cookie%E5%92%8CSession/image-20220815120944437.png" alt="image-20220815120944437"></p></li></ul><h3 id="Session使用细节"><a href="#Session使用细节" class="headerlink" title="Session使用细节"></a>Session使用细节</h3><ul><li><p>Session钝化、活化</p><ul><li>服务器重启后,Session中的数据是否还存在? 存在<ul><li>钝化:在服务器正常关闭时,Tomcat会自动将Session数据写入硬盘的文件中</li><li>活化:再次启动服务器后,从文件加载数据到Session中</li></ul></li></ul></li><li><p>Session销毁</p><ul><li><p>默认情况下无操作30分钟自动销毁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span> web.xml中单位为分钟</span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC三层架构</title>
      <link href="/2022/08/14/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
      <url>/2022/08/14/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>MVC是一种分层开发的模式<ul><li>M:Model,业务模型,处理业务</li><li>V:View,视图,界面展示</li><li>C:Controller,控制器,处理请求,调用模型和视图</li></ul></li></ul><img src="/2022/08/14/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/image-20220814182645786.png" alt="image-20220814182645786" style="zoom:67%;"><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><img src="/2022/08/14/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/image-20220814183510754.png" alt="image-20220814183510754" style="zoom:67%;"><ul><li>Dao包:数据访问层:对数据库的CRUD操作</li><li>Service包:业务逻辑层:对业务逻辑进行封装,组合数据访问层的基本功能,形成复杂的业务逻辑功能</li><li>Controller:包接受请求 封装数据 调用业务逻辑层 响应数据</li></ul><img src="/2022/08/14/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/image-20220814183657976.png" alt="image-20220814183657976" style="zoom:80%;"><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="/2022/08/14/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/image-20220814184544215.png" alt="image-20220814184544215"></p><h3 id="查询所有实现"><a href="#查询所有实现" class="headerlink" title="查询所有实现"></a>查询所有实现</h3><ol><li><p>创建Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/14 18:47</span></span><br><span class="line"><span class="comment">     * @param []</span></span><br><span class="line"><span class="comment">     * @ParamType:[]</span></span><br><span class="line"><span class="comment">     * @Return:java.util.List&lt;com.zjj.pojo.Brand&gt;</span></span><br><span class="line"><span class="comment">     * @Description: 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_brand&quot;)</span></span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用BrandMapper.SelectAll()</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        List&lt;Brand&gt; brands = mapper.selectAll();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建静态代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/brand/selectAllServlet&quot;</span>&gt;</span>查询所有<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/selectAllServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">selectAllServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.调用BrandService查询</span></span><br><span class="line">        List&lt;Brand&gt; brands = service.selectAll();</span><br><span class="line">        <span class="comment">//2.存入域</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;brands&quot;</span>,brands);</span><br><span class="line">        <span class="comment">//3.转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/brand.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写brand.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> width=<span class="string">&quot;800&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;企业名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;排序&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌介绍&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;brands&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;data&quot;</span>&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;data.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;data.brandName&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;data.companyName&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;data.ordered&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;data.description&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;data.status&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;修改&lt;/a&gt; &lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><ol><li><p>创建mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into tb_brand values(null,#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class="line">    Boolean <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">add</span><span class="params">(Brand brand)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> mapper.add(brand);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>编写在查询页添加内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;add&quot;</span>).<span class="property">onclick</span>=<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         location.<span class="property">href</span> = <span class="string">&quot;/brand/addBrand.jsp&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写jsp代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: .crush</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">8</span>/<span class="number">14</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">48</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;添加品牌&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;添加品牌&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/brand/addServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    品牌名称：&lt;label&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;brandName&quot;</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    企业名称：&lt;label&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;companyName&quot;</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    排序：&lt;label&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;ordered&quot;</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    描述信息：&lt;label&gt;</span><br><span class="line">    &lt;textarea rows=<span class="string">&quot;5&quot;</span> cols=<span class="string">&quot;20&quot;</span> name=<span class="string">&quot;description&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    状态：</span><br><span class="line">    &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;status&quot;</span> value=<span class="string">&quot;0&quot;</span>&gt;禁用</span><br><span class="line">    &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;status&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;启用&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.zjj.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:addServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/14 19:21</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/addServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">addServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;brandName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;companyName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ordered</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;ordered&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        brand.setBrandName(brandName);</span><br><span class="line">        brand.setCompanyName(companyName);</span><br><span class="line">        brand.setDescription(description);</span><br><span class="line">        brand.setStatus(Integer.valueOf(status));</span><br><span class="line">        brand.setOrdered(Integer.valueOf(ordered));</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        service.add(brand);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/selectAllServlet&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h3><ol><li><p>添加mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_brand where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">   Brand <span class="title function_">selectById</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> mapper.selectById();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.zjj.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:selectAllServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/14 18:57</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/selectByIdServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">selectByIdServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.调用BrandService查询</span></span><br><span class="line">        String id=req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> service.selectById(Integer.parseInt(id));</span><br><span class="line">        <span class="comment">//2.存入域</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        <span class="comment">//3.转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/update.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: .crush</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">8</span>/<span class="number">14</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">48</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改品牌&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;修改品牌&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/brand/addServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    品牌名称：&lt;label&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;id&quot;</span> type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;$&#123;brand.id&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;brandName&quot;</span> value=<span class="string">&quot;$&#123;brand.brandName&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    企业名称：&lt;label&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;companyName&quot;</span> value=<span class="string">&quot;$&#123;brand.companyName&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    排序：&lt;label&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;ordered&quot;</span>  value=<span class="string">&quot;$&#123;brand.ordered&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    描述信息：&lt;label&gt;</span><br><span class="line">    &lt;textarea rows=<span class="string">&quot;5&quot;</span> cols=<span class="string">&quot;20&quot;</span> name=<span class="string">&quot;description&quot;</span>&gt;$&#123;brand.description&#125;&lt;/textarea&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    状态：</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;brand.status==0&#125;&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;status&quot;</span> value=<span class="string">&quot;0&quot;</span> checked&gt;禁用</span><br><span class="line">            &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;status&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;启用&lt;br&gt;</span><br><span class="line">        &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;brand.status==1&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;status&quot;</span> value=<span class="string">&quot;0&quot;</span>&gt;禁用</span><br><span class="line">        &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;status&quot;</span> value=<span class="string">&quot;1&quot;</span> checked&gt;启用&lt;br&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;update tb_brand set brandName=#&#123;brandName&#125;,companyName = #&#123;companyName&#125;,ordered=#&#123;ordered&#125;,description=#&#123;description&#125;,status =#&#123;status&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        mapper.update(brand);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>编写servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.zjj.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:updateServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/14 20:56</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/updateServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">updateServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;brandName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;companyName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ordered</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;ordered&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        brand.setBrandName(brandName);</span><br><span class="line">        brand.setId(Integer.valueOf(id));</span><br><span class="line">        brand.setCompanyName(companyName);</span><br><span class="line">        brand.setDescription(description);</span><br><span class="line">        brand.setStatus(Integer.valueOf(status));</span><br><span class="line">        brand.setOrdered(Integer.valueOf(ordered));</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        service.update(brand);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/selectAllServlet&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h3><ol><li><p>编写mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from tb_brand where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        mapper.delete(id);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>编写jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;/brand/deleteByIdServlet?id=$&#123;data.id&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:deleteByIdServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/14 21:31</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.zjj.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:selectAllServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/14 18:57</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/deleteByIdServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">deleteByIdServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="type">BrandService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.调用BrandService查询</span></span><br><span class="line">        String id=req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        service.delete(Integer.parseInt(id));</span><br><span class="line">        <span class="comment">//2.存入域</span></span><br><span class="line">        <span class="comment">//3.转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/selectAllServlet&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP</title>
      <link href="/2022/08/14/JSP/"/>
      <url>/2022/08/14/JSP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><ul><li>Java Server Pages,Java服务端页面</li><li>一种动态的网页技术,既可以定义HTML、JS、CSS等静态内容,还可以定义Java的动态内容</li></ul></blockquote><h2 id="JSP入门"><a href="#JSP入门" class="headerlink" title="JSP入门"></a>JSP入门</h2><h3 id="1-导入jsp坐标"><a href="#1-导入jsp坐标" class="headerlink" title="1.导入jsp坐标"></a>1.导入jsp坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建JSP文件编写代码"><a href="#2-创建JSP文件编写代码" class="headerlink" title="2.创建JSP文件编写代码"></a>2.创建JSP文件编写代码</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: .crush</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">8</span>/<span class="number">14</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">14</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsp你好&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;hello jsp&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JSP原理"><a href="#JSP原理" class="headerlink" title="JSP原理"></a>JSP原理</h2><p><img src="/2022/08/14/JSP/image-20220814161736815.png" alt="image-20220814161736815"></p><blockquote><p>jsp在被访问时,由JSP容器(Tomcat)将其转换为Java文件(Servlet),由JSP容器(Tomcat)将其编译,最终对外提供服务的其实就是class的字节码文件</p></blockquote><h2 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h2><ul><li>JSP脚本用于在JSP页面内定义Java代码</li><li>JSP脚本父类<br>        1. &lt;%…%&gt;:内容会直接放在__jspService()方法中<br>        1. &lt;%&#x3D;..%&gt;:内容会放在out.print()中,作为out.print()的参数<br>        1. &lt;%!…%&gt;:内容会放在__jspService()方法之外,被类直接包含</li></ul><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ul><li>Expression Language表达式语言,简化JSP页面内的Java代码</li><li>功能:获取数据</li><li>语法:${expression} 获取key为expression为键的值</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储到域</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;brands&quot;</span>,brands);</span><br><span class="line"><span class="comment">//转发到jsp</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/Brand.jsp&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><p>jsp接收</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;brands&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>JavaWeb的四大域<br>        1. page:当前页面有效<br>        1. request:当前请求有效<br>        1. session:当前会话有效<br>        1. application:当前应用有效</li></ul><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSP引入JSTL"><a href="#JSP引入JSTL" class="headerlink" title="JSP引入JSTL"></a>JSP引入JSTL</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> width=<span class="string">&quot;800&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;企业名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;排序&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;品牌介绍&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;brands&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;data&quot;</span>&gt;</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;data.status eq 1&#125;&quot;</span>&gt;</span><br><span class="line">            &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.brandName&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.companyName&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.ordered&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.description&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;data.status&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;修改&lt;/a&gt; &lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习</title>
      <link href="/2022/08/13/Request%E3%80%81Response%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/"/>
      <url>/2022/08/13/Request%E3%80%81Response%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-添加实体类"><a href="#2-添加实体类" class="headerlink" title="2. 添加实体类"></a>2. 添加实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web.pojo;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">private</span> Integer id;</span><br><span class="line">       <span class="keyword">private</span> String username;</span><br><span class="line">       <span class="keyword">private</span> String password;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> id;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.id = id;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> username;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.username = username;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> password;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.password = password;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                   <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><h2 id="3-添加mybatis配置文件"><a href="#3-添加mybatis配置文件" class="headerlink" title="3.添加mybatis配置文件"></a>3.添加mybatis配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.web.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///db1?useSSL=false<span class="symbol">&amp;amp;</span>useServerPrepStmts=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;979508.a&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.web.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-添加mapper映射文件"><a href="#4-添加mapper映射文件" class="headerlink" title="4. 添加mapper映射文件"></a>4. 添加mapper映射文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zjj.web.mapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-添加mapper接口"><a href="#5-添加mapper接口" class="headerlink" title="5. 添加mapper接口"></a>5. 添加mapper接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.web.pojo.User;</span><br><span class="line"><span class="keyword">import</span> jdk.jfr.Description;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:UserMapper</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web.mapper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/13 23:05</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/13 23:19</span></span><br><span class="line"><span class="comment">     * @param [username, password]</span></span><br><span class="line"><span class="comment">     * @ParamType:[java.lang.String, java.lang.String]</span></span><br><span class="line"><span class="comment">     * @Return:com.zjj.web.pojo.User</span></span><br><span class="line"><span class="comment">     * @Description: 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select *from tb_user where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span>String username, <span class="meta">@Param(&quot;password&quot;)</span>String password)</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/14 0:10</span></span><br><span class="line"><span class="comment">     * @param [username]</span></span><br><span class="line"><span class="comment">     * @ParamType:[java.lang.String]</span></span><br><span class="line"><span class="comment">     * @Return:com.zjj.web.pojo.User</span></span><br><span class="line"><span class="comment">     * @Description: 通过用户查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select *from tb_user where username=#&#123;username&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">selectByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Author: JiaJian Zhong</span></span><br><span class="line"><span class="comment">     * @date 2022/8/14 0:10</span></span><br><span class="line"><span class="comment">     * @param [username, password]</span></span><br><span class="line"><span class="comment">     * @ParamType:[java.lang.String, java.lang.String]</span></span><br><span class="line"><span class="comment">     * @Return:void</span></span><br><span class="line"><span class="comment">     * @Description: 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tb_user values null,#&#123;username&#125;,#&#123;password&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-添加登陆界面"><a href="#6-添加登陆界面" class="headerlink" title="6. 添加登陆界面"></a>6. 添加登陆界面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/login.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loginDiv&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/servlet01/LoginServlet&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;loginMsg&quot;</span>&gt;</span>LOGIN IN<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;subDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login up&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reset&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;register.html&quot;</span>&gt;</span>没有账号？点击注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-添加登陆接口"><a href="#7-添加登陆接口" class="headerlink" title="7.添加登陆接口"></a>7.添加登陆接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zjj.web.LoginAndRegister;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.web.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjj.web.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:LoginServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web.LoginAndRegister</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/13 22:56</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.接受用户名密码</span></span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用mybatis查询</span></span><br><span class="line">        <span class="comment">//2.1获取sqlsessionfactory对象</span></span><br><span class="line">        String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        SqlSession sqlSession=<span class="literal">null</span>;</span><br><span class="line">        User user=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.获取sqlsession对象</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">//2.3 获取mapper</span></span><br><span class="line">            <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="comment">//2.4 调用方法</span></span><br><span class="line">            user = mapper.select(username, password);</span><br><span class="line">            <span class="comment">//2.5 关闭资源</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取字符输出流</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="literal">null</span>)&#123;</span><br><span class="line">            writer.write(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            writer.write(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-添加注册页面"><a href="#8-添加注册页面" class="headerlink" title="8. 添加注册页面"></a>8. 添加注册页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/register.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reg-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>已有帐号？<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;reg-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/servlet01/RegisterServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_err&quot;</span> <span class="attr">class</span>=<span class="string">&quot;err_msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;注 册&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reg_btn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-添加注册接口"><a href="#9-添加注册接口" class="headerlink" title="9.添加注册接口"></a>9.添加注册接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.zjj.web.LoginAndRegister;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zjj.web.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.zjj.web.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Time;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:RegisterServlet</span></span><br><span class="line"><span class="comment"> * Package:com.zjj.web.LoginAndRegister</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @ Date:2022/8/13 22:56</span></span><br><span class="line"><span class="comment"> * @ Author:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/RegisterServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.接受用户名密码</span></span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//封装用户对象</span></span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        <span class="comment">//2.判断用户是否存在</span></span><br><span class="line">        String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        SqlSession sqlSession=<span class="literal">null</span>;</span><br><span class="line">        User selectUser=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.获取sqlsession对象</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">//2.3 获取mapper</span></span><br><span class="line">            <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            <span class="comment">//2.4 调用方法</span></span><br><span class="line">            selectUser = mapper.selectByUsername(username);</span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">            <span class="keyword">if</span> (selectUser==<span class="literal">null</span>)&#123;</span><br><span class="line">                mapper.add(user);</span><br><span class="line">                sqlSession.commit();</span><br><span class="line">                writer.write(<span class="string">&quot;注册成功,即将跳转到登陆界面&quot;</span>);</span><br><span class="line">                resp.setStatus(<span class="number">302</span>);</span><br><span class="line">                resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/servlet01/login.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                writer.write(<span class="string">&quot;用户名已存在失败&quot;</span>);</span><br><span class="line">                resp.setStatus(<span class="number">302</span>);</span><br><span class="line">                resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/servlet01/register.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取字符输出流</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-SqlSessionFactory工具类抽取"><a href="#10-SqlSessionFactory工具类抽取" class="headerlink" title="10.SqlSessionFactory工具类抽取"></a>10.SqlSessionFactory工具类抽取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet</title>
      <link href="/2022/08/12/servlet/"/>
      <url>/2022/08/12/servlet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Servlet快速入门"><a href="#Servlet快速入门" class="headerlink" title="Servlet快速入门"></a>Servlet快速入门</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>1.创建web项目,导入Servlet依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.定义一个类,实现Servlet接口,重写接口中的所有方法,在service方法输出一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在类上使用@WebServlet注解,配置Servlet的访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo01&quot;)</span></span><br><span class="line">ublic <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span></span><br></pre></td></tr></table></figure><p>4.使用Maven Tomcat插件进行调试程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.启动项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/servlet01/demo01</span><br></pre></td></tr></table></figure><p>6.输出成功</p><p><img src="/2022/08/12/servlet/image-20220813111309760.png" alt="image-20220813111309760"></p><h2 id="Servlet执行流程"><a href="#Servlet执行流程" class="headerlink" title="#Servlet执行流程"></a>#Servlet执行流程</h2><blockquote><p><a href="http://localhost:8080访问tomcat服务器">http://localhost:8080访问tomcat服务器</a></p><p>servlet01:tomcat的项目</p><p>demo01:该项目下的类</p></blockquote><p>1.Servlet由web服务器创建调用</p><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ul><li><p>加载实例化:默认情况下,当Servlet第一次被访问时,由容器创建Servlet对象</p></li><li><p>初始化:在Servlet实例化后,容器将调用Servlet的init()方法来初始化这个对象,完成一些如加载配置文件、创建连接等初始化工作,该方法只会被调用一次。</p></li><li><p>请求处理:每次请求servlet时,servlet容器都会调用servlet实例的service()方法对请求进行处理</p></li><li><p>服务终止:当需要释放内存或者容器关闭时,容器会调用servlet实例的destory()方法完成资源的释放,当调用destory()方法调用之后,容器会释放这个servlet实例,该实例会被java的垃圾收集器所回收。</p><p><img src="/2022/08/12/servlet/image-20220813112535935.png" alt="image-20220813112535935"></p></li></ul><p>当服务器终止时</p><p><img src="/2022/08/12/servlet/image-20220813112554350.png" alt="image-20220813112554350"></p><blockquote><p>tips:配置初始化时机 @WebServlet(“&#x2F;demo01”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo01&quot;,loadOnStartup = 1)</span></span><br><span class="line">即不需要调用该类,在容器初始化时就会执行</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2022/08/12/servlet/image-20220813112933845.png" alt="image-20220813112933845"></p><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><ul><li><p>初始化方法,在servlet被创建时执行,只执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span></span><br></pre></td></tr></table></figure></li><li><p>服务方法,每次访问都被调用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span><br></pre></td></tr></table></figure><ul><li>销毁方法,servlet被销毁时,调用该方法,在内存释放或服务器关闭销毁servlet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> destroy</span><br></pre></td></tr></table></figure><ul><li><p>获取ServletConfig对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>获取Servlet信息</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><p><img src="/2022/08/12/servlet/image-20220813114947322.png" alt="image-20220813114947322"></p><blockquote><p>正常B&#x2F;S架构的Web项目,都是针对HTTP协议的,所以自定义的Servlet会继承HttpServlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/servlet/image-20220813115342523.png" alt="image-20220813115342523"></p><p><img src="/2022/08/12/servlet/image-20220813115704507.png" alt="image-20220813115704507"></p><p>如果不适用这个实现类直接使用servlet则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">       String method=request.getMethod();</span><br><span class="line">       <span class="comment">//获取请求方式</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method))&#123;</span><br><span class="line">           doGet(servletRequest,servletResponse);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">           <span class="comment">//post处理</span></span><br><span class="line">           doPost(servletRequest,servletResponse);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继承该类</p><h3 id="Servlet-urlPattern配置"><a href="#Servlet-urlPattern配置" class="headerlink" title="Servlet urlPattern配置"></a>Servlet urlPattern配置</h3><p>1.一个Servlet,配置多个urlPattern</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/demo1&quot;,&quot;/demo2&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>2.urlPattern配置规则</p><ul><li><p>精确匹配</p><ul><li>配置路径:@WebServlet(“&#x2F;usr&#x2F;select”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;user&#x2F;select</li></ul></li><li><p>目录匹配</p><ul><li>配置路径:@WebServlet(“&#x2F;usr&#x2F;*”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;user&#x2F;aaa(bbb)</li></ul></li><li><p>扩展名匹配</p><ul><li>配置路径:@WebServlet(“*.do”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;aaa.do(bbb.do)</li></ul></li><li><p>任意匹配</p><ul><li>配置路径:@WebServlet(“&#x2F;”)(“&#x2F;*”)</li><li>访问路径:locallhost:8080&#x2F;web-demo&#x2F;hehe(haha)</li></ul><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="Request继承体系"><a href="#Request继承体系" class="headerlink" title="Request继承体系"></a>Request继承体系</h3><blockquote><p>RequestFacade(Tomcat定义的实现类)-&gt;HttpServletRequest(Java提供对http协议封装的请求对象接口)-&gt;ServletRequest(Java提供根接口)</p></blockquote><h3 id="获取请求数据"><a href="#获取请求数据" class="headerlink" title="获取请求数据"></a>获取请求数据</h3><blockquote><p>1.请求行</p><pre><code>    + String getMethod():获取请求方式    + String getContextPath():获取虚拟目录    + StringBuffer getRequestURL:获取url    + String getRquestURI:获取URI    + String getQueryString():获取请求参数</code></pre><p>2.请求头</p><ul><li>String getHeader(String name):</li></ul><p>3.请求体</p><pre><code>+  ServletInputStream getInputStream():获取字节输入流+  BufferReader getReader():获取字符输入流</code></pre></blockquote><h3 id="通用方式获取请求参数"><a href="#通用方式获取请求参数" class="headerlink" title="通用方式获取请求参数"></a>通用方式获取请求参数</h3><p>Map&lt;String,String[]&gt;getParameterMap():获取所有参数的map集合</p><ul><li>String[] getParameterValues(String name):根据名称获取参数值(数组)</li><li>String getParameter(String name):根据名称获取参数值(单值)</li></ul><h3 id="请求参数乱码问题"><a href="#请求参数乱码问题" class="headerlink" title="请求参数乱码问题"></a>请求参数乱码问题</h3><blockquote><p>post乱码.getReader() request.setCharacterEncoding(“UTF-8”)</p><p>get乱码:getQueryString  转换为字符数据 再变成字符串</p><p>url编码 1.每个字符串按照编码方式转为二进制 2.每个字节转为2个16进制数并在前加上%</p></blockquote><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><blockquote><p>服务器内部的资源跳转方式</p><p><img src="/2022/08/12/servlet/image-20220813185044477.png" alt="image-20220813185044477"></p><p>request.getRequestDispatcher(path:).forward(req,res)</p><ul><li>void setAttribute(String name,object o):存储到request域中</li><li>object getAttribute(String name):根据key 获取值</li><li>void removeAttribute(String name):根据key 删除键值对</li></ul></blockquote><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><h3 id="Response继承体系"><a href="#Response继承体系" class="headerlink" title="Response继承体系"></a>Response继承体系</h3><blockquote><p>ResponseFacade(Tomcat定义的实现类)-&gt;HttpServletResponse(Java提供对http协议封装的请求对象接口)-&gt;ServletResponse(Java提供根接口)</p></blockquote></li></ul><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><blockquote><ol><li>响应行:HTTP&#x2F;1.1 200K</li></ol><p>​void setStatis(int sec)设置响应状态码</p><ol start="2"><li>响应头:Content-Type:text&#x2F;html</li></ol><p>​void setHeader(String name,String value):设置响应头键值对</p><ol start="3"><li><p>响应体 <html><head>&lt;\head&gt;</head><body>&lt;\body&gt;&lt;\html&gt;</body></html></p><p>PrintWriter getWriter():获取字符输出流</p><p>ServletOutPutStream getOutputStream():获取字节输出流</p></li></ol></blockquote><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li><p>重定向(Redirect):一种资源跳转方式</p><p><img src="/2022/08/12/servlet/image-20220813184954460.png" alt="image-20220813184954460">+</p></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp.setStatus(<span class="number">302</span>);</span><br><span class="line">resp.setHeader(<span class="string">&quot;localtion&quot;</span>,<span class="string">&quot;source b path&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo01</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp1...&quot;</span>);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">//2</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/servlet01/resp2&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp2...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/12/servlet/image-20220813190448366.png" alt="image-20220813190448366"></p><p>也可以使用resp.sendRedirect(“path”);</p><blockquote><p>路径问题:</p><ul><li>浏览器使用:加虚拟目录</li><li>服务端使用:不需要加虚拟目录</li></ul></blockquote></li></ul><h3 id="响应字符数据"><a href="#响应字符数据" class="headerlink" title="响应字符数据"></a>响应字符数据</h3><ul><li><p>使用</p><p>​1.通过Response对象获取字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter()</span><br></pre></td></tr></table></figure><pre><code> 2. 写数据</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.write(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1.获取字符输出流,</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="comment">//设置响应头用html解析</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;h1&gt;aaaa&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>中文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.获取字符输出流,</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="comment">//设置响应头用html解析</span></span><br><span class="line">        writer.write(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        writer.write(<span class="string">&quot;&lt;h1&gt;你好&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure></li></ul><h3 id="响应字节数据"><a href="#响应字节数据" class="headerlink" title="响应字节数据"></a>响应字节数据</h3><ul><li><p>使用</p><ol><li><p>通过Response对象来获取字节输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletOutPutStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br></pre></td></tr></table></figure></li><li><p>写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputStream.write(字节数据)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>示例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/resp4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseDemo04</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.读取文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\Self_code\\java\\servlet\\servlet01\\src\\main\\java\\com\\zjj\\web\\headImg.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取字节输出流</span></span><br><span class="line">        ServletOutputStream os=  resp.getOutputStream();</span><br><span class="line">        <span class="comment">// 3.copu</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学</title>
      <link href="/2022/08/12/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
      <url>/2022/08/12/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2022/08/12/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/image-20220812132651401.png" alt="image-20220812132651401"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础</title>
      <link href="/2022/08/11/Docker/"/>
      <url>/2022/08/11/Docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h2 id="yum安装gcc相关"><a href="#yum安装gcc相关" class="headerlink" title="yum安装gcc相关"></a>yum安装gcc相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><h2 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><h2 id="设置stable仓库"><a href="#设置stable仓库" class="headerlink" title="设置stable仓库"></a>设置stable仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="安装Docker-Engine"><a href="#安装Docker-Engine" class="headerlink" title="安装Docker Engine"></a>安装Docker Engine</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h1 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://jsle3a97.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动docker:systemctl start docker</span><br><span class="line">停止docker:systemctl stop docker</span><br><span class="line">重启:docker:systemctl restart docker</span><br><span class="line">查看docker状态:systemctl status docker</span><br><span class="line">开机启动:systemctl enable docker</span><br><span class="line">查看docker概要信息:docker info</span><br><span class="line">查看docker总体帮助文档:docker --help</span><br><span class="line">查看docker命令帮助文档:docker 具体命令 --help</span><br></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images 查看所有镜像</span><br><span class="line">可选参数</span><br><span class="line">-a 列出本地所有的镜像(含历史记录)</span><br><span class="line">-q 只显示镜像id</span><br></pre></td></tr></table></figure><p><img src="/2022/08/11/Docker/image-20221011214648277.png" alt="image-20221011214648277"></p><p>REPOSITORY 镜像的仓库源</p><p>TAG 镜像的标签版本号</p><p>IMAGE ID 镜像ID</p><p>CREATED 创建时间</p><p>Size镜像大小</p><blockquote><p>同一个仓库源可以有多个TAG版本</p></blockquote><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名</span><br><span class="line">可选参数</span><br><span class="line">--limit 只列出n个镜像 默认为25个</span><br><span class="line">docker search --limit 5 redis</span><br></pre></td></tr></table></figure><p>NAME 镜像名称</p><p>DESCRIPTION 镜像说明</p><p>SARTS 点赞数量</p><p>OFFICLAL 是否是官方的</p><p>AUTOMATED 是否为自动构建</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名[:TAG]</span><br><span class="line">不写TAG默认为最新的</span><br></pre></td></tr></table></figure><h3 id="镜像-x2F-容器-x2F-数据卷所占的空间"><a href="#镜像-x2F-容器-x2F-数据卷所占的空间" class="headerlink" title="镜像&#x2F;容器&#x2F;数据卷所占的空间"></a>镜像&#x2F;容器&#x2F;数据卷所占的空间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像名/id</span><br><span class="line">删除多个</span><br><span class="line">docker rmi -f a b c</span><br><span class="line">删除全部</span><br><span class="line">dokcer rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="新建-启动容器"><a href="#新建-启动容器" class="headerlink" title="新建+启动容器"></a>新建+启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] image [command] [arg...]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>option 说明</p><p>–name&#x3D;“容器新名字”  为容器指定一个名称</p><p>-d: 后台运行容器并返回容器id</p><p>-i: 以交互模式运行容器与-t一起使用</p><p>-t:为容器重新分配一个输入端</p><p>-P:随机端口映射</p><p>-p:指定端口映射</p></blockquote><h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps[options]</span><br><span class="line">-a 列出所有和历史上运行过的容器</span><br><span class="line">-l 显示最近创建的容器</span><br><span class="line">-n 显示最近n个创建的容器</span><br><span class="line">-q 只显示容器编号</span><br></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit run进去容器 exit 退出容器 容器停止</span><br><span class="line">ctrl+p+q run进去容器 退出容器 容器不停止</span><br></pre></td></tr></table></figure><h3 id="启动已经停止运行的容器"><a href="#启动已经停止运行的容器" class="headerlink" title="启动已经停止运行的容器"></a>启动已经停止运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id/容器名</span><br></pre></td></tr></table></figure><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器id/容器名</span><br></pre></td></tr></table></figure><h3 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill 容器id/容器名</span><br></pre></td></tr></table></figure><h3 id="删除已停止容器"><a href="#删除已停止容器" class="headerlink" title="删除已停止容器"></a>删除已停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id</span><br><span class="line">强制删除</span><br><span class="line">docker rm -f 容器id</span><br><span class="line">删除多个</span><br></pre></td></tr></table></figure><p><img src="/2022/08/11/Docker/image-20221011223032478.png" alt="image-20221011223032478"></p><h3 id="守护容器"><a href="#守护容器" class="headerlink" title="守护容器"></a>守护容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 容器名</span><br></pre></td></tr></table></figure><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器id</span><br></pre></td></tr></table></figure><h3 id="查看容器内运行的进程"><a href="#查看容器内运行的进程" class="headerlink" title="查看容器内运行的进程"></a>查看容器内运行的进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top</span><br></pre></td></tr></table></figure><h3 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspcet 容器id</span><br></pre></td></tr></table></figure><h3 id="重新进入命令行交互"><a href="#重新进入命令行交互" class="headerlink" title="重新进入命令行交互"></a>重新进入命令行交互</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器id bashshell</span><br><span class="line">docker attatch 容器id</span><br></pre></td></tr></table></figure><p><img src="/2022/08/11/Docker/image-20221011225622503.png" alt="image-20221011225622503"></p><h3 id="从容器内拷贝数据到主机"><a href="#从容器内拷贝数据到主机" class="headerlink" title="从容器内拷贝数据到主机"></a>从容器内拷贝数据到主机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br></pre></td></tr></table></figure><h3 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export 导出容器的内容流作为一个tar归档文件</span><br><span class="line">import 从tar包中创建一个新的文件系统再导入</span><br><span class="line"></span><br><span class="line">docker export r容器id&gt;文件名.tar</span><br><span class="line">cat 文件名.tar |docker import - 镜像用户/镜像名:镜像版本号</span><br></pre></td></tr></table></figure><h1 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h1><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建目标镜像名:[标签名]</span><br></pre></td></tr></table></figure><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h4 id="权限扩容"><a href="#权限扩容" class="headerlink" title="权限扩容"></a>权限扩容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--privileged=true 给容器加root权限</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true-v /宿主机绝对路径:容器内目录 容器名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><h4 id="限制容器只能读不能写"><a href="#限制容器只能读不能写" class="headerlink" title="限制容器只能读不能写"></a>限制容器只能读不能写</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true-v /宿主机绝对路径:容器内目录:ro 容器名</span><br></pre></td></tr></table></figure><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><blockquote><p>构建镜像的文本文件  </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/"/>
      <url>/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git-分布式版本控制工具"><a href="#Git-分布式版本控制工具" class="headerlink" title="Git 分布式版本控制工具"></a>Git 分布式版本控制工具</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li>Git概述</li><li>Git代码托管服务</li><li>Git常用命令</li><li>在IDEA中使用Git</li></ul><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><h3 id="1-1-什么是Git"><a href="#1-1-什么是Git" class="headerlink" title="1.1 什么是Git"></a>1.1 什么是Git</h3><p>Git是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java类、xml文件、html页面等），在软件开发过程中被广泛使用。</p><p>在IDEA开发工具中可以集成Git（后面会讲解Git安装和集成过程）：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924171926037.png" alt="image-20210924171926037"></p><p>集成后在IDEA中可以看到Git相关图标：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924172028329.png" alt="image-20210924172028329"></p><p>可以通过启动两个IDEA窗口模拟两个开发人员来展示Git的使用：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926080623416.png" alt="image-20210926080623416"></p><p>其他的版本控制工具：</p><ul><li>SVN</li><li>CVS</li><li>VSS</li></ul><h3 id="1-2-使用Git能做什么"><a href="#1-2-使用Git能做什么" class="headerlink" title="1.2 使用Git能做什么"></a>1.2 使用Git能做什么</h3><ul><li>代码回溯：Git在管理文件过程中会记录日志，方便回退到历史版本</li><li>版本切换：Git存在分支的概念，一个项目可以有多个分支（版本），可以任意切换</li><li>多人协作：Git支持多人协作，即一个团队共同开发一个项目，每个团队成员负责一部分代码，通过Git就可以管理和协调</li><li>远程备份：Git通过仓库管理文件，在Git中存在远程仓库，如果本地文件丢失还可以从远程仓库获取</li></ul><h2 id="2-Git概述"><a href="#2-Git概述" class="headerlink" title="2. Git概述"></a>2. Git概述</h2><h3 id="2-1-Git简介"><a href="#2-1-Git简介" class="headerlink" title="2.1 Git简介"></a>2.1 Git简介</h3><p>Git 是一个分布式版本控制工具，通常用来对软件开发过程中的源代码文件进行管理。通过Git 仓库来存储和管理这些文件，Git 仓库分为两种：</p><ul><li>本地仓库：开发人员自己电脑上的 Git 仓库</li><li>远程仓库：远程服务器上的 Git 仓库</li></ul><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924173708313.png" alt="image-20210924173708313" style="zoom: 50%;"><p>解释说明：</p><blockquote><p>commit：提交,将本地文件和版本信息保存到本地仓库</p><p>push：推送,将本地仓库文件和版本信息上传到远程仓库</p><p>pull：拉取,将远程仓库文件和版本信息下载到本地仓库</p></blockquote><h3 id="2-2-Git下载与安装"><a href="#2-2-Git下载与安装" class="headerlink" title="2.2 Git下载与安装"></a>2.2 Git下载与安装</h3><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924174639182.png" alt="image-20210924174639182"></p><p>下载完成后得到安装文件：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924174717172.png" alt="image-20210924174717172"></p><p>直接双击完成安装即可，安装完成后可以在任意目录下点击鼠标右键，如果能够看到如下菜单则说明安装成功：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924174934683.png" alt="image-20210924174934683"></p><p>Git GUI Here：打开Git 图形界面</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924175209242.png" alt="image-20210924175209242"></p><p>Git Bash Here：打开Git 命令行</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210924175314485.png" alt="image-20210924175314485"></p><p>Git安装目录结构如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926094227522.png" alt="image-20210926094227522"></p><h2 id="3-Git代码托管服务"><a href="#3-Git代码托管服务" class="headerlink" title="3. Git代码托管服务"></a>3. Git代码托管服务</h2><h3 id="3-1-常用的Git代码托管服务"><a href="#3-1-常用的Git代码托管服务" class="headerlink" title="3.1 常用的Git代码托管服务"></a>3.1 常用的Git代码托管服务</h3><p>Git中存在两种类型的仓库，即<strong>本地仓库</strong>和<strong>远程仓库</strong>。那么我们如何搭建Git<strong>远程仓库</strong>呢？</p><p>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p><table><thead><tr><th>名称</th><th>网址</th><th>说明</th></tr></thead><tbody><tr><td>gitHub</td><td><a href="https://github.com/">https://github.com/</a></td><td>一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub</td></tr><tr><td>码云</td><td><a href="https://gitee.com/">https://gitee.com/</a></td><td>国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快</td></tr><tr><td>GitLab</td><td><a href="https://about.gitlab.com/">https://about.gitlab.com/</a></td><td>一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务</td></tr><tr><td>BitBucket</td><td><a href="https://bitbucket.org/">https://bitbucket.org/</a></td><td>一家源代码托管网站，采用Mercurial和Git作为分布式版本控制系统，同时提供商业计划和免费账户</td></tr></tbody></table><h3 id="3-2-码云代码托管服务"><a href="#3-2-码云代码托管服务" class="headerlink" title="3.2 码云代码托管服务"></a>3.2 码云代码托管服务</h3><p>码云网址：<a href="https://gitee.com/">https://gitee.com/</a></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926082758518.png" alt="image-20210926082758518"></p><p>使用码云的操作流程如下：</p><ol><li>注册码云账号</li><li>登录码云</li><li>创建远程仓库</li><li>邀请其他用户成为仓库成员</li></ol><h4 id="3-2-1-注册码云账号"><a href="#3-2-1-注册码云账号" class="headerlink" title="3.2.1 注册码云账号"></a>3.2.1 注册码云账号</h4><p>注册网址： <a href="https://gitee.com/signup">https://gitee.com/signup</a></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083229013.png" alt="image-20210926083229013"></p><h4 id="3-2-2-登录码云"><a href="#3-2-2-登录码云" class="headerlink" title="3.2.2 登录码云"></a>3.2.2 登录码云</h4><p>注册完成后可以使用刚刚注册的邮箱进行登录（地址： <a href="https://gitee.com/login">https://gitee.com/login</a> ）</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083328306.png" alt="image-20210926083328306"></p><h4 id="3-2-3-创建远程仓库"><a href="#3-2-3-创建远程仓库" class="headerlink" title="3.2.3 创建远程仓库"></a>3.2.3 创建远程仓库</h4><p>登录成功后可以创建远程仓库，操作方式如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083510298.png" alt="image-20210926083510298"></p><p>页面跳转到新建仓库页面：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926083629924.png" alt="image-20210926083629924"></p><p>解释说明：</p><blockquote><p>仓库名称：必填，每个仓库都需要有一个名称，同一个码云账号下的仓库名称不能重复</p><p>路径：访问远程仓库时会使用到，一般无需手动指定，和仓库名称自动保持一致</p><p>开源：所有人都可以查看此仓库</p><p>私有：只有此仓库的成员可见，其他人不可见</p></blockquote><p>创建完成后可以查看仓库信息：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926090131032.png" alt="image-20210926090131032"></p><p><strong>注意</strong>：每个Git远程仓库都会对应一个网络地址，点击【克隆&#x2F;下载】按钮，在弹出窗口点击【复制】按钮即可复制网络地址，地址如下：</p><p><a href="https://gitee.com/ChuanZhiBoKe/myGitRepo.git">https://gitee.com/ChuanZhiBoKe/myGitRepo.git</a></p><h4 id="3-2-4-邀请其他用户成为仓库成员"><a href="#3-2-4-邀请其他用户成为仓库成员" class="headerlink" title="3.2.4 邀请其他用户成为仓库成员"></a>3.2.4 邀请其他用户成为仓库成员</h4><p>前面已经在码云上创建了自己的远程仓库，目前仓库成员只有自己一个人（身份为管理员）。在企业实际开发中，一个项目往往是由多个人共同开发完成的，为了使多个参与者都有权限操作远程仓库，就需要邀请其他项目参与者成为当前仓库的成员。</p><p>点击管理按钮进入仓库管理页面，左侧菜单中可以看到【仓库成员管理】：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926090608272.png" alt="image-20210926090608272"></p><p>点击【开发者】菜单，跳转到如下页面：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926091027151.png" alt="image-20210926091027151"></p><p>点击【添加仓库成员】菜单下的【邀请用户】菜单，跳转到如下页面：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926091204422.png" alt="image-20210926091204422"></p><p>可以看到邀请用户有多种方式：链接邀请、直接添加、通过仓库邀请成员</p><p><strong>注意</strong>：被邀请用户必须为码云的注册用户，否则无法成为仓库成员</p><h2 id="4-Git常用命令"><a href="#4-Git常用命令" class="headerlink" title="4. Git常用命令"></a>4. Git常用命令</h2><h3 id="4-1-Git全局设置"><a href="#4-1-Git全局设置" class="headerlink" title="4.1 Git全局设置"></a>4.1 Git全局设置</h3><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息。在Git 命令行中执行下面命令：</p><p><strong>设置用户信息</strong> </p><p>  git config –global user.name “itcast”</p><p>  git config –global user.email “<a href="mailto:&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#x40;&#105;&#116;&#99;&#x61;&#115;&#116;&#46;&#x63;&#x6e;">&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#x40;&#105;&#116;&#99;&#x61;&#115;&#116;&#46;&#x63;&#x6e;</a>“</p><p><strong>查看配置信息</strong></p><p>  git config –list</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926092820321.png" alt="image-20210926092820321"></p><p>注意：上面设置的user.name和user.email并不是我们在注册码云账号时使用的用户名和邮箱，此处可以任意设置。</p><h3 id="4-2-获取Git仓库"><a href="#4-2-获取Git仓库" class="headerlink" title="4.2 获取Git仓库"></a>4.2 获取Git仓库</h3><p>要使用Git对我们的代码进行管理，首先需要获得Git仓库。</p><p>获取Git仓库通常有两种方式：</p><ul><li>在本地初始化Git仓库（不常用）</li><li>从远程仓库克隆（常用）</li></ul><h4 id="4-2-1-在本地初始化Git仓库"><a href="#4-2-1-在本地初始化Git仓库" class="headerlink" title="4.2.1 在本地初始化Git仓库"></a>4.2.1 在本地初始化Git仓库</h4><p><strong>操作步骤如下</strong>：</p><ol><li>在任意目录下创建一个空目录（例如repo1）作为我们的本地Git仓库</li><li>进入这个目录中，点击右键打开Git bash窗口</li><li>执行命令<strong>git</strong> <strong>init</strong></li></ol><p>如果在当前目录中看到.git文件夹（此文件夹为隐藏文件夹）则说明Git仓库创建成功</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926093721515.png" alt="image-20210926093721515"></p><h4 id="4-2-2-从远程仓库克隆"><a href="#4-2-2-从远程仓库克隆" class="headerlink" title="4.2.2 从远程仓库克隆"></a>4.2.2 从远程仓库克隆</h4><p>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><p><strong>命令格式</strong>：git clone 远程仓库地址</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926094404332.png" alt="image-20210926094404332"></p><h3 id="4-3-工作区、暂存区、版本库"><a href="#4-3-工作区、暂存区、版本库" class="headerlink" title="4.3 工作区、暂存区、版本库"></a>4.3 工作区、暂存区、版本库</h3><p>为了更好的学习Git，我们需要了解Git相关的一些概念，这些概念在后面的学习中会经常提到。</p><p><strong>版本库</strong>：前面看到的.git隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</p><p><strong>工作区</strong>：包含.git文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</p><p><strong>暂存区</strong>：.git文件夹中有很多文件，其中有一个index文件就是暂存区，也可以叫做stage。暂存区是一个临时保存修改文件的地方</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926094831386.png" alt="image-20210926094831386"></p><h3 id="4-4-Git工作区中文件的状态"><a href="#4-4-Git工作区中文件的状态" class="headerlink" title="4.4 Git工作区中文件的状态"></a>4.4 Git工作区中文件的状态</h3><p>Git工作区中的文件存在两种状态：</p><ul><li><p>untracked 未跟踪（未被纳入版本控制）</p></li><li><p>tracked 已跟踪（被纳入版本控制）</p><p>​     1）Unmodified 未修改状态</p><p>​     2）Modified 已修改状态</p><p>​     3）Staged 已暂存状态</p></li></ul><p><strong>注意</strong>：文件的状态会随着我们执行Git的命令发生变化</p><h3 id="4-5-本地仓库操作"><a href="#4-5-本地仓库操作" class="headerlink" title="4.5 本地仓库操作"></a>4.5 本地仓库操作</h3><p>本地仓库常用命令如下：</p><ul><li>git status 查看文件状态</li><li>git add 将文件的修改加入暂存区</li><li>git reset 将暂存区的文件取消暂存或者是切换到指定版本</li><li>git commit 将暂存区的文件修改提交到版本库</li><li>git log  查看日志</li></ul><h4 id="4-5-1-git-status"><a href="#4-5-1-git-status" class="headerlink" title="4.5.1 git status"></a>4.5.1 git status</h4><p>git status 命令用于查看文件状态</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926095623297.png" alt="image-20210926095623297"></p><p>注意：由于工作区中文件状态的不同，执行 git status 命令后的输出也会不同</p><h4 id="4-5-2-git-add"><a href="#4-5-2-git-add" class="headerlink" title="4.5.2 git add"></a>4.5.2 git add</h4><p>git add 命令的作用是将文件的修改加入暂存区，命令格式：git add fileName</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926100003056.png" alt="image-20210926100003056"></p><p>加入暂存区后再执行 git status 命令，可以发现文件的状态已经发生变化。</p><h4 id="4-5-3-git-reset"><a href="#4-5-3-git-reset" class="headerlink" title="4.5.3 git reset"></a>4.5.3 git reset</h4><p>git reset 命令的作用是将暂存区的文件<strong>取消暂存</strong>或者是<strong>切换到指定版本</strong></p><p>取消暂存命令格式：git reset 文件名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926101346514.png" alt="image-20210926101346514"></p><p>切换到指定版本命令格式：git reset –hard 版本号</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926101401721.png" alt="image-20210926101401721"></p><p>注意：每次Git提交都会产生新的版本号，通过版本号就可以回到历史版本</p><h4 id="4-5-4-git-commit"><a href="#4-5-4-git-commit" class="headerlink" title="4.5.4 git commit"></a>4.5.4 git commit</h4><p>git commit 命令的作用是将暂存区的文件修改提交到版本库，命令格式：git commit -m msg 文件名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926101859601.png" alt="image-20210926101859601"></p><p>解释说明：</p><blockquote><p>-m：代表message，每次提交时需要设置，会记录到日志中</p><p>可以使用通配符*一次提交多个文件</p></blockquote><h4 id="4-5-5-git-log"><a href="#4-5-5-git-log" class="headerlink" title="4.5.5 git log"></a>4.5.5 git log</h4><p>git log 命令的作用是查看提交日志</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926102305539.png" alt="image-20210926102305539"></p><p>通过git log命令查看日志，可以发现每次提交都会产生一个版本号，提交时设置的message、提交人、邮箱、提交时间等信息都会记录到日志中</p><h3 id="4-6-远程仓库操作"><a href="#4-6-远程仓库操作" class="headerlink" title="4.6 远程仓库操作"></a>4.6 远程仓库操作</h3><p>前面执行的命令操作都是针对的本地仓库，本节我们会学习关于远程仓库的一些操作，具体包括：</p><ul><li>git remote  查看远程仓库</li><li>git remote add 添加远程仓库</li><li>git clone 从远程仓库克隆</li><li>git pull 从远程仓库拉取</li><li>git push 推送到远程仓库</li></ul><h4 id="4-6-1-git-remote"><a href="#4-6-1-git-remote" class="headerlink" title="4.6.1 git remote"></a>4.6.1 git remote</h4><p>如果要查看已经配置的远程仓库服务器，可以执行 git remote 命令，它会列出每一个远程服务器的简称。</p><p>如果已经克隆了远程仓库，那么至少应该能看到 origin ，这是 Git 克隆的仓库服务器的默认名字。</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926103746721.png" alt="image-20210926103746721"></p><p>解释说明：</p><blockquote><p>可以通过-v参数查看远程仓库更加详细的信息</p><p>本地仓库配置的远程仓库都需要一个简称，后续在和远程仓库交互时会使用到这个简称</p></blockquote><h4 id="4-6-2-git-remote-add"><a href="#4-6-2-git-remote-add" class="headerlink" title="4.6.2 git remote add"></a>4.6.2 git remote add</h4><p>添加远程仓库命令格式：git remote add 简称 远程仓库地址</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926104723901.png" alt="image-20210926104723901"></p><p>注意：一个本地仓库可以关联多个远程仓库</p><h4 id="4-6-3-git-clone"><a href="#4-6-3-git-clone" class="headerlink" title="4.6.3 git clone"></a>4.6.3 git clone</h4><p>如果你想获得一份已经存在了的 Git 远程仓库的拷贝，这时就要用到 git clone 命令。 Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等）。</p><p>克隆仓库的命令格式： git clone 远程仓库地址</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926105017148.png" alt="image-20210926105017148"></p><h4 id="4-6-4-git-push"><a href="#4-6-4-git-push" class="headerlink" title="4.6.4 git push"></a>4.6.4 git push</h4><p>将本地仓库内容推送到远程仓库，命令格式：git push 远程仓库简称 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926105413681.png" alt="image-20210926105413681"></p><p>在使用git push命令将本地文件推送至码云远程仓库时，如果是第一次操作，需要进行身份认证，认证通过才可以推送，如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926105913504.png" alt="image-20210926105913504"></p><p>注意：上面的用户名和密码对应的就是我们在码云上注册的用户名和密码，认证通过后会将用户名和密码保存到windows系统中（如下图），后续再推送则无需重复输入用户名和密码。</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926110810630.png" alt="image-20210926110810630"></p><p>推送完成后可以到远程仓库中查看文件的变化。</p><p>解释说明：</p><blockquote><p>一个仓库可以有多个分支，默认情况下在创建仓库后会自动创建一个master分支</p><p>后面会讲解分支相关的操作</p></blockquote><h4 id="4-6-5-git-pull"><a href="#4-6-5-git-pull" class="headerlink" title="4.6.5 git pull"></a>4.6.5 git pull</h4><p><strong>git</strong> <strong>pull</strong> 命令的作用是从远程仓库获取最新版本并合并到本地仓库</p><p>命令格式：git pull 远程仓库简称 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926111013002.png" alt="image-20210926111013002"></p><p><strong>注意</strong>：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ）</p><p>解决此问题可以在git pull命令后加入参数–allow-unrelated-histories</p><h3 id="4-7-分支操作"><a href="#4-7-分支操作" class="headerlink" title="4.7 分支操作"></a>4.7 分支操作</h3><p>分支是Git 使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</p><p>本地仓库和远程仓库中都有分支，同一个仓库可以有多个分支，各个分支相互独立，互不干扰。</p><p>通过git init 命令创建本地仓库时默认会创建一个master分支。</p><p>本节我们会学习关于分支的相关命令，具体命令如下：</p><ul><li>git branch                                     查看分支</li><li>git branch [name]                       创建分支</li><li>git checkout [name]                    切换分支</li><li>git push [shortName] [name]   推送至远程仓库分支</li><li>git merge [name]                        合并分支</li></ul><h4 id="4-7-1-查看分支"><a href="#4-7-1-查看分支" class="headerlink" title="4.7.1 查看分支"></a>4.7.1 查看分支</h4><p>查看分支命令：git branch</p><p>git branch 列出所有本地分支</p><p>git branch -r 列出所有远程分支</p><p>git branch -a 列出所有本地分支和远程分支</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926124843275.png" alt="image-20210926124843275"></p><h4 id="4-7-2-创建分支"><a href="#4-7-2-创建分支" class="headerlink" title="4.7.2 创建分支"></a>4.7.2 创建分支</h4><p>创建分支命令格式：git branch 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125053711.png" alt="image-20210926125053711"></p><h4 id="4-7-3-切换分支"><a href="#4-7-3-切换分支" class="headerlink" title="4.7.3 切换分支"></a>4.7.3 切换分支</h4><p>一个仓库中可以有多个分支，切换分支命令格式：git checkout 分支名称</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125259155.png" alt="image-20210926125259155"></p><p>注意：在命令行中会显示出当前所在分支，如上图所示。</p><h4 id="4-7-4-推送至远程仓库分支"><a href="#4-7-4-推送至远程仓库分支" class="headerlink" title="4.7.4 推送至远程仓库分支"></a>4.7.4 推送至远程仓库分支</h4><p>推送至远程仓库分支命令格式：git push 远程仓库简称 分支命令</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125628894.png" alt="image-20210926125628894"></p><p>推送完成后可以查看远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926125810878.png" alt="image-20210926125810878"></p><h4 id="4-7-5-合并分支"><a href="#4-7-5-合并分支" class="headerlink" title="4.7.5 合并分支"></a>4.7.5 合并分支</h4><p>合并分支就是将两个分支的文件进行合并处理，命令格式：git merge 分支命令</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926130213015.png" alt="image-20210926130213015"></p><p>注意：分支合并时需注意合并的方向，如上图所示，在Master分支执行操作，结果就是将b3分支合并到Master分支。</p><h3 id="4-8-标签操作"><a href="#4-8-标签操作" class="headerlink" title="4.8 标签操作"></a>4.8 标签操作</h3><p>Git 中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。</p><p>比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 、v1.2等）。下面是mybatis-plus的标签：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926130452557.png" alt="image-20210926130452557"></p><p>在本节中，我们将学习如下和标签相关的命令：</p><ul><li>git tag                                                查看标签</li><li>git tag [name]                                  创建标签</li><li>git push [shortName] [name]       将标签推送至远程仓库</li><li>git checkout -b [branch] [name]   检出标签</li></ul><h4 id="4-8-1-查看标签"><a href="#4-8-1-查看标签" class="headerlink" title="4.8.1 查看标签"></a>4.8.1 查看标签</h4><p>查看标签命令：git tag</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926151333473.png" alt="image-20210926151333473"></p><h4 id="4-8-2-创建标签"><a href="#4-8-2-创建标签" class="headerlink" title="4.8.2 创建标签"></a>4.8.2 创建标签</h4><p>创建标签命令：git tag 标签名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926151452581.png" alt="image-20210926151452581"></p><h4 id="4-8-3-将标签推送至远程仓库"><a href="#4-8-3-将标签推送至远程仓库" class="headerlink" title="4.8.3 将标签推送至远程仓库"></a>4.8.3 将标签推送至远程仓库</h4><p>将标签推送至远程仓库命令：git push 远程仓库简称 标签名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926151621286.png" alt="image-20210926151621286"></p><p>推送完成后可以在远程仓库中查看标签。</p><h4 id="4-8-4-检出标签"><a href="#4-8-4-检出标签" class="headerlink" title="4.8.4 检出标签"></a>4.8.4 检出标签</h4><p>检出标签时需要新建一个分支来指向某个标签，检出标签的命令格式：git checkout -b 分支名 标签名</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926152111514.png" alt="image-20210926152111514"></p><h2 id="5-在IDEA中使用Git"><a href="#5-在IDEA中使用Git" class="headerlink" title="5. 在IDEA中使用Git"></a>5. 在IDEA中使用Git</h2><p>通过Git命令可以完成Git相关操作，为了简化操作过程，我们可以在IEDA中配置Git，配置好后就可以在IDEA中通过图形化的方式来操作Git。</p><h3 id="5-1-在IDEA中配置Git"><a href="#5-1-在IDEA中配置Git" class="headerlink" title="5.1 在IDEA中配置Git"></a>5.1 在IDEA中配置Git</h3><p>在IDEA中使用Git，本质上还是使用的本地安装的Git软件，所以需要提前安装好Git并在IDEA中配置Git。</p><p>Git安装目录：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926152847948.png" alt="image-20210926152847948"></p><p>解释说明：</p><blockquote><p>git.exe：Git安装目录下的可执行文件，前面执行的git命令，其实就是执行的这个文件</p></blockquote><p>IDEA中的配置：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926152950420.png" alt="image-20210926152950420"></p><p>说明：如果Git安装在默认目录中（C:\Program Files\Git），则IDEA中无需再手动配置，直接就可以使用。</p><h3 id="5-2-获取Git仓库"><a href="#5-2-获取Git仓库" class="headerlink" title="5.2 获取Git仓库"></a>5.2 获取Git仓库</h3><p>在IDEA中获取Git仓库有两种方式：</p><ul><li>本地初始化仓库，本质就是执行 git init 命令</li><li>从远程仓库克隆，本质就是执行 git clone 命令</li></ul><h4 id="5-2-1-本地初始化仓库"><a href="#5-2-1-本地初始化仓库" class="headerlink" title="5.2.1 本地初始化仓库"></a>5.2.1 本地初始化仓库</h4><p>在IDEA中通过如下操作可以在本地初始化一个本地仓库，其实底层就是执行的 git init 命令。操作过程如下：</p><p>1）依次选择菜单【VCS】—【Import into Version Control】—【Create Git Repository】</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926153806414.png" alt="image-20210926153806414"></p><p>2）在弹出的【Create Git Repository】对话框中选择当前项目根目录，点击【OK】按钮：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926154201744.png" alt="image-20210926154201744"></p><p>操作完成后可以看到当前项目根目录下出现了.git隐藏目录：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926154757082.png" alt="image-20210926154757082"></p><p>操作完成后可以在IDEA的工具栏中看到Git的相关操作图标：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926154933876.png" alt="image-20210926154933876"></p><h4 id="5-2-2-从远程仓库克隆"><a href="#5-2-2-从远程仓库克隆" class="headerlink" title="5.2.2 从远程仓库克隆"></a>5.2.2 从远程仓库克隆</h4><p>在IDEA中从远程仓库克隆本质就是执行的 git clone 命令，具体操作过程如下：</p><p>1）在IDEA开始窗口中点击【Get from Version Control】</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926155434202.png" alt="image-20210926155434202"></p><p>2）在弹出的【Get from Version Control】窗口中输入远程仓库的URL地址和对应的本地仓库存放目录，点击【Clone】按钮进行仓库克隆操作</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926155750107.png" alt="image-20210926155750107"></p><h3 id="5-3-Git忽略文件"><a href="#5-3-Git忽略文件" class="headerlink" title="5.3 Git忽略文件"></a>5.3 Git忽略文件</h3><p>在Git工作区中有一个特殊的文件 .gitignore，通过此文件可以指定工作区中的哪些文件不需要Git管理。我们在码云上创建Git远程仓库时可以指定生成此文件，如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926161050169.png" alt="image-20210926161050169"></p><p>创建完成后效果如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926161233052.png" alt="image-20210926161233052"></p><p>解释说明：</p><blockquote><p>1）我们在使用Git管理项目代码时，并不是所有文件都需要Git管理，例如Java项目中编译的.class文件、开发工具自带的配置文件等，这些文件没有必要交给Git管理，所以也就不需要提交到Git版本库中</p><p>2）注意忽略文件的名称是固定的，不能修改</p><p>3）添加到忽略列表中的文件后续Git工具就会忽略它</p></blockquote><p>一个参考的.gitignore文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">logs</span><br><span class="line">rebel.xml</span><br><span class="line">target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line">log.path_IS_UNDEFINED</span><br><span class="line">.DS_Store</span><br><span class="line">offline_user.md</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br></pre></td></tr></table></figure><h3 id="5-4-本地仓库操作"><a href="#5-4-本地仓库操作" class="headerlink" title="5.4 本地仓库操作"></a>5.4 本地仓库操作</h3><p>本地仓库操作：</p><ul><li>将文件加入暂存区，本质就是执行 git add 命令</li><li>将暂存区的文件提交到版本库，本质就是执行 git commit 命令</li><li>查看日志，本质就是执行 git log 命令</li></ul><h4 id="5-4-1-将文件加入暂存区"><a href="#5-4-1-将文件加入暂存区" class="headerlink" title="5.4.1 将文件加入暂存区"></a>5.4.1 将文件加入暂存区</h4><p>当在Git工作区新增文件或者对已有文件修改后，就需要将文件的修改加入暂存区，具体操作如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926162515597.png" alt="image-20210926162515597"></p><h4 id="5-4-2-将暂存区文件提交到版本库"><a href="#5-4-2-将暂存区文件提交到版本库" class="headerlink" title="5.4.2 将暂存区文件提交到版本库"></a>5.4.2 将暂存区文件提交到版本库</h4><p>将暂存区文件提交到版本库，可以选择一个文件进行提交，也可以选择整个项目提交多个文件。在IEDA中对文件的提交进行了简化操作，也就是如果文件修改后，无需再加入暂存区，可以直接提交。</p><p>1）提交一个文件：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926162809740.png" alt="image-20210926162809740"></p><p>可以看到，如果选中一个文件提交，则菜单名称为【Commit File…】</p><p>2）提交多个文件：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926162843891.png" alt="image-20210926162843891"></p><p>可以看到，如果提交多个文件，则菜单名称为【Commit Directory…】</p><p>由于提交操作属于高频操作，所以为了进一步方便操作，在IDEA的工具栏中提供了提交操作的快捷按钮：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926163535277.png" alt="image-20210926163535277"></p><h4 id="5-4-3-查看日志"><a href="#5-4-3-查看日志" class="headerlink" title="5.4.3 查看日志"></a>5.4.3 查看日志</h4><p>查看日志，既可以查看整个仓库的提交日志，也可以查看某个文件的提交日志。</p><p>1）查看整个项目的提交日志：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926163902184.png" alt="image-20210926163902184"></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926164138430.png" alt="image-20210926164138430"></p><p>2）查看某个文件的提交日志</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926164210056.png" alt="image-20210926164210056"></p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926164233935.png" alt="image-20210926164233935"></p><h3 id="5-5-远程仓库操作"><a href="#5-5-远程仓库操作" class="headerlink" title="5.5 远程仓库操作"></a>5.5 远程仓库操作</h3><p>远程仓库操作：</p><ul><li>查看远程仓库，本质就是执行 git remote 命令</li><li>添加远程仓库，本质就是执行 git remote add 命令</li><li>推送至远程仓库，本质就是执行 git push 命令</li><li>从远程仓库拉取，本质就是执行 git pull 命令</li></ul><h4 id="5-5-1-查看远程仓库"><a href="#5-5-1-查看远程仓库" class="headerlink" title="5.5.1 查看远程仓库"></a>5.5.1 查看远程仓库</h4><p>操作过程如下：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926165935756.png" alt="image-20210926165935756"></p><p>在弹出的【Git Remotes】窗口中可以看到配置的远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926170143160.png" alt="image-20210926170143160"></p><h4 id="5-5-2-添加远程仓库"><a href="#5-5-2-添加远程仓库" class="headerlink" title="5.5.2 添加远程仓库"></a>5.5.2 添加远程仓库</h4><p>一个本地仓库可以配置多个远程仓库，在【Git Remotes】窗口中点击【+】来添加一个新的远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926170653126.png" alt="image-20210926170653126"></p><h4 id="5-5-3-推送至远程仓库"><a href="#5-5-3-推送至远程仓库" class="headerlink" title="5.5.3 推送至远程仓库"></a>5.5.3 推送至远程仓库</h4><p>可以通过如下操作将本地仓库文件推送至远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926170908769.png" alt="image-20210926170908769"></p><p>在弹出的【Push Commits】窗口中可以看到本次推送的文件，点击【Push】按钮即可推送至远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171058705.png" alt="image-20210926171058705"></p><p>由于推送至远程仓库操作属于高频操作，所以可以通过IDEA工具栏中的提交快捷按钮同时完成提交和推送：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171408649.png" alt="image-20210926171408649"></p><p>点击【Commit and Push…】按钮同时完成提交和推送操作</p><h4 id="5-5-4-从远程仓库拉取"><a href="#5-5-4-从远程仓库拉取" class="headerlink" title="5.5.4 从远程仓库拉取"></a>5.5.4 从远程仓库拉取</h4><p>可以通过如下操作从远程仓库拉取：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171646041.png" alt="image-20210926171646041"></p><p>由于从远程仓库拉取文件属于高频操作，所以在IDEA的工具栏中提供了对应的快捷按钮：<img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171919288.png" alt="image-20210926171919288"></p><p>在弹出的【Update Project】窗口中点击【OK】：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926171950911.png" alt="image-20210926171950911"></p><h3 id="5-6-分支操作"><a href="#5-6-分支操作" class="headerlink" title="5.6 分支操作"></a>5.6 分支操作</h3><p>分支操作：</p><ul><li>查看分支，本质就是执行 git branch 命令</li><li>创建分支，本质就是执行 git branch 分支名 命令</li><li>切换分支，本质就是执行 git checkout 命令</li><li>将分支推送到远程仓库，本质就是执行 git push 命令</li><li>合并分支，本质就是执行 git merge 命令</li></ul><h4 id="5-6-1-查看分支"><a href="#5-6-1-查看分支" class="headerlink" title="5.6.1 查看分支"></a>5.6.1 查看分支</h4><p>可以通过如下操作查看分支：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926172752562.png" alt="image-20210926172752562"></p><p>在弹出的窗口中可以看到本地分支和远程分支：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926172903493.png" alt="image-20210926172903493"></p><p>由于分支操作属于高频操作，所以在IDEA的状态栏中提供了分支操作的快捷按钮：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926173622605.png" alt="image-20210926173622605"></p><p>点击【master】快捷按钮即可弹出【Git Branches】分支窗口：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926173744979.png" alt="image-20210926173744979"></p><h4 id="5-6-2-创建分支"><a href="#5-6-2-创建分支" class="headerlink" title="5.6.2 创建分支"></a>5.6.2 创建分支</h4><p>在【Git Branches】分支窗口中点击【New Branch】，弹出如下窗口：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926173903894.png" alt="image-20210926173903894"></p><p>在弹出的【Create New Branch】窗口中输入新分支的名称，点击【Create】按钮完成分支创建</p><h4 id="5-6-3-切换分支"><a href="#5-6-3-切换分支" class="headerlink" title="5.6.3 切换分支"></a>5.6.3 切换分支</h4><p>通过如下操作可以切换分支：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926174358500.png" alt="image-20210926174358500"></p><h4 id="5-6-4-将分支推送到远程仓库"><a href="#5-6-4-将分支推送到远程仓库" class="headerlink" title="5.6.4 将分支推送到远程仓库"></a>5.6.4 将分支推送到远程仓库</h4><p>通过如下操作可以将分支推送到远程仓库：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926175004502.png" alt="image-20210926175004502"></p><h4 id="5-6-5-合并分支"><a href="#5-6-5-合并分支" class="headerlink" title="5.6.5 合并分支"></a>5.6.5 合并分支</h4><p>通过下面操作可以进行分支的合并：</p><p><img src="/2022/08/11/Git%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89/image-20210926175216197.png" alt="image-20210926175216197"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/08/11/Mybatis/"/>
      <url>/2022/08/11/Mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用maven环境导入jar包"><a href="#使用maven环境导入jar包" class="headerlink" title="使用maven环境导入jar包"></a>使用maven环境导入jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;config.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zjj.mybatis.mappers&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><blockquote><p>可以在这里直接配置数据库信息</p></blockquote><blockquote><p>也可以使用properties文件来动态修改 xml文件中导入<properties resource="config.properties"></properties></p></blockquote><p>这两个文件都是放在resource的根目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://121.41.39.152:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">979508.a </span></span><br></pre></td></tr></table></figure><h3 id="TypeAliases-类型别名"><a href="#TypeAliases-类型别名" class="headerlink" title="TypeAliases(类型别名)"></a>TypeAliases(类型别名)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;package name=&quot;domain.blog&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br><span class="line">自动搜索该包下的类</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/08/11/Spring/"/>
      <url>/2022/08/11/Spring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><blockquote><p>IOC:Inversion of Control 反转控制</p></blockquote><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><blockquote><p>DI:Dependency injection 依赖注入</p></blockquote><h2 id="基于XML管理bean"><a href="#基于XML管理bean" class="headerlink" title="基于XML管理bean"></a>基于XML管理bean</h2><p>引入依赖</p><blockquote><p>打包方式为jar</p></blockquote><p><img src="/2022/08/11/Spring/image-20220804214437996.png" alt="image-20220804214437996"></p><p>实现类</p><p><img src="/2022/08/11/Spring/image-20220804214659829.png" alt="image-20220804214659829"></p><h3 id="配置bean"><a href="#配置bean" class="headerlink" title="配置bean"></a>配置bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.HelloWorld&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取IOC容器</span></span><br><span class="line">        ApplicationContext ioc= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取bean对象</span></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">helloWorld</span> <span class="operator">=</span>(HelloWorld) ioc.getBean(<span class="string">&quot;helloWorld&quot;</span>);<span class="comment">//ID</span></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        helloWorld.sayHello();</span><br></pre></td></tr></table></figure><h3 id="创建对象流程"><a href="#创建对象流程" class="headerlink" title="创建对象流程"></a>创建对象流程</h3><blockquote><p>通过解析+反射来创建对象(无参构造)</p></blockquote><h3 id="获取Bean的三种方式"><a href="#获取Bean的三种方式" class="headerlink" title="获取Bean的三种方式"></a>获取Bean的三种方式</h3><ul><li><p>id</p></li><li><p>type</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestClass</span><span class="params">()</span>&#123;</span><br><span class="line">        ApplicationContext ioc= <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> ioc.getBean(Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;<span class="comment">//不能有多个类型相同的bean</span></span><br></pre></td></tr></table></figure><ul><li>根据type+id获取</li></ul><p>组件类实现了接口,可以用接口类型获取bean</p><p>可以使用intance来判断是否能获取</p><h3 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;niupi&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当有重复构造时 可以指定name匹配</p></blockquote><h3 id="特殊类型注入"><a href="#特殊类型注入" class="headerlink" title="特殊类型注入"></a>特殊类型注入</h3><blockquote><p>value:给基本量赋值</p><p>赋值为null:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span> /&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!&lt;![CDATA[</span><br><span class="line"></span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure></blockquote><p>特殊字符输入 不能直接做为属性输入</p><h3 id="为类类型属性赋值"><a href="#为类类型属性赋值" class="headerlink" title="为类类型属性赋值"></a>为类类型属性赋值</h3><h4 id="引用外部bean"><a href="#引用外部bean" class="headerlink" title="引用外部bean"></a>引用外部bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazz01&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazz01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="级连"><a href="#级连" class="headerlink" title="级连"></a>级连</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentFive&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazz01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内部bean"><a href="#内部bean" class="headerlink" title="内部bean"></a>内部bean</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;StudentFive&quot; class=&quot;com.zjj.spring.Student&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sid&quot; value=&quot;1001&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot; value=&quot;21&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;gender&quot; value=&quot;nan&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;zjj&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;clazz&quot;&gt;</span><br><span class="line">            &lt;bean id=&quot;clazzInner&quot; class=&quot;com.zjj.spring.Clazz&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;cid&quot; value=&quot;1111&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;cname&quot; value=&quot;2222&quot;/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="为数组类型赋值"><a href="#为数组类型赋值" class="headerlink" title="为数组类型赋值"></a>为数组类型赋值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span> value为实际类型也可用ref</span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为列表属性赋值"><a href="#为列表属性赋值" class="headerlink" title="为列表属性赋值"></a>为列表属性赋值</h3><p>内部list</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1班&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentThree&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentTwo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置util约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;StudentList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentTwo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;StudentThree&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;StudentList&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11111&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一班&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为map赋值"><a href="#为map赋值" class="headerlink" title="为map赋值"></a>为map赋值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentEight&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherOne&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherTwo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TeacherOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;TeacherTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zjj2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引用Util"><a href="#引用Util" class="headerlink" title="引用Util"></a>引用Util</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teachermap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherOne&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;zjj2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;TeacherTwo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="p命名空间"><a href="#p命名空间" class="headerlink" title="p命名空间"></a>p命名空间</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;StudentTen&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Student&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;zjj&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teachermap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入外部数据"><a href="#引入外部数据" class="headerlink" title="引入外部数据"></a>引入外部数据</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://121.41.39.152:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;979508.a&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用文件连接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>指定bean标签的scope属性来指定bean的作用域范围</p><table><thead><tr><th>取值</th><th>含义</th><th align="center">创建时机</th></tr></thead><tbody><tr><td>singleton(默认)</td><td>单例模式</td><td align="center">ioc被创建时</td></tr><tr><td>prototype</td><td>多例模式</td><td align="center">获取bean时</td></tr></tbody></table><h3 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h3><p>具体</p><blockquote><ul><li>bean对象创建(调用无参构造器)</li><li>给bean对象设置属性</li><li>bean对象初始化之前操作(由bena的后置处理器负责) postProcessBeforeInitialization</li><li>bean对象初始化(需要在配置bean时指定初始化方法)</li><li>bean对象初始化后操作(由bean的后置处理器负责)postProcessAfterInitialization</li><li>bean对象就绪待使用</li><li>bean对象销毁(需要在配置bean时指定销毁方法)</li><li>ioc关闭</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.User&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2385172737&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2385172737@zjj&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多例时:在获取bean的时候执行</p><p>单例时:在获取ioc的时候执行</p></blockquote><h3 id="bean处理器"><a href="#bean处理器" class="headerlink" title="bean处理器"></a>bean处理器</h3><p>实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanPostProcessor======&gt;后置处理器postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanPostProcessor======&gt;后置处理器postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;MyBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.process.MyBeanPostProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><blockquote><p>实现FactoryBean接口</p><p>getObject() 通过一个对象交给ioc容器</p><p>getObjectType()设置对象类型</p><p>isSingLeton()是否单例</p><p>当FactoryBean的实现类配置为bean时,会将当前类的getobject方法所返回的对象交给ioc管理</p></blockquote><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><blockquote><p>自动为类类型赋值</p><p>no,default:不会自动匹配bean为属性赋值 使用默认值</p><p>byType:根据要赋值的类型 在ioc容器中匹配 类型需要唯一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.Controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;userService&quot; ref=&quot;userService&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zjj.spring.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> byType方式</span><br></pre></td></tr></table></figure><p>byname 与bytype类似</p></blockquote><h2 id="基于注解管理bean"><a href="#基于注解管理bean" class="headerlink" title="基于注解管理bean"></a>基于注解管理bean</h2><blockquote><p>@Component:将类标识为普通组件</p><p>@Controller:将类标识为控制层组件</p><p>@Service:将类标识为业务层组件</p><p>@Repository:将类标识为持久层组件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    扫描组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="排除扫描-exclude-filter"><a href="#排除扫描-exclude-filter" class="headerlink" title="排除扫描(exclude-filter)"></a>排除扫描(exclude-filter)</h3><h3 id="包含扫描-include-filter-需要改变use的属性-默认为true"><a href="#包含扫描-include-filter-需要改变use的属性-默认为true" class="headerlink" title="包含扫描(include-filter) 需要改变use的属性 默认为true"></a>包含扫描(include-filter) 需要改变use的属性 默认为true</h3><ul><li>annptation根据注解类型</li><li>assignable根据类类型</li></ul><blockquote><p>基于注解+id和类型获取 id为类名的小驼峰</p><p>自定义id注解内加入值</p></blockquote><h3 id="基于注解的自动装配"><a href="#基于注解的自动装配" class="headerlink" title="基于注解的自动装配"></a>基于注解的自动装配</h3><p>不需要实现get set方法</p><blockquote><p>原理:</p><ul><li>通过bytype在ioc容器中通过类型匹配bean为属性赋值</li><li>当有多个类型则自动使用byname来实现自动装配</li><li>若byname和bytype都无法自动转配 直接报错</li><li>此时可以在赋值的属性上添加@Qualifier注解 值为bean的id</li><li>当没有任何类型匹配的bean时 报错</li></ul></blockquote><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="静态代理-套娃代理"><a href="#静态代理-套娃代理" class="headerlink" title="静态代理(套娃代理)"></a>静态代理(套娃代理)</h3><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//ClassLoader loader 指定加载动态生成的代理的类加载器</span></span><br><span class="line">        <span class="comment">//Class&lt;?&gt;[] interfaces, 获取目标对象实现的所有接口的class对象数组</span></span><br><span class="line">        <span class="comment">//InvocationHandler h 设置代理类中的抽象方法如何重写</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">               <span class="comment">//proxy 表示代理对象</span></span><br><span class="line">                <span class="comment">//method 表示执行的方法</span></span><br><span class="line">                <span class="comment">//args 参数列表</span></span><br><span class="line">                System.out.println(<span class="string">&quot;日志,方法: &quot;</span>+method.getName()+<span class="string">&quot;,&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;日志,方法 &quot;</span>+method.getName()+<span class="string">&quot; 结果 &quot;</span>+result);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader,interfaces,handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorImpl</span>());</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator)proxyFactory.getProxy();</span><br><span class="line">        proxy.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP(面向切面编程)"></a>AOP(面向切面编程)</h2><blockquote><ul><li>切面(ASPECT):横切关注点被模块化的特殊处理对象 一个类</li><li>通知(Advice):切面必须要完成得到工作 为类中的一个方法</li><li>目标(target):被通知的对象</li><li>代理(Proxy):向目标对象应用通知之后创建的对象</li><li>切入点(PointCut):切面通知执行的地点的定义</li><li>连接点(JointPoint):与切入点匹配的执行点</li></ul></blockquote><h3 id="基于注解的AOP"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h3><p><img src="/2022/08/11/Spring/image-20220805223658242.png" alt="image-20220805223658242"></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    AOP的注意事项:</span></span><br><span class="line"><span class="comment">    切面类和目标类都需要交给ioc容器管理</span></span><br><span class="line"><span class="comment">    讲切面类通过@Aspect表示为切面类</span></span><br><span class="line"><span class="comment">    配置文件设置 &lt;aop:aspectj-autoproxy/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring.test.aop.Annotation&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启基于注解的aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>前置通知使用@Before注解 方法执行之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int com.zjj.spring.aop.Annotation.CalculatorImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(* com.zjj.spring.aop.Annotation.*.</span></span><br><span class="line"><span class="meta">        *(..))&quot;)</span></span><br><span class="line">    <span class="comment">//任意修饰符任意修饰返回值 当前包的所有类所有方法 参数任意</span></span><br></pre></td></tr></table></figure><p>获取连接点信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* com.zjj.spring.test.aop.Annotation.*.*(..))&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdviceMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">       <span class="comment">//获取连接点所对应方法的签名信息</span></span><br><span class="line">       <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">       <span class="comment">//获取连接点方法的参数</span></span><br><span class="line">       Object[] args = joinPoint.getArgs();</span><br><span class="line">       System.out.println(<span class="string">&quot;LoggerAspect, 方法: &quot;</span>+signature.getName()+<span class="string">&quot;方法参数: &quot;</span>+ Arrays.toString(args));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.zjj.spring.test.aop.Annotation.CalculatorImpl.*(..)))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">      public void pointcut()&#123;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br></pre></td></tr></table></figure><p>其他地方的切入点表达式直接使用pointcut()即可</p><blockquote><ul><li>@After:后置通知,在目标对象方法的finally处执行</li><li>@AfterReturning 返回值之后执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;pointcut()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturnningMethod</span><span class="params">(JoinPoint joinPoint,Object result)</span>&#123;</span><br><span class="line">           <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">           System.out.println(<span class="string">&quot;方法&quot;</span>+signature.getName()+<span class="string">&quot;返回值&quot;</span>+result);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li><p>@AfterThrowing 异常通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pointcut()&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterThrowingMethod</span><span class="params">(JoinPoint joinPoint,Exception ex)</span>&#123;</span><br><span class="line">           <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">           System.out.println(<span class="string">&quot;异常&quot;</span>+signature.getName()+<span class="string">&quot;异常&quot;</span>+ex);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li><p>@Around通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">aroundAdviceMethod</span><span class="params">(ProceedingJoinPoint JoinPoint)</span> &#123;</span><br><span class="line">      Object result=<span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;前置通知&quot;</span>);</span><br><span class="line">          <span class="comment">//表示目标对象方法的执行</span></span><br><span class="line">          result = JoinPoint.proceed();</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;返回通知&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;异常通知&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;环绕通知=====&gt;后置通知&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><h4 id="切面优先级"><a href="#切面优先级" class="headerlink" title="切面优先级"></a>切面优先级</h4><p>使用@Order()来设置优先级 优先级越小越高</p><h3 id="基于XML的AOP"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring.test.aop.xml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zjj.spring.test.aop.xml.CalculatorXmlImpl.*(..)))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeAdviceMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;AfterAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturnningMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;AfterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundAdviceMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h4 id="JDBCTemple"><a href="#JDBCTemple" class="headerlink" title="JDBCTemple"></a>JDBCTemple</h4><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置spring配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--    引入数据源--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class="line">    &lt;bean class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> id=<span class="string">&quot;dataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean class=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="update实现增删改的功能"><a href="#update实现增删改的功能" class="headerlink" title="update实现增删改的功能"></a>update实现增删改的功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//设置spring测试环境的配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;insert into t_user values(null,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,<span class="string">&quot;zhongjajian&quot;</span>,<span class="string">&quot;979508.a&quot;</span>,<span class="number">21</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;2385172737&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestGetUserById</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from t_user where id=?&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), <span class="number">28</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from t_user&quot;</span>;</span><br><span class="line">        List&lt;User&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCount</span><span class="params">()</span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select count(*) from t_user&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于注解的声明事务"><a href="#基于注解的声明事务" class="headerlink" title="基于注解的声明事务"></a>基于注解的声明事务</h3><blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_mybatis_spring_mvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_ioc_annotation<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_ioc_xml<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_proxy<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_aop<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring_transaction<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-generator依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在spring配置文件中配置事务管理器</p><p>开启事务驱动</p><p>使用@Transactional注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zjj.spring&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启事务的注解驱动</span></span><br><span class="line"><span class="comment">    将使用@Transactional注解标识的类或方法使用事务管理</span></span><br><span class="line"><span class="comment">    transaction-manager设置事务管理器的ID</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++基础</title>
      <link href="/2022/08/11/cpp%E5%85%A5%E9%97%A8/"/>
      <url>/2022/08/11/cpp%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="cpp入门"><a href="#cpp入门" class="headerlink" title="cpp入门"></a>cpp入门</h2><h3 id="输出函数cout-lt-lt"><a href="#输出函数cout-lt-lt" class="headerlink" title="输出函数cout&lt;&lt;"></a>输出函数cout&lt;&lt;</h3><p>使用&lt;&lt;进行拼接</p><h3 id="输入函数-cin-gt-gt"><a href="#输入函数-cin-gt-gt" class="headerlink" title="输入函数 cin&gt;&gt;"></a>输入函数 cin&gt;&gt;</h3>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2022/08/11/java/"/>
      <url>/2022/08/11/java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><h4 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h4><blockquote><ul><li><p>ASII(American Standard Code for information Interchange 美国信息交换标准代码):包括数字,英文,括号</p></li><li><p>ASCII使用一个字节存储一个字符,一个字节为8位</p></li></ul></blockquote><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><blockquote><ul><li>windows中文系统默认,兼容ASCII码,包含汉字,繁体字和日韩文字</li><li>GBK为中国的码表,一个中文以两个字节的形式存储,不包括所有</li></ul></blockquote><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><blockquote><ul><li>unicode(统一码):计算机科学领域的一项业界字符编码标准</li><li>变种UTF-8</li><li>UTF-8一个中文三个字节</li><li>编码前与编码后的字符集需要保持一致</li></ul></blockquote><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><blockquote><ul><li>字节输入流:以内存为基准,来自磁盘或网络钟的数据以<code>字节形式读取到内存中</code>去的流称为字节输入流</li><li>字节输出流:以内存为基准,来自磁盘或网络钟的数据以<code>字节形式写到到内存中</code>去的流称为字节输出流</li><li>字符输入流:以内存为基准,以内存为基准,来自磁盘或网络钟的数据以<code>字符形式读取到内存中</code>去的流称为字符输入流</li><li>字节输出流:以内存为基准,来自磁盘或网络钟的数据以<code>字符形式写到到内存中</code>去的流称为字符输出流</li></ul></blockquote><h3 id="IO流体系"><a href="#IO流体系" class="headerlink" title="IO流体系"></a>IO流体系</h3><blockquote><ul><li>字节流<ul><li>InputStream<br>        + FileInputSream</li><li>OutputStream<ul><li>FileOutPutStream</li></ul></li></ul></li><li>字符流<ul><li>Reader<ul><li>FileReader</li></ul></li><li>Writer<ul><li>FileWriter</li></ul></li></ul></li></ul></blockquote><p><img src="/2022/08/11/java/image-20220801223143604.png" alt="image-20220801223143604"></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="1-继承Thread类创建线程类"><a href="#1-继承Thread类创建线程类" class="headerlink" title="1.继承Thread类创建线程类"></a>1.继承Thread类创建线程类</h3><ul><li>定义Thread类的子类,重写该类的run()方法,run()方法的方法体代表了线程需要完成的任务</li><li>创建Thread类的实例,即创建了线程对象</li><li>调用线程对象的start()方法来启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 重写run()方法,run()方法的方法体就是线程执行体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">              <span class="comment">//继承thread类使用this获取当前线程</span></span><br><span class="line">              <span class="comment">//thread的getname返回当前线程的名字</span></span><br><span class="line">              <span class="comment">//调用getname返回线程名</span></span><br><span class="line">            System.out.println(getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 调用Thread的currentThread()方法获取当前线程</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)&#123;</span><br><span class="line">                <span class="comment">// 启动第一个线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadTest</span>().start();</span><br><span class="line">                <span class="comment">// 启动第二个线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadTest</span>().start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>Thread.currentThread(),currentThread()是Thread类的静态方法,该方法返回当前正在执行的线程对象</li><li>getName() 该方法是Thread类的实例方法,该方法返回调用该方法的线程的名字</li></ul></blockquote><h3 id="2-实现Runnable接口创建线程类"><a href="#2-实现Runnable接口创建线程类" class="headerlink" title="2.实现Runnable接口创建线程类"></a>2.实现Runnable接口创建线程类</h3><ul><li>定义Runnable接口的实现类,重写该接口的run方法,该run方法体同样是该线程的线程执行体</li><li>创建Runnable实现类的实例,并以此示例作为Thread的targe来创建Thread对象,该Thread对象为真正的线程对象</li><li>调用线程对象的start()方法来启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableTest</span>  <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> i;</span><br><span class="line">    \\ run方法同样是线程执行体</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;  i&lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//只能用thread.currentThread方法获取</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="type">RunnableTest</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableTest</span>();</span><br><span class="line">                <span class="comment">// 通过new Thread(target, name)方法创建新线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用Callable和Future方法创建线程"><a href="#3-使用Callable和Future方法创建线程" class="headerlink" title="3.使用Callable和Future方法创建线程"></a>3.使用Callable和Future方法创建线程</h3><blockquote><ul><li>call方法可以有返回值</li><li>call方法可以声明抛出异常</li></ul><p>Futrre接口代表Callable接口里call方法的返回值</p><ul><li>boolean cancel(boolean mayInteruptIfRunning): 试图取消该Furue里关联的Callable任务</li><li>V get()返回callable任务里call方法的返回值,调用该方法会导致程序阻塞,必须等到子线程结束后才会得到返回值</li><li>V get(long timeout,TimeUnit unit)返回Callable任务里call方法的返回值,该方法让程序最多阻塞timeout和unit指定的时间,如果过了指定时间callable人物依然没有返回值 将抛出TimeoutException异常</li><li>boolean isCancelled()如果Callable任务正常完成前被取消则返回true</li><li>bollean isDone如果callable已完成则返回True</li></ul></blockquote><ul><li>创建Callable接口的实现类,实现call方法,call方法为线程执行体,且call有返回值,再创建Callable实现类的实例</li><li>使用TutureTask类来包装Callable对象,该FutureTask对象封装了该Callable对象的call方法的返回值</li><li>使用FutureTask对象作为Thread对象的target创建并启动线程</li><li>使用FutureTask对象的get方法来获得子线程执行结束后的返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        \\ 创建callable对象</span><br><span class="line">        ThirdThread rt=<span class="keyword">new</span> <span class="title class_">ThirdThread</span>();</span><br><span class="line">        \\ 先使用Lambda表达式创建Callable&lt;Integer&gt;对象</span><br><span class="line">        \\ 使用FutureTask来包装Callable对象</span><br><span class="line">        FutureTask&lt;Integer&gt; task=<span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;((Callable&lt;Integer&gt;)()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 的循环变量i的值 &quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// call方法可以有返回值</span></span><br><span class="line">           <span class="keyword">return</span> i;</span><br><span class="line">        &#125; );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 的循环变量i的值: &quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)&#123;</span><br><span class="line">                <span class="comment">// 实质还是以Callable对象来创建并启动线程</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(task,<span class="string">&quot;有返回值的线程&quot;</span>).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//获取线程返回值</span></span><br><span class="line">            System.out.println(<span class="string">&quot;子线程的返回值： &quot;</span>+task.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><ul><li><p>新建:使用new关键字创建了一个线程之后,该线程就处于新建状态,虚拟机分配内存,吃实话成员变量的值</p></li><li><p>就绪:对象调用start方法后该线程处于就绪状态,虚拟机为其创建方法调用栈和程序计数器,这个状态还没有运行只是可以运行,什么时候运行取决于线程调度器</p><blockquote><p>启动线程只能使用start方法不能使用run方法 只能对处于新建状态的线程调用start方法否则会抛出异常</p></blockquote></li><li><p>运行:开始执行run方法的线程执行体</p></li><li><p>阻塞: 发生以下情况</p><blockquote><ul><li>线程调用sleep方法主动放弃所占用饿处理器资源</li><li>线程调用了一个阻塞式IO方法,在该方法峰会之前,线程会被阻塞</li><li>线程试图获得一个同步监视器</li><li>线程在等待某个通知</li><li>程序调用了线程的suspend方法将线程挂起()容易引起死锁</li></ul></blockquote><p>当正在执行的线程进入了阻塞状态,其他线程就可以获得执行的机会,阻塞的线程会重新进入就绪状态,阻塞的线程的阻塞解除后,必须重新等待线程调度器再次调度它</p><p>解除阻塞</p><blockquote><ul><li>调用的sleep方法的线程经过了指定的时间</li><li>线程调用的阻塞式IO方法已经返回</li><li>线程成功地获得了试图取得的同步监视器</li><li>线程正在等待某个通知时,其他线程发出了一个通知</li><li>处于挂起的线程调用了resume恢复方法</li></ul></blockquote></li><li><p>线程死亡</p><blockquote><ul><li><p>run或call方法执行完成线程正常结束</p></li><li><p>线程抛出一个未捕获的Exception或Error</p></li><li><p>直接调用线程的stop方法来结束线程(容易死锁)</p></li></ul></blockquote><h3 id="控制线程"><a href="#控制线程" class="headerlink" title="控制线程"></a>控制线程</h3><h4 id="1-Join线程"><a href="#1-Join线程" class="headerlink" title="1 Join线程"></a>1 Join线程</h4><blockquote><p>Thread提供了一个让线程等待另一个线程完成的方法join方法.当某个程序执行流中调用其他线程的join方法时,调用线程将被阻塞,知道被join方法加入的join线程执行完成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoinThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">// 设置有参数构造器 用于设置线程的名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JoinThread</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写run方法 定义线程执行体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JoinThread</span>(<span class="string">&quot;新线程&quot;</span>).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                JoinThread jt=<span class="keyword">new</span> <span class="title class_">JoinThread</span>(<span class="string">&quot;被join的线程&quot;</span>);</span><br><span class="line">                jt.start();</span><br><span class="line">                <span class="comment">// main调用了jt线程的join方法 main线程必须等jt执行结束才会向下执行</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jt.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>join方法重载</p><ul><li>join()等待join线程执行完成</li><li>join(long millis)等待join的线程最长为millis毫秒 如果在这个时间没有执行完成 则不继续等待</li><li>join(long millis,int nanos)等待被join的线程的时间最长为mills毫秒+nanos毫微秒</li></ul><h4 id="2-后台线程"><a href="#2-后台线程" class="headerlink" title="2.后台线程"></a>2.后台线程</h4><blockquote><p>后台运行的线程为别的线程提供服务也称守护线程</p><p>特征:前台线程死亡后台线程自动死亡</p><p>使用setDaemon(true)将指定线程设置为后台线程</p><p>判断是否为后台线程isDaemon()</p><p>设置后台线程需在start之前调用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.net.SocketTimeoutException;</span><br><span class="line"></span><br><span class="line">public class DaemonThread extends Thread&#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt;1000 ; i++) &#123;</span><br><span class="line">            System.out.println(getName()+&quot; &quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        DaemonThread t=new DaemonThread();</span><br><span class="line">        //设置为后台线程</span><br><span class="line">        t.setDaemon(true);</span><br><span class="line">        // 启动线程</span><br><span class="line">        t.start();</span><br><span class="line">        for (int i = 0; i &lt;10 ; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot; &quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">        // 程序执行到此处 前台线程main线程结束 后台线程随之结束</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-线程睡眠"><a href="#3-线程睡眠" class="headerlink" title="3.线程睡眠"></a>3.线程睡眠</h4><blockquote><p>想让正在执行的线程暂停一段时间进入阻塞状态,可以使用Thread类的静态方法sleep实现</p><p>sleep重载:</p><p>1.static void sleep(long millis)让当前线程暂停millis毫秒,进入阻塞状态</p><p>2.static void sleep(long millis,int nanos)正在执行的线程暂停millis毫秒+nanos毫微秒</p></blockquote><p>sleep和yield的区别</p><blockquote><p>1.sleep方法暂停该线程后,给其他线程执行机会,不关注其他线程的优先级,而yield只会给优先级相同或更高优先级的线程执行机会</p><p>2.sleep方法会将线程进入阻塞状态,知道阻塞时间过了才会转入就绪状态,而yield不会转入阻塞状态,只是强制该线程进入就绪状态</p><p>3.sleep方法声明抛出IntertuptException异常,所以使用sleep方法要么捕获该异常,要么显式的抛出异常而yield方法则没有声明抛出异常</p><p>4.sleep比yield有更好的移植性,通常不建议用yield方法来控制并发线程的执行3#</p></blockquote><h4 id="4-改变线程优先级"><a href="#4-改变线程优先级" class="headerlink" title="4.改变线程优先级"></a>4.改变线程优先级</h4><blockquote><p>每个线程执行都具有一定的优先级,优先级高的线程获得较多的执行机会</p><p>每个线程默认的优先级与他创建它的父线程优先级相同,在默认情况下main线程具有普通优先级,所以由main线程创建的子线程也具有普通优先级</p><p>Thread类提供setPriority(int newPriority)、getPrioritu()方法来设置和返回指定线程的优先级,setPriority方法的参数为1-10之间的整数也有三个常量</p><p>MAX_PRIORITY:10</p><p>MIN_PRIORITY:1</p><p>NORM_PRIORITY:5</p></blockquote><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><h4 id="1-线程安全问题"><a href="#1-线程安全问题" class="headerlink" title="1.线程安全问题"></a>1.线程安全问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.plaf.BorderUIResource;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.FlatteningPathIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">//封装账户编号、账号余额的两个成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String accountNo,<span class="type">double</span> balance)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNo=accountNo;</span><br><span class="line">        <span class="built_in">this</span>.balance=balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccountNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountNo</span><span class="params">(String accountNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountNo = accountNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountNo.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>==obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj!=<span class="literal">null</span>&amp;&amp;obj.getClass()==Account.class)&#123;</span><br><span class="line">            Account target=(Account) obj;</span><br><span class="line">            <span class="keyword">return</span> target.getAccountNo().equals(accountNo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.processing.SupportedOptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">//模拟账户</span></span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line">    <span class="comment">// 当前取钱线程所希望取的钱数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> drawAmount;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawThread</span><span class="params">(String name,Account account,<span class="type">double</span> drawAmount)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.account=account;</span><br><span class="line">        <span class="built_in">this</span>.drawAmount=drawAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 多个线程修改同一共享数据 涉及数据安全问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 使用account作为同步监视器,任何线程进入下面同步代码之前 必须获得对account账户的锁定 其他线程无法获得锁 也就无法修改它 这种做法复核加锁修改释放锁的逻辑</span></span><br><span class="line">        <span class="comment">// 账户余额大于取钱数</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line">            <span class="keyword">if</span>(account.getBalance()&gt;=drawAmount)&#123;</span><br><span class="line">                <span class="comment">//吐出钱</span></span><br><span class="line">                System.out.println(getName()+<span class="string">&quot;取钱成功!&quot;</span>+drawAmount);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                account.setBalance(account.getBalance()-drawAmount);</span><br><span class="line">                System.out.println(<span class="string">&quot;\t余额为: &quot;</span>+account.getBalance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(getName()+<span class="string">&quot;取钱失败! 余额不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Account acct=<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;1234567&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(<span class="string">&quot;甲&quot;</span>,acct,<span class="number">800</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(<span class="string">&quot;乙&quot;</span>,acct,<span class="number">800</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用synchronized后的括号里的obj来进行代码同步 线程开始执行同步代码块之前,必须获得对同步监视器的锁定</p></blockquote><h4 id="2-同步方法"><a href="#2-同步方法" class="headerlink" title="2.同步方法"></a>2.同步方法</h4><blockquote><p>就是用synchronized关键字来修饰的某个方法(非static)同步方法的同步监视器是this</p><p>特征:1.该类的对象可以被多个线程安全地访问 2.每个线程调用该对象的任意方法之后都将获得正确的结果 3.每个线程调用该对象的任意方法之后,该对象状态依然保持合理状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">double</span> drawAmount)</span>&#123;</span><br><span class="line">        <span class="comment">// 账户余额大于取钱数目</span></span><br><span class="line">        <span class="keyword">if</span>(balance &gt;=drawAmount)&#123;</span><br><span class="line">            <span class="comment">//取钱成功</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;取钱成功！&quot;</span>+drawAmount);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 修改余额</span></span><br><span class="line">            balance-=drawAmount;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t 余额为: &quot;</span>+balance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;取钱不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>synchronized关键字可以修饰方法,修饰代码块,不能修饰构造器成员变量</p></blockquote><h4 id="3-释放同步监视器的锁定"><a href="#3-释放同步监视器的锁定" class="headerlink" title="3.释放同步监视器的锁定"></a>3.释放同步监视器的锁定</h4><ul><li>当前线程的同步方法、同步代码执行结束,当前线程即释放同步监视器</li><li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行,当前线程将会释放同步监视器</li><li>当前线程在同步代码块、同步方法出现了未处理的Error或Exception,导致了代码块、该方法异常结束时,当前线程将会释放同步监视器</li><li>当前线程执行同步代码块或同步方法时,程序执行了同步监视器对象的wait方法,则当前线程暂停,并释放同步监视器</li><li>线程执行同步代码块或同步方法时,程序调用Thread.sleep,Thread.yield方法来暂停当前线程的执行,当前线程不会释放同步监视器</li><li>线程执行同步代码块时,其他线程调用了该线程的suspend方法将线程挂起,该线程不会释放同步监视器,当然,程序应该尽量避免使用suspend和resume方法来控制线程</li></ul></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h3><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><h3 id="UDP三种通信方式"><a href="#UDP三种通信方式" class="headerlink" title="UDP三种通信方式"></a>UDP三种通信方式</h3><blockquote><ul><li>单播:点对点</li><li>广播:点对全集</li><li>组播:点多组</li></ul></blockquote><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="元注解-注解的注解"><a href="#元注解-注解的注解" class="headerlink" title="元注解(注解的注解)"></a>元注解(注解的注解)</h3><blockquote><ul><li>@Target:约束自定义注解只能在哪里使用</li><li>@Retention:申明注解的生命周期</li></ul></blockquote><p> <img src="/2022/08/11/java/image-20220803111648842.png" alt="image-20220803111648842"></p><h3 id="注解的解析"><a href="#注解的解析" class="headerlink" title="注解的解析"></a>注解的解析</h3><blockquote><p>判断是否存在注解,注解存在则解析出内容</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象</title>
      <link href="/2022/08/11/javase/"/>
      <url>/2022/08/11/javase/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>方法名一样但参数不一样</p><p>可变参数:数据类型…参数名(放在最后)有且只有一个</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>构造器可以重载(与类名相同)</p><p>没有返回值</p><p>完成对象的初始化</p><p>由系统调用</p><p>如果没有定义构造器 系统自动定义无参数构造器当自己定义后系统的自动失效就不能使用无参数如需使用则需自己定义一个无参数构造器</p><p>使用this.构造器必须置于第一条语句</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl+d 删除该行</p><p>复制行ctrl+alt+下</p><p>注释 ctrl+&#x2F;</p><p>自动导入类 alt+enter</p><p>调整代码格式ctrl+alt+l</p><p>生成构造器等 clt+insert</p><p>查看类关系 ctrl+h</p><p>定位方法类 ctrl+b</p><h2 id="包命名规范"><a href="#包命名规范" class="headerlink" title="包命名规范"></a>包命名规范</h2><p>不能以数字开头</p><p>com.公司名.项目名.模块名</p><p><img src="/2022/08/11/javase/image-20220718164316557.png" alt="image-20220718164316557"></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>可以将get set写入构造器</p><h2 id="继承-extends"><a href="#继承-extends" class="headerlink" title="继承(extends)"></a>继承(extends)</h2><ul><li>子类继承所有的属性和方法,私有属性和方法不能在子类直接访问,要通过公共的方法去访问</li><li>子类必须调用父类的构造器,完成父类构造器的初始化(默认调用super)</li><li>当创建子类对象时,不管使用子类的哪个构造器,默认情况下总会调用父类的无参构造器,如果父类没有提供无参构造器,则必须在子类的构造器用super去指定使用父类的哪个构造器完成初始化工作,否则报错。</li><li>如果希望显式的调用父类的某个构造器,则显式的调用一下super(参数列表)</li><li>super要放在构造器的第一行</li><li>super和this调用构造器不能同时使用</li><li>object是任何类的基类</li><li>单继承</li></ul><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>super表父类的引用 可以访问父类的属性 方法 构造器(private不行)</p><ul><li>super 父类初始化父类 子类初始化子类</li><li>如有重名的方法或属性需使用super或this</li><li>重复遵循就近原则</li></ul><h2 id="重写-override"><a href="#重写-override" class="headerlink" title="重写(override)"></a>重写(override)</h2><p><img src="/2022/08/11/javase/image-20220718222159111.png" alt="image-20220718222159111"></p><p><img src="/2022/08/11/javase/image-20220718223618399.png" alt="image-20220718223618399"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p> 方法或对象具有多种心态 建立在封装和继承之上</p><ul><li><p>方法和重载体现多态</p></li><li><p>对象的多态(编译看左边 运行看右边 父类的引用指向子类)</p><p><img src="/2022/08/11/javase/image-20220719125743630.png" alt="image-20220719125743630"></p><ul><li>可以调用父类的所有成员(访问权限)</li><li>不能调用子类的特有成员</li></ul><p><img src="/2022/08/11/javase/image-20220719133346029.png" alt="image-20220719133346029"></p><p><img src="/2022/08/11/javase/image-20220719133842550.png" alt="image-20220719133842550"></p><h2 id="多态绑定"><a href="#多态绑定" class="headerlink" title="多态绑定"></a>多态绑定</h2><ul><li>方法与运行类型绑定</li><li>属性哪里声明哪里使用</li></ul><h2 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h2><p>定义类型为父类类型 保存的元素为子类类型</p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p><img src="/2022/08/11/javase/image-20220719160606387.png" alt="image-20220719160606387"></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p><img src="/2022/08/11/javase/image-20220719184518997.png" alt="image-20220719184518997"></p><p><img src="/2022/08/11/javase/image-20220719185339467.png" alt="image-20220719185339467"></p></li></ul><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p><img src="/2022/08/11/javase/image-20220719185448128.png" alt="image-20220719185448128"></p><p><img src="/2022/08/11/javase/image-20220719190621867.png" alt="image-20220719190621867"></p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>含有抽象方法的类,由其子类实现抽象方法</p><ul><li>抽象类不能被实例化</li><li>抽象类可以没有抽象方法</li><li>abstract只能修饰类和方法</li><li>继承了抽象类 必须实现抽象类的所有方法 除非自己也是抽象类</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>可以有抽象方法</li><li>可以有默认实现方法</li><li>可以有静态方法</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>局部内部类(方法内)</p><ul><li><p>局部内部类(有类名)</p></li><li><blockquote><pre><code>不能用访问修饰符修饰 可以用finally可以访问外部类所有成员(含私有)作用域在定义的地方局部内部类可以直接访问外部类成员外部类访问内部类 需要实例化重名属性使用外部类名.this.成员<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 匿名内部类(无类名,重点)</span><br><span class="line"></span><br><span class="line">+ &gt; ```</span><br><span class="line">只使用一次</span><br><span class="line">函数式接口</span><br><span class="line">可以访问外部类的所有属性包括私有的</span><br><span class="line">作用域方法或代码块中</span><br><span class="line">外部类不能访问内部类</span><br><span class="line">重名属性使用外部类名.this.成员</span><br></pre></td></tr></table></figure></code></pre></blockquote></li></ul><p>外部类的成员变量</p><ul><li><p>成员内部类(无static)</p></li><li><blockquote><p>可以访问外部的所有属性包括私有的</p><p>类内的方法可以实例化调用</p><p>可以用修饰符修饰</p><p>作用域:和其他成员一样 </p><p>内部类访问外部 直接访问</p><p>外部访问内部 创建对象访问</p><p>重名 外部类名.this.属性</p></blockquote></li><li><p>静态内部类(有static)</p></li><li><blockquote><p>可以有修饰符修饰</p><p>静态类能访问静态成员(包括私有的)</p><p>跟其他成员一样</p><p>访问内部访问外部直接访问</p><p>外部访问内部先实例化</p></blockquote><h2 id="枚举-有限特定的对象"><a href="#枚举-有限特定的对象" class="headerlink" title="枚举(有限特定的对象)"></a>枚举(有限特定的对象)</h2><h3 id="自定义枚举"><a href="#自定义枚举" class="headerlink" title="自定义枚举"></a>自定义枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> enum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:Eumer01</span></span><br><span class="line"><span class="comment"> * Package:enum_</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2022/7/20 15:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Eumer01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.Spring);</span><br><span class="line">        System.out.println(Season.Summer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部不允许new</span></span><br><span class="line">    <span class="comment">// 去掉set方法</span></span><br><span class="line">    <span class="comment">// 创建固定对象</span></span><br><span class="line">    <span class="comment">// 加入final修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Spring</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Summer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Autumn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">Winter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="系统枚举"><a href="#系统枚举" class="headerlink" title="系统枚举"></a>系统枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> enum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName:Enumeraltion</span></span><br><span class="line"><span class="comment"> * Package:enum_</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2022/7/20 15:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:CodeZhong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeraltion</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season2.AUTUMN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season2</span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;绿色&quot;</span>),SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;炎热&quot;</span>),AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    Season2(String name, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="override-重写"><a href="#override-重写" class="headerlink" title="override 重写"></a>override 重写</h3><blockquote><p>只能用在方法上</p></blockquote><h3 id="Deprecated-过时"><a href="#Deprecated-过时" class="headerlink" title="Deprecated 过时"></a>Deprecated 过时</h3><h3 id="SuppressWarring-抑制警告"><a href="#SuppressWarring-抑制警告" class="headerlink" title="SuppressWarring 抑制警告"></a>SuppressWarring 抑制警告</h3><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> num2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> res=num1/num2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序抛出异常 直接崩溃 这样程序不得行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;继续运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Error Java虚拟机无法解决的严重错误  资源不足 爆栈等</p></li><li><p>Exception 外在元素的一般问题 空指针 读取不存在的文件  网络连接错误等</p><blockquote><p>编译异常:</p><p>运行异常:</p></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="/2022/08/11/javase/1658310744865-16583108356542.png" alt="1658310744865"></p><blockquote><p>set:无序不可重复集合</p><p>list:有序重复集合</p><p>map(关联数组):映射关系集</p></blockquote></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/08/11/js/"/>
      <url>/2022/08/11/js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><h2 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>首字母小写后面每个单词首字母大写</p></blockquote><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><blockquote><p>break   do     in                 typeof</p><p>case    else    insanceof    var</p><p>catch  export new            void</p><p>class   extends return     while</p><p>const finally     super    with</p><p>continue for switch yield</p><p>debugger function this</p><p>default if throw</p><p>delete import try</p><p>enum implement package public</p><p>interface protected static</p><p>let private await</p></blockquote><h3 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h3><blockquote><p>定义变量 自适应类型 作用域为函数作用域</p></blockquote><h3 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a>let关键字</h3><blockquote><p>与var 相同但作用域是在块上</p><p>不会变成windows对象属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">// 5 正确</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>undfined 值未定义</p><p>boolean 布尔值</p><p>string 字符串</p><p>number 数值</p><p>object 对象</p><p>function 函数</p><p>symbol 符号</p></blockquote><p><img src="/2022/08/11/js/image-20221001180858651.png" alt="image-20221001180858651"></p><h3 id="symbol类型"><a href="#symbol类型" class="headerlink" title="symbol类型"></a>symbol类型</h3><blockquote><p>需要使用symbol()函数来初始化</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2022/08/11/maven/"/>
      <url>/2022/08/11/maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2022/08/11/maven/image-20220716153010633.png" alt="image-20220716153010633"></p><p><img src="/2022/08/11/maven/image-20220716160459033.png" alt="image-20220716160459033"></p><p>在Maven中，任何项目输出都可成为构件。</p><p>每个构件都有自己的唯一标识，由 groupId，artifactId 和 version 等信息构成。</p><p>Maven可以对构件进行版本控制，管理。</p><h2 id="Maven构件标识"><a href="#Maven构件标识" class="headerlink" title="Maven构件标识"></a>Maven构件标识</h2><p>每个构件都有自己的唯一标识（Maven 行话称之为 <strong>“唯一坐标”</strong> ），由 groupId，artifactId 和 version 等信息构成。</p><ul><li>groupId：当前Maven构件隶属的组织名。groupId一般分为多段，通常情况下，第一段为域，第二段为公司名称。域又分为 org、com、cn 等，其中 org 为非营利组织，com 为商业组织，cn 表示中国。以 apache 开源社区的 tomcat 项目为例，这个项目的 groupId 是 org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artifactId是tomcat。(必须)</li><li>artifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。(必须)</li><li>version：当前版本。(必须)</li><li>packaging：打包方式，比如 jar，war… (必须)</li><li>classifier：classifier通常用于区分从同一POM构建的具有不同内容的构件。它是可选的，它可以是任意的字符串，附加在版本号之后。</li></ul><h2 id="Maven的classifier作用"><a href="#Maven的classifier作用" class="headerlink" title="Maven的classifier作用"></a>Maven的classifier作用</h2><p>classifier可以是任意的字符串，用于确定文件。常见的应用场景如下所示：</p><p>##1）可用于区分不同JDK版本所生成的jar包在平时的 Java Web 项目开发中，为了便于后期的维护，我们一般会进行分层开发，最常见的情况就是分为：domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层）。这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，可以使用 Maven 来构建以上的各个层。常见的 Java Web 项目结构如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">system-parent</span><br><span class="line">    　　|----pom.xml</span><br><span class="line">    　　　　</span><br><span class="line">    　　|----system-domain</span><br><span class="line">        　　　　　|----pom.xml</span><br><span class="line">    　　|----system-dao</span><br><span class="line">        　　　　　|----pom.xml</span><br><span class="line">    　　|----system-service</span><br><span class="line">        　　　　　|----pom.xml</span><br><span class="line">    　　|----system-web</span><br><span class="line">        　　　　　|----pom.xml</span><br></pre></td></tr></table></figure><h2 id="1、创建-system-parent-项目"><a href="#1、创建-system-parent-项目" class="headerlink" title="1、创建 system-parent 项目"></a>1、创建 system-parent 项目</h2><p>首先，创建 system-parent 项目，用来给各个子模块继承。进入命令行，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-parent -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在当前目录生成了 system-parent 目录，里面有一个 src 目录和一个 pom.xml 文件。</p><p>将 src 文件夹删除，然后修改 pom.xml 文件，将 <packaging>jar</packaging> 修改为 <packaging>pom</packaging>，pom 表示它是一个被继承的模块，修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="2、创建-sytem-domain-模块"><a href="#2、创建-sytem-domain-模块" class="headerlink" title="2、创建 sytem-domain 模块"></a>2、创建 sytem-domain 模块</h2><p>在命令行窗口中，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-domain -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在 system-parent 目录中生成了 system-domain，里面包含 src 目录和 pom.xml 文件。</p><p>同时，在 system-parent 目录中的 pom.xml 文件自动添加了如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><p>这时，system-parent 的 pom.xml 文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;org.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">     &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改 system-domain 目录中的 pom.xml 文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，加上 <packaging> jar </packaging>， 因为 groupId 和 version 会继承 system-parent 中的 groupId 和 version，packaging 设置打包方式为 jar。修改过后的 pom.xml 文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-domain&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-domain&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="3、创建-sytem-dao-模块"><a href="#3、创建-sytem-dao-模块" class="headerlink" title="3、创建 sytem-dao 模块"></a>3、创建 sytem-dao 模块</h2><p>在命令行窗口，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-dao -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在 system-parent 目录中生成了 system-dao，里面包含 src 目录和 pom.xml 文件。</p><p>同时，在 system-parent 目录中的 pom.xml 文件自动变成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;org.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-dao&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改 system-dao 目录中的 pom.xml 文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，加上<packaging>jar</packaging>，因为 groupId 和 version 会继承 system-parent 中的 groupId 和 version，packaging 设置打包方式为 jar，同时添加对 system-domain 模块的依赖，修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-dao&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-dao&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--system-dao需要使用到system-domain中的类，所以需要添加对system-domain模块的依赖--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-domain&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="4、创建system-service模块"><a href="#4、创建system-service模块" class="headerlink" title="4、创建system-service模块"></a>4、创建system-service模块</h2><p>在命令行窗口，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后可以看到在 system-parent 目录中生成了 system-service目录，里面包含 src 目录和 pom.xml 文件。</p><p>同时，在 system-parent 目录中的 pom.xml 文件自动变成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-dao&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-service&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改system-service目录中的pom.xml文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，加上<packaging>jar</packaging>，因为 groupId 和 version 会继承 system-parent 中的 groupId 和 version，packaging 设置打包方式为 jar，同时添加对 system-dao 模块的依赖，system-service 依赖 system-dao 和 system-domain，但是我们只需添加 system-dao 的依赖即可，因为 system-dao 已经依赖了 system-domain。修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project &gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-service&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-service&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    system-service依赖system-dao和system-domain，</span><br><span class="line">    但是我们只需添加system-dao的依赖即可，因为system-dao已经依赖了system-domain</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-dao&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="5、创建-system-web-模块"><a href="#5、创建-system-web-模块" class="headerlink" title="5、创建 system-web 模块"></a>5、创建 system-web 模块</h2><p>在命令行窗口中，进入创建好的 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create -DgroupId=cn.mavenbook -DartifactId=system-web -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</span><br></pre></td></tr></table></figure><p>命令执行完成之后，可以看到在 system-parent 目录中生成了 system-web 目录，里面包含 src 目录和 pom.xml 文件。</p><p>在\system-web\src\main\webapp目录中还生成了一个简单的index.jsp，里面的内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在 system-web\src\main\webapp\WEB-INF 目录中生成了web.xml文件。</p><p>同时，system-parent 目录中的 pom.xml 文件自动变成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-parent&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;system-domain&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-dao&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-service&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;system-web&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>修改system-web目录中的pom.xml文件，把<groupId>cn.mavenbook</groupId>和<version>1.0-SNAPSHOT</version>去掉，因为groupId和version会继承system-parent中的groupId和version，同时添加对system-service模块的依赖，修改后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-web&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-web Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--system-web依赖system-service--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-service&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;system-web&lt;/finalName&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/project&gt;</span><br></pre></td></tr></table></figure><p>注意，web项目的打包方式是war。</p><h2 id="6、编译运行项目"><a href="#6、编译运行项目" class="headerlink" title="6、编译运行项目"></a>6、编译运行项目</h2><p>经过上面的五个步骤，相关的模块全部创建完成，怎么运行起来呢？</p><p>由于最终运行的是 system-web 模块，所以我们对该模块添加 jetty 支持，方便测试运行。修改 system-web 项目的 pom.xml 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;system-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;system-web&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;system-web Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--system-web依赖system-service--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.mavenbook&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;system-service&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;system-web&lt;/finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!--配置Jetty插件--&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>在命令行进入 system-parent 目录，然后执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>命令执行完后，在 system-web 目录下多出了 target 目录，里面有了 system-web.war。</p><p>命令行进入 sytem-web 目录，执行如下命令，启动 jetty</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn jetty:run</span><br></pre></td></tr></table></figure><p>启动 jetty 服务器后，访问 <a href="http://localhost:8080/system-web/">http://localhost:8080/system-web/</a> 就可以获取到运行结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;  </span><br><span class="line">&lt;classifier&gt;jdk15&lt;/classifier&gt;    </span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;  </span><br><span class="line">&lt;classifier&gt;jdk13&lt;/classifier&gt;    </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>以上配置信息实际上对应的 jar 包是 json-lib-2.2.2-jdk15.jar 和 json-lib-2.2.2-jdk13.jar。</p><h3 id="（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。"><a href="#（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。" class="headerlink" title="（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。"></a>（2）区分项目的不同组成部分，例如，源代码、javadoc、类文件等。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;  </span><br><span class="line">&lt;classifier&gt;jdk15-javadoc&lt;/classifier&gt;    </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure><p>以上配置信息对应的是 json-lib-2.2.2-jdk15-javadoc.jar。</p><h3 id="提醒：需要注意classifier的位置"><a href="#提醒：需要注意classifier的位置" class="headerlink" title="提醒：需要注意classifier的位置"></a>提醒：需要注意classifier的位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;   </span><br><span class="line">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;   </span><br><span class="line">&lt;classifier&gt;jdk15-javadoc&lt;/classifier&gt;  </span><br><span class="line">&lt;version&gt;2.2.2&lt;/version&gt;   </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure><p>对应的是 json-lib-jdk15-javadoc-2.2.2.jar，可能会出现找不到jar包的情况。</p><h2 id="Maven构件特性"><a href="#Maven构件特性" class="headerlink" title="Maven构件特性"></a>Maven构件特性</h2><p>（1）构件具有依赖传递。例如：项目依赖构件A，而构件A又依赖B，Maven会将A和B都视为项目的依赖。</p><p>（2）构件之间存在版本冲突时，Maven会依据 “短路优先” 原则加载构件。此外，我们也可以在 pom.xml 中，使用 <exclusions></exclusions>显式排除某个版本的依赖，以确保项目能够运行。</p><ul><li>（a）项目依赖构件A和B，构件A → C → D(version:1.0.0)，构件B → D(version:1.1.0)，此时，Maven会优先解析加载D(version:1.1.0)。</li><li>（b）项目依赖构件A和B，构件A → D(version:1.0.0)， 构件B → D(version:1.1.0)，此时，Maven会优先解析加载D(version:1.0.0)。</li></ul><p>（3）构件的依赖范围。Maven在项目的构建过程中，会编译三套 ClassPath，分别对应：编译期，运行期，测试期。而依赖范围就是为构件指定它可以作用于哪套 ClassPath。</p><table><thead><tr><th align="left">-</th><th align="left">编译期</th><th align="left">测试期</th><th align="left">运行期</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left">默认范围</td></tr><tr><td align="left">provided</td><td align="left">√</td><td align="left">√</td><td align="left"></td><td align="left">如 servlet-api.jar，运行期由web容器提供。</td></tr><tr><td align="left">runtime</td><td align="left"></td><td align="left">√</td><td align="left">√</td><td align="left">编译期无需直接引用。</td></tr><tr><td align="left">test</td><td align="left"></td><td align="left">√</td><td align="left"></td><td align="left">如junit.jar。</td></tr><tr><td align="left">system</td><td align="left">√</td><td align="left">√</td><td align="left"></td><td align="left">必须通过 <systemPath></systemPath> 元素，显示指定依赖文件的路径， 与本地系统相关联，可移植性差。</td></tr><tr><td align="left">import</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">表示继承父POM.XML中的依赖范围设置</td></tr></tbody></table><blockquote><p><strong>提醒：</strong>Maven中的库是个物理概念，存放各种依赖 Jar，而 ClassPath 是个逻辑概念，指定所依赖 Jar 的可见性。</p></blockquote><h2 id="Maven坐标组成"><a href="#Maven坐标组成" class="headerlink" title="Maven坐标组成"></a>Maven坐标组成</h2><p>每个构件都有自己的唯一标识（Maven 行话称之为 <strong>“唯一坐标”</strong> ），由 groupId，artifactId 和 version 等信息构成。</p><ul><li>groupId：当前Maven构件隶属的组织名。groupId一般分为多段，通常情况下，第一段为域，第二段为公司名称。域又分为 org、com、cn 等，其中 org 为非营利组织，com 为商业组织，cn 表示中国。以 apache 开源社区的 tomcat 项目为例，这个项目的 groupId 是 org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artifactId是tomcat。(必须)</li><li>artifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。(必须)</li><li>version：当前版本。(必须)</li><li>packaging：打包方式，比如 jar，war… (必须)</li><li>classifier：classifier通常用于区分从同一POM构建的具有不同内容的构件。它是可选的，它可以是任意的字符串，附加在版本号之后。</li></ul><p>以MyBatis的坐标为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>groupId表示组织标识。 groupId定义当前Maven项目隶属的组织机构。举个例子，如果你的公司是mycom，有一个项目为myapp，那么groupId就应该是com.mycom.myapp。groupId的表示方式与Java包名的表示方式类似。</li><li>artifactId表示项目名称。该元素定义当前实际项目中的一个Maven项目（模块），推荐的做法是使用实际项目名称作为artifactId的前缀。比如上例中的mybatis，mybatis就是实际的项目名称，方便而且直观。在默认情况下，maven生成的构件，会以artifactId作为文件头，如mybatis-3.5.2.jar，使用实际项目名称作为前缀，就能方便的从本地仓库找到某个项目的构件。</li><li>version表示项目的当前版本。</li></ul><h2 id="Maven依赖范围"><a href="#Maven依赖范围" class="headerlink" title="Maven依赖范围"></a>Maven依赖范围</h2><p><strong>compile</strong></p><p>编译依赖范围（默认），使用此依赖范围对于编译、测试、运行三种都有效，即在编译、测试和运行的时候都要使用该依赖 Jar 包。</p><p><strong>test</strong></p><p>测试依赖范围，从字面意思就可以知道此依赖范围只能用于测试，而在编译和运行项目时无法使用此类依赖，典型的是 JUnit，它只用于编译测试代码和运行测试代码的时候才需要。</p><p><strong>provided</strong></p><p>此依赖范围，对于编译和测试有效，而对运行时无效。比如 servlet-api.jar 在 Tomcat 中已经提供了，我们只需要的是编译期提供而已。</p><p><strong>runtime</strong></p><p>运行时依赖范围，对于测试和运行有效，但是在编译主代码时无效，典型的就是JDBC驱动实现。</p><p><strong>system</strong></p><p>系统依赖范围，使用 system 范围的依赖时必须通过 systemPath 元素显示地指定依赖文件的路径，不依赖 Maven 仓库解析，所以可能会造成建构的不可移植。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdbc-stdext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim编辑器</title>
      <link href="/2022/08/11/vim/"/>
      <url>/2022/08/11/vim/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h2><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>输入i进入编辑模式 左下显示insert  按esc进入命令行模式</p><p>:q! 不保存直接退出</p><p>:wq保存退出 先保存在退出</p><p>k上j下h左l右</p><p>i插a填</p><p>o在光标下新增一行</p><p>O在光标上新增一行</p><p>G光标到文档底部</p><p>gg光标移动到最顶部</p><p>5j往下5行</p><p>设置set relationnumber 相对行号</p><p>yy复制整行 p粘贴</p><p>dd删除该行</p><p>.重复前次操作</p><p>u撤销操作</p><p>ctrl+r返回上一步</p><p>dw删除字符</p><p>cw删除字符并进入编辑模式</p><p>w跳动到每个词的开头</p><p>e跳动的每个词的结尾</p><p>b往回跳</p><p>&#x2F;关键字 搜索按回车光标定位到此</p><p>全局替换:%s&#x2F;旧字符&#x2F;新字符&#x2F;g</p><p>复制该单词yw</p><p>数字p粘贴几次</p><p>ci删除括号的内容</p><p>ctrl+q选择字符</p><p>ctrl+v选择整行</p><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2022/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><blockquote><ul><li>集合结构:集合结构中的数据元素除了同属一个集合外,没有任何的关系。</li><li>线性结构:数据元素为一对一的关系</li><li>树型结构:树形结构中的数据元素为一对多的关系</li><li>图结构:图形结构的数据元素是多对多的关系</li></ul></blockquote><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><blockquote><ul><li>顺序存储结构:把数据存在地址连续的存储单元,数据间的逻辑关系和物理关系是一致的</li><li>链式存储结构:把数据元素放在任意的存储单元中,这组存储单元可以是不连续的</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计文档</title>
      <link href="/2022/08/11/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
      <url>/2022/08/11/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><ul><li>数据库表设计</li><li>表关系</li></ul></li><li><p>接口设计</p><ul><li>准入准出</li><li>输入请求参数</li><li>输出的返回参数</li></ul></li><li><p>代码逻辑设计</p><ul><li>流程图展示</li></ul></li><li><p>SQL模版设计</p></li><li><p>测试</p><ul><li>测试用例</li><li>测试问题</li></ul></li><li><p>语言基础 网络协议 基本应用框架 设计模式</p></li><li><p>主要技术点 技术组件</p></li><li><p>运行部署</p></li><li><p>断点调试 修改代码达到效果</p></li><li><p>关键模块 研究模块 做好脑图笔记输出</p></li><li><p>代码优化 功能优化 加入自己的想法</p></li></ul><p>做好技术输出</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
